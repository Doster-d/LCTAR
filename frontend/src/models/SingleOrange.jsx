/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\singleOrange.glb --transform 
Files: .\singleOrange.glb [149.36KB] > C:\Users\Doster\Downloads\Telegram Desktop\singleOrange-transformed.glb [5.1KB] (97%)
*/
import React, { forwardRef, useEffect, useMemo, useRef } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

/**
 * @brief Статичная модель апельсина для визуализации маркеров.
 * @param props Проброшенные пропсы группы для позиционирования.
 * @returns {JSX.Element} Меш апельсина.
 */
export const Model = forwardRef((props, ref) => {
  const group = useRef()
  const { scene, animations } = useGLTF('models/singleOrange-transformed.glb')
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    if (!ref) return
    if (typeof ref === 'function') ref(group.current)
    else ref.current = group.current
  }, [ref])

  useEffect(() => {
    if (!actions) return
    const actionList = Object.values(actions)
    if (!actionList.length) return
    actionList.forEach(action => {
      action.reset().play()
    })
    return () => {
      actionList.forEach(action => {
        action.stop()
      })
    }
  }, [actions])

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Orange.geometry} material={materials.Mat} position={[0, -0.001, 0.002]} />
    </group>
  )
})

useGLTF.preload('./models/singleOrange-transformed.glb')
