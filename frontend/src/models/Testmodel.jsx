/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/testmodel.glb -o src/models/Testmodel.jsx -T 
Files: public/models/testmodel.glb [16.69MB] > E:\source\repos\LCTAR\frontend\src\models\testmodel-transformed.glb [16.37MB] (2%)
Author: MG Rips (https://sketchfab.com/MG_GameRips)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/dead-by-daylight-the-animatronic-0db438d8a6bc497eb26922dddb91a8dd
Title: Dead by Daylight - The Animatronic
*/

import React, {forwardRef, useRef, useEffect, useMemo} from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export const Model = forwardRef((props, ref) => {
  const group = useRef()
  const { scene, animations } = useGLTF('models/testmodel-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    if (!ref) return
    if (typeof ref === 'function') ref(group.current)
    else ref.current = group.current
  }, [ref])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <primitive object={nodes._rootJoint} />
        <skinnedMesh name="Object_92" geometry={nodes.Object_92.geometry} material={materials.ArmsMat} skeleton={nodes.Object_92.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_93" geometry={nodes.Object_93.geometry} material={materials.ArmsAccMat} skeleton={nodes.Object_93.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_94" geometry={nodes.Object_94.geometry} material={materials.LegsMat} skeleton={nodes.Object_94.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_95" geometry={nodes.Object_95.geometry} material={materials.CorpseMat} skeleton={nodes.Object_95.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_96" geometry={nodes.Object_96.geometry} material={materials.TorsoMat} skeleton={nodes.Object_96.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_98" geometry={nodes.Object_98.geometry} material={materials.HeadMat} skeleton={nodes.Object_98.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_99" geometry={nodes.Object_99.geometry} material={materials.HeadAcc} skeleton={nodes.Object_99.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_100" geometry={nodes.Object_100.geometry} material={materials.CorpseMat} skeleton={nodes.Object_100.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_102" geometry={nodes.Object_102.geometry} material={materials.WeaponMat} skeleton={nodes.Object_102.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
        <skinnedMesh name="Object_104" geometry={nodes.Object_104.geometry} material={materials.AltWeaponMat} skeleton={nodes.Object_104.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.011} />
      </group>
    </group>
  )
})

useGLTF.preload('models/testmodel-transformed.glb')
