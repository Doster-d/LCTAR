/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Train-transformed.glb -o src/models/Train.jsx -T
Files: public/models/Train-transformed.glb
*/

import React, { forwardRef, useEffect, useMemo, useRef } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

/**
 * @brief Анимированная модель поезда с поддержкой переиспользования и клонирования.
 * @param props Проброшенные пропсы группы для позиционирования.
 * @returns {JSX.Element} Иерархия мешей с подключённой анимацией.
 */
export const Model = forwardRef((props, ref) => {
  const group = useRef()
  const { scene, animations } = useGLTF('./models/Train-transformed.glb')
  const clonedScene = useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clonedScene)
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    if (!ref) return
    if (typeof ref === 'function') ref(group.current)
    else ref.current = group.current
  }, [ref])

  useEffect(() => {
    if (!group.current) return
    const animationsList = Array.isArray(animations) ? animations : []
    group.current.userData.animations = animationsList
    group.current.animations = animationsList
  }, [animations])

  useEffect(() => {
    if (!actions) return
    const actionList = Object.values(actions)
    if (!actionList.length) return
    actionList.forEach(action => action.reset().play())
  }, [actions])

  const trainBodyNode = nodes['Train-Mat.2'] ?? nodes['Train-Mat2'] ?? nodes['Train_Mat.2'] ?? nodes['Train_Mat2']
  const trainWagonNode = nodes['Train-Wagon']
  const trainWheelsNode = nodes['Train-Wheels']
  const railsNode = nodes.Rails

  if (!trainBodyNode) {
    console.error('Train model mesh "Train-Mat.2" not found. Available nodes:', Object.keys(nodes))
  }

  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <group name="Null">
          <group name="Train" position={[0.001, 0.26, -9.888]}>
            {trainBodyNode && (
              <mesh
                name={trainBodyNode.name ?? 'Train-Mat.2'}
                geometry={trainBodyNode.geometry}
                material={materials['Mat.2']}
              />
            )}
            {trainWagonNode && (
              <mesh
                name={trainWagonNode.name ?? 'Train-Wagon'}
                geometry={trainWagonNode.geometry}
                material={materials.Wagon}
              />
            )}
            {trainWheelsNode && (
              <mesh
                name={trainWheelsNode.name ?? 'Train-Wheels'}
                geometry={trainWheelsNode.geometry}
                material={materials.Wheels}
              />
            )}
          </group>
          {railsNode && (
            <mesh
              name={railsNode.name ?? 'Rails'}
              geometry={railsNode.geometry}
              material={materials['Mat.5']}
              position={[-0.001, -0.114, -10.932]}
            />
          )}
        </group>
      </group>
    </group>
  )
})

/**
 * @brief Предварительно загружает GLTF-модель поезда для рендера.
 */
useGLTF.preload('./models/Train-transformed.glb')
