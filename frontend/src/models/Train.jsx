/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Train.glb -o src/models/Train.jsx -T 
Files: public/models/Train.glb [8.46KB] > E:\source\repos\LCTAR\frontend\src\models\Train-transformed.glb [8.53KB] (-1%)
*/

import React, { forwardRef, useEffect, useRef } from 'react'
import { useFrame } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'

/**
 * @brief Статичная модель поезда для визуализации маркеров.
 * @param props Проброшенные пропсы группы для позиционирования.
 * @returns {JSX.Element} Набор мешей поезда.
 */
export const Model = forwardRef((props, ref) => {
  const { nodes, materials } = useGLTF('./models/Train-transformed.glb')
  const wheelRef = useRef()
  const timeRef = useRef(0)
  const baseRef = useRef(null)

  // Добавляем реф и таймер для всей модели
  const groupRef = useRef(null)
  const groupBaseRef = useRef(null)
  const groupTimeRef = useRef(0)

  useEffect(() => {
    if (!ref) return
    if (typeof ref === 'function') ref(groupRef.current)
    else ref.current = groupRef.current
  }, [ref])

  // Анимация только работает в React Three Fiber Canvas, в AR используется внешняя анимация
  useFrame((_, delta) => {
    const wheel = wheelRef.current
    const group = groupRef.current
    if (!wheel && !group) return

    if (wheel && !baseRef.current) {
      baseRef.current = {
        x: wheel.position.x,
        y: wheel.position.y,
        z: wheel.position.z
      }
    }

    if (group && !groupBaseRef.current) {
      groupBaseRef.current = {
        x: group.position.x,
        y: group.position.y,
        z: group.position.z,
        rotX: group.rotation.x,
        rotY: group.rotation.y,
        rotZ: group.rotation.z
      }
    }

    // Анимация колес: только вертикальное (вверх‑вниз) движение
    timeRef.current = (timeRef.current + delta * 0.3) % 1
    const t = timeRef.current
    const amplitude = 0.008 // уменьшенная амплитуда движения по Y для колес
    const offsetY = Math.sin(t * Math.PI * 2) * amplitude
    if (wheel) wheel.position.y = baseRef.current.y + offsetY

    // Анимация всей модели: мягкое вверх‑вниз и небольшой наклон
    groupTimeRef.current += delta
    const gt = groupTimeRef.current
    const groupAmp = 0.01 // уменьшенная амплитуда для всей модели (по Y)
    const groupOffsetY = Math.sin(gt * 0.8) * groupAmp
    const tiltAmp = 0.008 // уменьшенная амплитуда наклона (в радианах)
    const tilt = Math.sin(gt * 0.6) * tiltAmp

    if (group && groupBaseRef.current) {
      group.position.y = groupBaseRef.current.y + groupOffsetY
      // Небольшой наклон вокруг Z (или X/Y — при необходимости)
      group.rotation.z = groupBaseRef.current.rotZ + tilt
    }
  })

  return (
    <group ref={groupRef} {...props} dispose={null}>
      {/* Коррекция ориентации: поворот на 180° по X чтобы поезд был правильно ориентирован */}
      <group rotation={[0, 0, 0]}>
        <mesh geometry={nodes['Train-Mat2'].geometry} material={materials['Mat.2']} position={[0.001, 0.26, 0.014]} />
        <mesh geometry={nodes['Train-Wagon'].geometry} material={materials.Wagon} position={[0.001, 0.26, 0.014]} />
        <mesh ref={wheelRef} geometry={nodes['Train-Wheels'].geometry} material={materials.Wheels} position={[0.001, 0.26, 0.014]} />
      </group>
    </group>
  )
})

/**
 * @brief Предварительно загружает GLTF-модель поезда для рендера.
 */
useGLTF.preload('./models/Train-transformed.glb')
