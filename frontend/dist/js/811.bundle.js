(()=>{var __webpack_modules__={138:(I,g,C)=>{"use strict";I.exports=C.p+"c85c7df8e3132b359723.wasm"},232:function(module,exports,__webpack_require__){eval("{var __WEBPACK_AMD_DEFINE_RESULT__;/////////////////////////////////////////////////////////////////////////////////\n/* UAParser.js v1.0.33\n   Copyright Â© 2012-2021 Faisal Salman <f@faisalman.com>\n   MIT License *//*\n   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n   Supports browser & node.js environment. \n   Demo   : https://faisalman.github.io/ua-parser-js\n   Source : https://github.com/faisalman/ua-parser-js */\n/////////////////////////////////////////////////////////////////////////////////\n\n(function (window, undefined) {\n\n    'use strict';\n\n    //////////////\n    // Constants\n    /////////////\n\n\n    var LIBVERSION  = '1.0.33',\n        EMPTY       = '',\n        UNKNOWN     = '?',\n        FUNC_TYPE   = 'function',\n        UNDEF_TYPE  = 'undefined',\n        OBJ_TYPE    = 'object',\n        STR_TYPE    = 'string',\n        MAJOR       = 'major',\n        MODEL       = 'model',\n        NAME        = 'name',\n        TYPE        = 'type',\n        VENDOR      = 'vendor',\n        VERSION     = 'version',\n        ARCHITECTURE= 'architecture',\n        CONSOLE     = 'console',\n        MOBILE      = 'mobile',\n        TABLET      = 'tablet',\n        SMARTTV     = 'smarttv',\n        WEARABLE    = 'wearable',\n        EMBEDDED    = 'embedded',\n        UA_MAX_LENGTH = 350;\n\n    var AMAZON  = 'Amazon',\n        APPLE   = 'Apple',\n        ASUS    = 'ASUS',\n        BLACKBERRY = 'BlackBerry',\n        BROWSER = 'Browser',\n        CHROME  = 'Chrome',\n        EDGE    = 'Edge',\n        FIREFOX = 'Firefox',\n        GOOGLE  = 'Google',\n        HUAWEI  = 'Huawei',\n        LG      = 'LG',\n        MICROSOFT = 'Microsoft',\n        MOTOROLA  = 'Motorola',\n        OPERA   = 'Opera',\n        SAMSUNG = 'Samsung',\n        SHARP   = 'Sharp',\n        SONY    = 'Sony',\n        XIAOMI  = 'Xiaomi',\n        ZEBRA   = 'Zebra',\n        FACEBOOK   = 'Facebook';\n\n    ///////////\n    // Helper\n    //////////\n\n    var extend = function (regexes, extensions) {\n            var mergedRegexes = {};\n            for (var i in regexes) {\n                if (extensions[i] && extensions[i].length % 2 === 0) {\n                    mergedRegexes[i] = extensions[i].concat(regexes[i]);\n                } else {\n                    mergedRegexes[i] = regexes[i];\n                }\n            }\n            return mergedRegexes;\n        },\n        enumerize = function (arr) {\n            var enums = {};\n            for (var i=0; i<arr.length; i++) {\n                enums[arr[i].toUpperCase()] = arr[i];\n            }\n            return enums;\n        },\n        has = function (str1, str2) {\n            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n        },\n        lowerize = function (str) {\n            return str.toLowerCase();\n        },\n        majorize = function (version) {\n            return typeof(version) === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split('.')[0] : undefined;\n        },\n        trim = function (str, len) {\n            if (typeof(str) === STR_TYPE) {\n                str = str.replace(/^\\s\\s*/, EMPTY);\n                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n            }\n    };\n\n    ///////////////\n    // Map helper\n    //////////////\n\n    var rgxMapper = function (ua, arrays) {\n\n            var i = 0, j, k, p, q, matches, match;\n\n            // loop through all regexes maps\n            while (i < arrays.length && !matches) {\n\n                var regex = arrays[i],       // even sequence (0,2,4,..)\n                    props = arrays[i + 1];   // odd sequence (1,3,5,..)\n                j = k = 0;\n\n                // try matching uastring with regexes\n                while (j < regex.length && !matches) {\n\n                    matches = regex[j++].exec(ua);\n\n                    if (!!matches) {\n                        for (p = 0; p < props.length; p++) {\n                            match = matches[++k];\n                            q = props[p];\n                            // check if given property is actually array\n                            if (typeof q === OBJ_TYPE && q.length > 0) {\n                                if (q.length === 2) {\n                                    if (typeof q[1] == FUNC_TYPE) {\n                                        // assign modified match\n                                        this[q[0]] = q[1].call(this, match);\n                                    } else {\n                                        // assign given value, ignore regex match\n                                        this[q[0]] = q[1];\n                                    }\n                                } else if (q.length === 3) {\n                                    // check whether function or regex\n                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                                        // call function (usually string mapper)\n                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;\n                                    } else {\n                                        // sanitize match using given regex\n                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;\n                                    }\n                                } else if (q.length === 4) {\n                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;\n                                }\n                            } else {\n                                this[q] = match ? match : undefined;\n                            }\n                        }\n                    }\n                }\n                i += 2;\n            }\n        },\n\n        strMapper = function (str, map) {\n\n            for (var i in map) {\n                // check if current value is array\n                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n                    for (var j = 0; j < map[i].length; j++) {\n                        if (has(map[i][j], str)) {\n                            return (i === UNKNOWN) ? undefined : i;\n                        }\n                    }\n                } else if (has(map[i], str)) {\n                    return (i === UNKNOWN) ? undefined : i;\n                }\n            }\n            return str;\n    };\n\n    ///////////////\n    // String map\n    //////////////\n\n    // Safari < 3.0\n    var oldSafariMap = {\n            '1.0'   : '/8',\n            '1.2'   : '/1',\n            '1.3'   : '/3',\n            '2.0'   : '/412',\n            '2.0.2' : '/416',\n            '2.0.3' : '/417',\n            '2.0.4' : '/419',\n            '?'     : '/'\n        },\n        windowsVersionMap = {\n            'ME'        : '4.90',\n            'NT 3.11'   : 'NT3.51',\n            'NT 4.0'    : 'NT4.0',\n            '2000'      : 'NT 5.0',\n            'XP'        : ['NT 5.1', 'NT 5.2'],\n            'Vista'     : 'NT 6.0',\n            '7'         : 'NT 6.1',\n            '8'         : 'NT 6.2',\n            '8.1'       : 'NT 6.3',\n            '10'        : ['NT 6.4', 'NT 10.0'],\n            'RT'        : 'ARM'\n    };\n\n    //////////////\n    // Regex map\n    /////////////\n\n    var regexes = {\n\n        browser : [[\n\n            /\\b(?:crmo|crios)\\/([\\w\\.]+)/i                                      // Chrome for Android/iOS\n            ], [VERSION, [NAME, 'Chrome']], [\n            /edg(?:e|ios|a)?\\/([\\w\\.]+)/i                                       // Microsoft Edge\n            ], [VERSION, [NAME, 'Edge']], [\n\n            // Presto based\n            /(opera mini)\\/([-\\w\\.]+)/i,                                        // Opera Mini\n            /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,                 // Opera Mobi/Tablet\n            /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i                           // Opera\n            ], [NAME, VERSION], [\n            /opios[\\/ ]+([\\w\\.]+)/i                                             // Opera mini on iphone >= 8.0\n            ], [VERSION, [NAME, OPERA+' Mini']], [\n            /\\bopr\\/([\\w\\.]+)/i                                                 // Opera Webkit\n            ], [VERSION, [NAME, OPERA]], [\n\n            // Mixed\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(lunascape|maxthon|netfront|jasmine|blazer)[\\/ ]?([\\w\\.]*)/i,      // Lunascape/Maxthon/Netfront/Jasmine/Blazer\n            // Trident based\n            /(avant |iemobile|slim)(?:browser)?[\\/ ]?([\\w\\.]*)/i,               // Avant/IEMobile/SlimBrowser\n            /(ba?idubrowser)[\\/ ]?([\\w\\.]+)/i,                                  // Baidu Browser\n            /(?:ms|\\()(ie) ([\\w\\.]+)/i,                                         // Internet Explorer\n\n            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq|duckduckgo)\\/([-\\w\\.]+)/i,\n                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ\n            /(weibo)__([\\d\\.]+)/i                                               // Weibo\n            ], [NAME, VERSION], [\n            /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i                 // UCBrowser\n            ], [VERSION, [NAME, 'UC'+BROWSER]], [\n            /microm.+\\bqbcore\\/([\\w\\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser\n            /\\bqbcore\\/([\\w\\.]+).+microm/i\n            ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [\n            /micromessenger\\/([\\w\\.]+)/i                                        // WeChat\n            ], [VERSION, [NAME, 'WeChat']], [\n            /konqueror\\/([\\w\\.]+)/i                                             // Konqueror\n            ], [VERSION, [NAME, 'Konqueror']], [\n            /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i                       // IE11\n            ], [VERSION, [NAME, 'IE']], [\n            /yabrowser\\/([\\w\\.]+)/i                                             // Yandex\n            ], [VERSION, [NAME, 'Yandex']], [\n            /(avast|avg)\\/([\\w\\.]+)/i                                           // Avast/AVG Secure Browser\n            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [\n            /\\bfocus\\/([\\w\\.]+)/i                                               // Firefox Focus\n            ], [VERSION, [NAME, FIREFOX+' Focus']], [\n            /\\bopt\\/([\\w\\.]+)/i                                                 // Opera Touch\n            ], [VERSION, [NAME, OPERA+' Touch']], [\n            /coc_coc\\w+\\/([\\w\\.]+)/i                                            // Coc Coc Browser\n            ], [VERSION, [NAME, 'Coc Coc']], [\n            /dolfin\\/([\\w\\.]+)/i                                                // Dolphin\n            ], [VERSION, [NAME, 'Dolphin']], [\n            /coast\\/([\\w\\.]+)/i                                                 // Opera Coast\n            ], [VERSION, [NAME, OPERA+' Coast']], [\n            /miuibrowser\\/([\\w\\.]+)/i                                           // MIUI Browser\n            ], [VERSION, [NAME, 'MIUI '+BROWSER]], [\n            /fxios\\/([-\\w\\.]+)/i                                                // Firefox for iOS\n            ], [VERSION, [NAME, FIREFOX]], [\n            /\\bqihu|(qi?ho?o?|360)browser/i                                     // 360\n            ], [[NAME, '360 '+BROWSER]], [\n            /(oculus|samsung|sailfish|huawei)browser\\/([\\w\\.]+)/i\n            ], [[NAME, /(.+)/, '$1 '+BROWSER], VERSION], [                      // Oculus/Samsung/Sailfish/Huawei Browser\n            /(comodo_dragon)\\/([\\w\\.]+)/i                                       // Comodo Dragon\n            ], [[NAME, /_/g, ' '], VERSION], [\n            /(electron)\\/([\\w\\.]+) safari/i,                                    // Electron-based App\n            /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,                   // Tesla\n            /m?(qqbrowser|baiduboxapp|2345Explorer)[\\/ ]?([\\w\\.]+)/i            // QQBrowser/Baidu App/2345 Browser\n            ], [NAME, VERSION], [\n            /(metasr)[\\/ ]?([\\w\\.]+)/i,                                         // SouGouBrowser\n            /(lbbrowser)/i,                                                     // LieBao Browser\n            /\\[(linkedin)app\\]/i                                                // LinkedIn App for iOS & Android\n            ], [NAME], [\n\n            // WebView\n            /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i       // Facebook App for iOS & Android\n            ], [[NAME, FACEBOOK], VERSION], [\n            /safari (line)\\/([\\w\\.]+)/i,                                        // Line App for iOS\n            /\\b(line)\\/([\\w\\.]+)\\/iab/i,                                        // Line App for Android\n            /(chromium|instagram)[\\/ ]([-\\w\\.]+)/i                              // Chromium/Instagram\n            ], [NAME, VERSION], [\n            /\\bgsa\\/([\\w\\.]+) .*safari\\//i                                      // Google Search Appliance on iOS\n            ], [VERSION, [NAME, 'GSA']], [\n\n            /headlesschrome(?:\\/([\\w\\.]+)| )/i                                  // Chrome Headless\n            ], [VERSION, [NAME, CHROME+' Headless']], [\n\n            / wv\\).+(chrome)\\/([\\w\\.]+)/i                                       // Chrome WebView\n            ], [[NAME, CHROME+' WebView'], VERSION], [\n\n            /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i           // Android Browser\n            ], [VERSION, [NAME, 'Android '+BROWSER]], [\n\n            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia\n            ], [NAME, VERSION], [\n\n            /version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i                      // Mobile Safari\n            ], [VERSION, [NAME, 'Mobile Safari']], [\n            /version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile\n            ], [VERSION, NAME], [\n            /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i                      // Safari < 3.0\n            ], [NAME, [VERSION, strMapper, oldSafariMap]], [\n\n            /(webkit|khtml)\\/([\\w\\.]+)/i\n            ], [NAME, VERSION], [\n\n            // Gecko based\n            /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i                              // Netscape\n            ], [[NAME, 'Netscape'], VERSION], [\n            /mobile vr; rv:([\\w\\.]+)\\).+firefox/i                               // Firefox Reality\n            ], [VERSION, [NAME, FIREFOX+' Reality']], [\n            /ekiohf.+(flow)\\/([\\w\\.]+)/i,                                       // Flow\n            /(swiftfox)/i,                                                      // Swiftfox\n            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\\/ ]?([\\w\\.\\+]+)/i,\n                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar\n            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n            /(firefox)\\/([\\w\\.]+)/i,                                            // Other Firefox-based\n            /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,                         // Mozilla\n\n            // Other\n            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser\n            /(links) \\(([\\w\\.]+)/i                                              // Links\n            ], [NAME, VERSION], [\n            \n            /(cobalt)\\/([\\w\\.]+)/i                                              // Cobalt\n            ], [NAME, [VERSION, /master.|lts./, \"\"]]\n        ],\n\n        cpu : [[\n\n            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i                     // AMD64 (x64)\n            ], [[ARCHITECTURE, 'amd64']], [\n\n            /(ia32(?=;))/i                                                      // IA32 (quicktime)\n            ], [[ARCHITECTURE, lowerize]], [\n\n            /((?:i[346]|x)86)[;\\)]/i                                            // IA32 (x86)\n            ], [[ARCHITECTURE, 'ia32']], [\n\n            /\\b(aarch64|arm(v?8e?l?|_?64))\\b/i                                 // ARM64\n            ], [[ARCHITECTURE, 'arm64']], [\n\n            /\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i                                   // ARMHF\n            ], [[ARCHITECTURE, 'armhf']], [\n\n            // PocketPC mistakenly identified as PowerPC\n            /windows (ce|mobile); ppc;/i\n            ], [[ARCHITECTURE, 'arm']], [\n\n            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i                            // PowerPC\n            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [\n\n            /(sun4\\w)[;\\)]/i                                                    // SPARC\n            ], [[ARCHITECTURE, 'sparc']], [\n\n            /((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i\n                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n            ], [[ARCHITECTURE, lowerize]]\n        ],\n\n        device : [[\n\n            //////////////////////////\n            // MOBILES & TABLETS\n            // Ordered by popularity\n            /////////////////////////\n\n            // Samsung\n            /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [\n            /\\b((?:s[cgp]h|gt|sm)-\\w+|galaxy nexus)/i,\n            /samsung[- ]([-\\w]+)/i,\n            /sec-(sgh\\w+)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [\n\n            // Apple\n            /\\((ip(?:hone|od)[\\w ]*);/i                                         // iPod/iPhone\n            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [\n            /\\((ipad);[-\\w\\),; ]+apple/i,                                       // iPad\n            /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n            /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [\n            /(macintosh);/i\n            ], [MODEL, [VENDOR, APPLE]], [\n\n            // Huawei\n            /\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [\n            /(?:huawei|honor)([-\\w ]+)[;\\)]/i,\n            /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [\n\n            // Xiaomi\n            /\\b(poco[\\w ]+)(?: bui|\\))/i,                                       // Xiaomi POCO\n            /\\b; (\\w+) build\\/hm\\1/i,                                           // Xiaomi Hongmi 'numeric' models\n            /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,                             // Xiaomi Hongmi\n            /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,                   // Xiaomi Redmi\n            /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\\))/i // Xiaomi Mi\n            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [\n            /\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i                        // Mi Pad tablets\n            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [\n\n            // OPPO\n            /; (\\w+) bui.+ oppo/i,\n            /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [\n\n            // Vivo\n            /vivo (\\w+)(?: bui|\\))/i,\n            /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [\n\n            // Realme\n            /\\b(rmx[12]\\d{3})(?: bui|;|\\))/i\n            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [\n\n            // Motorola\n            /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n            /\\bmot(?:orola)?[- ](\\w*)/i,\n            /((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [\n            /\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [\n\n            // LG\n            /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [\n            /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n            /\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i,\n            /\\blg-?([\\d\\w]+) bui/i\n            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [\n\n            // Lenovo\n            /(ideatab[-\\w ]+)/i,\n            /lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i\n            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [\n\n            // Nokia\n            /(?:maemo|nokia).*(n900|lumia \\d+)/i,\n            /nokia[-_ ]?([-\\w\\.]*)/i\n            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [\n\n            // Google\n            /(pixel c)\\b/i                                                      // Google Pixel C\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [\n            /droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i                         // Google Pixel\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [\n\n            // Sony\n            /droid.+ (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [\n            /sony tablet [ps]/i,\n            /\\b(?:sony)?sgp\\w+(?: bui|\\))/i\n            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [\n\n            // OnePlus\n            / (kb2005|in20[12]5|be20[12][59])\\b/i,\n            /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [\n\n            // Amazon\n            /(alexa)webm/i,\n            /(kf[a-z]{2}wi)( bui|\\))/i,                                         // Kindle Fire without Silk\n            /(kf[a-z]+)( bui|\\)).+silk\\//i                                      // Kindle Fire HD\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [\n            /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i                     // Fire Phone\n            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [\n\n            // BlackBerry\n            /(playbook);[-\\w\\),; ]+(rim)/i                                      // BlackBerry PlayBook\n            ], [MODEL, VENDOR, [TYPE, TABLET]], [\n            /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n            /\\(bb10; (\\w+)/i                                                    // BlackBerry 10\n            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [\n\n            // Asus\n            /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [\n            / (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [\n\n            // HTC\n            /(nexus 9)/i                                                        // HTC Nexus 9\n            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [\n            /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,                         // HTC\n\n            // ZTE\n            /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n            /(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [\n\n            // Acer\n            /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [\n\n            // Meizu\n            /droid.+; (m[1-5] note) bui/i,\n            /\\bmz-([-\\w]{2,})/i\n            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\n\n            // Sharp\n            /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [\n\n            // MIXED\n            /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\\w]*)/i,\n                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron\n            /(hp) ([\\w ]+\\w)/i,                                                 // HP iPAQ\n            /(asus)-?(\\w+)/i,                                                   // Asus\n            /(microsoft); (lumia[\\w ]+)/i,                                      // Microsoft Lumia\n            /(lenovo)[-_ ]?([-\\w]+)/i,                                          // Lenovo\n            /(jolla)/i,                                                         // Jolla\n            /(oppo) ?([\\w ]+) bui/i                                             // OPPO\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n\n            /(archos) (gamepad2?)/i,                                            // Archos\n            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(nook)[\\w ]+build\\/(\\w+)/i,                                        // Nook\n            /(dell) (strea[kpr\\d ]*[\\dko])/i,                                   // Dell Streak\n            /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,                                  // Le Pan Tablets\n            /(trinity)[- ]*(t\\d{3}) bui/i,                                      // Trinity Tablets\n            /(gigaset)[- ]+(q\\w{1,9}) bui/i,                                    // Gigaset Tablets\n            /(vodafone) ([\\w ]+)(?:\\)| bui)/i                                   // Vodafone\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n\n            /(surface duo)/i                                                    // Surface Duo\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [\n            /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i                                 // Fairphone\n            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [\n            /(u304aa)/i                                                         // AT&T\n            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [\n            /\\bsie-(\\w*)/i                                                      // Siemens\n            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [\n            /\\b(rct\\w+) b/i                                                     // RCA Tablets\n            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [\n            /\\b(venue[\\d ]{2,7}) b/i                                            // Dell Venue Tablets\n            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [\n            /\\b(q(?:mv|ta)\\w+) b/i                                              // Verizon Tablet\n            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [\n            /\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i                       // Barnes & Noble Tablet\n            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [\n            /\\b(tm\\d{3}\\w+) b/i\n            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [\n            /\\b(k88) b/i                                                        // ZTE K Series Tablet\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [\n            /\\b(nx\\d{3}j) b/i                                                   // ZTE Nubia\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [\n            /\\b(gen\\d{3}) b.+49h/i                                              // Swiss GEN Mobile\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [\n            /\\b(zur\\d{3}) b/i                                                   // Swiss ZUR Tablet\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [\n            /\\b((zeki)?tb.*\\b) b/i                                              // Zeki Tablets\n            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [\n            /\\b([yr]\\d{2}) b/i,\n            /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i                                // Dragon Touch Tablet\n            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [\n            /\\b(ns-?\\w{0,9}) b/i                                                // Insignia Tablets\n            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [\n            /\\b((nxa|next)-?\\w{0,9}) b/i                                        // NextBook Tablets\n            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [\n            /\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones\n            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [\n            /\\b(lvtel\\-)?(v1[12]) b/i                                           // LvTel Phones\n            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [\n            /\\b(ph-1) /i                                                        // Essential PH-1\n            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [\n            /\\b(v(100md|700na|7011|917g).*\\b) b/i                               // Envizen Tablets\n            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [\n            /\\b(trio[-\\w\\. ]+) b/i                                              // MachSpeed Tablets\n            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [\n            /\\btu_(1491) b/i                                                    // Rotor Tablets\n            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [\n            /(shield[\\w ]+) b/i                                                 // Nvidia Shield Tablets\n            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [\n            /(sprint) (\\w+)/i                                                   // Sprint Phones\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n            /(kin\\.[onetw]{3})/i                                                // Microsoft Kin\n            ], [[MODEL, /\\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [\n            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i             // Zebra\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [\n            /droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [\n\n            ///////////////////\n            // CONSOLES\n            ///////////////////\n\n            /(ouya)/i,                                                          // Ouya\n            /(nintendo) ([wids3utch]+)/i                                        // Nintendo\n            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [\n            /droid.+; (shield) bui/i                                            // Nvidia\n            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [\n            /(playstation [345portablevi]+)/i                                   // Playstation\n            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [\n            /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i                                // Microsoft Xbox\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [\n\n            ///////////////////\n            // SMARTTVS\n            ///////////////////\n\n            /smart-tv.+(samsung)/i                                              // Samsung\n            ], [VENDOR, [TYPE, SMARTTV]], [\n            /hbbtv.+maple;(\\d+)/i\n            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [\n            /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i        // LG SmartTV\n            ], [[VENDOR, LG], [TYPE, SMARTTV]], [\n            /(apple) ?tv/i                                                      // Apple TV\n            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [\n            /crkey/i                                                            // Google Chromecast\n            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /droid.+aft(\\w)( bui|\\))/i                                          // Fire TV\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [\n            /\\(dtv[\\);].+(aquos)/i,\n            /(aquos-tv[\\w ]+)\\)/i                                               // Sharp\n            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[\n            /(bravia[\\w ]+)( bui|\\))/i                                              // Sony\n            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [\n            /(mitv-\\w{5}) bui/i                                                 // Xiaomi\n            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [\n            /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,                          // Roku\n            /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w ]*; *(\\w[^;]*);([^;]*)/i               // HbbTV devices\n            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [\n            /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i                   // SmartTV from Unidentified Vendors\n            ], [[TYPE, SMARTTV]], [\n\n            ///////////////////\n            // WEARABLES\n            ///////////////////\n\n            /((pebble))app/i                                                    // Pebble\n            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [\n            /droid.+; (glass) \\d/i                                              // Google Glass\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [\n            /droid.+; (wt63?0{2,3})\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [\n            /(quest( 2)?)/i                                                     // Oculus Quest\n            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [\n\n            ///////////////////\n            // EMBEDDED\n            ///////////////////\n\n            /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i                              // Tesla\n            ], [VENDOR, [TYPE, EMBEDDED]], [\n\n            ////////////////////\n            // MIXED (GENERIC)\n            ///////////////////\n\n            /droid .+?; ([^;]+?)(?: bui|\\) applew).+? mobile safari/i           // Android Phones from Unidentified Vendors\n            ], [MODEL, [TYPE, MOBILE]], [\n            /droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors\n            ], [MODEL, [TYPE, TABLET]], [\n            /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i                      // Unidentifiable Tablet\n            ], [[TYPE, TABLET]], [\n            /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile\n            ], [[TYPE, MOBILE]], [\n            /(android[-\\w\\. ]{0,9});.+buil/i                                    // Generic Android Device\n            ], [MODEL, [VENDOR, 'Generic']]\n        ],\n\n        engine : [[\n\n            /windows.+ edge\\/([\\w\\.]+)/i                                       // EdgeHTML\n            ], [VERSION, [NAME, EDGE+'HTML']], [\n\n            /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i                         // Blink\n            ], [VERSION, [NAME, 'Blink']], [\n\n            /(presto)\\/([\\w\\.]+)/i,                                             // Presto\n            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\\/([\\w\\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna\n            /ekioh(flow)\\/([\\w\\.]+)/i,                                          // Flow\n            /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,                           // KHTML/Tasman/Links\n            /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i                                       // iCab\n            ], [NAME, VERSION], [\n\n            /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i                                     // Gecko\n            ], [VERSION, NAME]\n        ],\n\n        os : [[\n\n            // Windows\n            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)\n            ], [NAME, VERSION], [\n            /(windows) nt 6\\.2; (arm)/i,                                        // Windows RT\n            /(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i,            // Windows Phone\n            /(windows)[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i\n            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [\n            /(win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i\n            ], [[NAME, 'Windows'], [VERSION, strMapper, windowsVersionMap]], [\n\n            // iOS/macOS\n            /ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i,              // iOS\n            /cfnetwork\\/.+darwin/i\n            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [\n            /(mac os x) ?([\\w\\. ]*)/i,\n            /(macintosh|mac_powerpc\\b)(?!.+haiku)/i                             // Mac OS\n            ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [\n\n            // Mobile OSes\n            /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS\n            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS\n            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\\/ ]?([\\w\\.]*)/i,\n            /(blackberry)\\w*\\/([\\w\\.]*)/i,                                      // Blackberry\n            /(tizen|kaios)[\\/ ]([\\w\\.]+)/i,                                     // Tizen/KaiOS\n            /\\((series40);/i                                                    // Series 40\n            ], [NAME, VERSION], [\n            /\\(bb(10);/i                                                        // BlackBerry 10\n            ], [VERSION, [NAME, BLACKBERRY]], [\n            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i         // Symbian\n            ], [VERSION, [NAME, 'Symbian']], [\n            /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n            ], [VERSION, [NAME, FIREFOX+' OS']], [\n            /web0s;.+rt(tv)/i,\n            /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i                              // WebOS\n            ], [VERSION, [NAME, 'webOS']], [\n\n            // Google Chromecast\n            /crkey\\/([\\d\\.]+)/i                                                 // Google Chromecast\n            ], [VERSION, [NAME, CHROME+'cast']], [\n            /(cros) [\\w]+ ([\\w\\.]+\\w)/i                                         // Chromium OS\n            ], [[NAME, 'Chromium OS'], VERSION],[\n\n            // Console\n            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation\n            /(xbox); +xbox ([^\\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)\n\n            // Other\n            /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,                            // Joli/Palm\n            /(mint)[\\/\\(\\) ]?(\\w*)/i,                                           // Mint\n            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux\n            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n            /(hurd|linux) ?([\\w\\.]*)/i,                                         // Hurd/Linux\n            /(gnu) ?([\\w\\.]*)/i,                                                // GNU\n            /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n            /(haiku) (\\w+)/i                                                    // Haiku\n            ], [NAME, VERSION], [\n            /(sunos) ?([\\w\\.\\d]*)/i                                             // Solaris\n            ], [[NAME, 'Solaris'], VERSION], [\n            /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,                              // Solaris\n            /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,                                  // AIX\n            /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,            // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX\n            /(unix) ?([\\w\\.]*)/i                                                // UNIX\n            ], [NAME, VERSION]\n        ]\n    };\n\n    /////////////////\n    // Constructor\n    ////////////////\n\n    var UAParser = function (ua, extensions) {\n\n        if (typeof ua === OBJ_TYPE) {\n            extensions = ua;\n            ua = undefined;\n        }\n\n        if (!(this instanceof UAParser)) {\n            return new UAParser(ua, extensions).getResult();\n        }\n\n        var _ua = ua || ((typeof window !== UNDEF_TYPE && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);\n        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n\n        this.getBrowser = function () {\n            var _browser = {};\n            _browser[NAME] = undefined;\n            _browser[VERSION] = undefined;\n            rgxMapper.call(_browser, _ua, _rgxmap.browser);\n            _browser.major = majorize(_browser.version);\n            return _browser;\n        };\n        this.getCPU = function () {\n            var _cpu = {};\n            _cpu[ARCHITECTURE] = undefined;\n            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n            return _cpu;\n        };\n        this.getDevice = function () {\n            var _device = {};\n            _device[VENDOR] = undefined;\n            _device[MODEL] = undefined;\n            _device[TYPE] = undefined;\n            rgxMapper.call(_device, _ua, _rgxmap.device);\n            return _device;\n        };\n        this.getEngine = function () {\n            var _engine = {};\n            _engine[NAME] = undefined;\n            _engine[VERSION] = undefined;\n            rgxMapper.call(_engine, _ua, _rgxmap.engine);\n            return _engine;\n        };\n        this.getOS = function () {\n            var _os = {};\n            _os[NAME] = undefined;\n            _os[VERSION] = undefined;\n            rgxMapper.call(_os, _ua, _rgxmap.os);\n            return _os;\n        };\n        this.getResult = function () {\n            return {\n                ua      : this.getUA(),\n                browser : this.getBrowser(),\n                engine  : this.getEngine(),\n                os      : this.getOS(),\n                device  : this.getDevice(),\n                cpu     : this.getCPU()\n            };\n        };\n        this.getUA = function () {\n            return _ua;\n        };\n        this.setUA = function (ua) {\n            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;\n            return this;\n        };\n        this.setUA(_ua);\n        return this;\n    };\n\n    UAParser.VERSION = LIBVERSION;\n    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);\n    UAParser.CPU = enumerize([ARCHITECTURE]);\n    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\n    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n    ///////////\n    // Export\n    //////////\n\n    // check js environment\n    if (typeof(exports) !== UNDEF_TYPE) {\n        // nodejs env\n        if (\"object\" !== UNDEF_TYPE && module.exports) {\n            exports = module.exports = UAParser;\n        }\n        exports.UAParser = UAParser;\n    } else {\n        // requirejs env (optional)\n        if (\"function\" === FUNC_TYPE && __webpack_require__.amdO) {\n            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n                return UAParser;\n            }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        } else if (typeof window !== UNDEF_TYPE) {\n            // browser env\n            window.UAParser = UAParser;\n        }\n    }\n\n    // jQuery/Zepto specific (optional)\n    // Note:\n    //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n    //   and we should catch that.\n    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);\n    if ($ && !$.ua) {\n        var parser = new UAParser();\n        $.ua = parser.getResult();\n        $.ua.get = function () {\n            return parser.getUA();\n        };\n        $.ua.set = function (ua) {\n            parser.setUA(ua);\n            var result = parser.getResult();\n            for (var prop in result) {\n                $.ua[prop] = result[prop];\n            }\n        };\n    }\n\n})(typeof window === 'object' ? window : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNkNBQTZDO0FBQzdDOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxvQ0FBb0Msa0JBQWtCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbUJBQW1CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsSUFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzREFBc0QsZ0JBQWdCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QyxHQUFHO0FBQ2pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHNEQUFzRDtBQUN0RDs7QUFFQSxzQkFBc0I7QUFDdEI7O0FBRUEsK0JBQStCO0FBQy9COztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxJQUFJO0FBQ3RDOztBQUVBLDhDQUE4QztBQUM5Qzs7QUFFQSx1QkFBdUI7QUFDdkI7O0FBRUEsK0JBQStCLDBDQUEwQztBQUN6RTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrREFBa0QsSUFBSSxXQUFXLElBQUk7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0EseUJBQXlCO0FBQ3pCOztBQUVBO0FBQ0Esd0RBQXdELEVBQUU7QUFDMUQ7QUFDQSx3Q0FBd0M7QUFDeEMsNEJBQTRCLElBQUk7QUFDaEM7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2YsMEJBQTBCLEVBQUU7QUFDNUI7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixFQUFFLGlCQUFpQjtBQUMzQzs7QUFFQTtBQUNBLDBCQUEwQixFQUFFLFVBQVU7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUk7QUFDekM7QUFDQSxnQ0FBZ0MsSUFBSTtBQUNwQzs7QUFFQTtBQUNBLGdDQUFnQyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsYUFBYSxJQUFJO0FBQ3hFO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZELEVBQUUsV0FBVyxFQUFFO0FBQzVFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixlQUFlLElBQUk7QUFDekM7O0FBRUE7QUFDQSxnQ0FBZ0MsRUFBRSxXQUFXLEVBQUUseURBQXlELElBQUk7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQixFQUFFO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBLDBDQUEwQyxNQUFNO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsSUFBSSxJQUFJOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0Qix5QkFBeUIsR0FBRztBQUM1Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEMsZ0NBQWdDLEVBQUU7QUFDbEMsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLElBQUk7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixFQUFFO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixFQUFFO0FBQ3ZCO0FBQ0Esc0JBQXNCLEVBQUU7QUFDeEI7QUFDQSxzQkFBc0IsRUFBRTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6Qix5Q0FBeUMsRUFBRTtBQUMzQztBQUNBLHVCQUF1QixJQUFJO0FBQzNCO0FBQ0EsK0JBQStCLElBQUk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixFQUFFO0FBQzdCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0Esc0JBQXNCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFdBQVc7QUFDN0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsRUFBRTtBQUN4QjtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sSUFBSSxJQUFJO0FBQzVEO0FBQ0EscURBQXFEO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0Esc0JBQXNCLFFBQVEsSUFBSTtBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixJQUFJO0FBQzVCO0FBQ0Esd0JBQXdCLElBQUk7QUFDNUI7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSw4QkFBOEIsSUFBSSxFQUFFO0FBQ3BDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUIsSUFBSTtBQUM3QjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLElBQUksNkJBQTZCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0EsNERBQTRELFNBQVM7QUFDckU7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsWUFBWTs7QUFFakM7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLElBQUksbUNBQW1DLElBQUk7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQWE7QUFDekI7QUFDQTtBQUNBLFFBQVEsZ0JBQWdCO0FBQ3hCLE1BQU07QUFDTjtBQUNBLFlBQVksVUFBYyxrQkFBa0Isd0JBQVU7QUFDdEQsWUFBWSxtQ0FBTztBQUNuQjtBQUNBLGFBQWE7QUFBQSxrR0FBQztBQUNkLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnN0YW50LXRyYWNraW5nLy4vbm9kZV9tb2R1bGVzL3VhLXBhcnNlci1qcy9zcmMvdWEtcGFyc2VyLmpzPzJiODAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKiBVQVBhcnNlci5qcyB2MS4wLjMzXG4gICBDb3B5cmlnaHQgwqkgMjAxMi0yMDIxIEZhaXNhbCBTYWxtYW4gPGZAZmFpc2FsbWFuLmNvbT5cbiAgIE1JVCBMaWNlbnNlICovLypcbiAgIERldGVjdCBCcm93c2VyLCBFbmdpbmUsIE9TLCBDUFUsIGFuZCBEZXZpY2UgdHlwZS9tb2RlbCBmcm9tIFVzZXItQWdlbnQgZGF0YS5cbiAgIFN1cHBvcnRzIGJyb3dzZXIgJiBub2RlLmpzIGVudmlyb25tZW50LiBcbiAgIERlbW8gICA6IGh0dHBzOi8vZmFpc2FsbWFuLmdpdGh1Yi5pby91YS1wYXJzZXItanNcbiAgIFNvdXJjZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWlzYWxtYW4vdWEtcGFyc2VyLWpzICovXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuKGZ1bmN0aW9uICh3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDb25zdGFudHNcbiAgICAvLy8vLy8vLy8vLy8vXG5cblxuICAgIHZhciBMSUJWRVJTSU9OICA9ICcxLjAuMzMnLFxuICAgICAgICBFTVBUWSAgICAgICA9ICcnLFxuICAgICAgICBVTktOT1dOICAgICA9ICc/JyxcbiAgICAgICAgRlVOQ19UWVBFICAgPSAnZnVuY3Rpb24nLFxuICAgICAgICBVTkRFRl9UWVBFICA9ICd1bmRlZmluZWQnLFxuICAgICAgICBPQkpfVFlQRSAgICA9ICdvYmplY3QnLFxuICAgICAgICBTVFJfVFlQRSAgICA9ICdzdHJpbmcnLFxuICAgICAgICBNQUpPUiAgICAgICA9ICdtYWpvcicsXG4gICAgICAgIE1PREVMICAgICAgID0gJ21vZGVsJyxcbiAgICAgICAgTkFNRSAgICAgICAgPSAnbmFtZScsXG4gICAgICAgIFRZUEUgICAgICAgID0gJ3R5cGUnLFxuICAgICAgICBWRU5ET1IgICAgICA9ICd2ZW5kb3InLFxuICAgICAgICBWRVJTSU9OICAgICA9ICd2ZXJzaW9uJyxcbiAgICAgICAgQVJDSElURUNUVVJFPSAnYXJjaGl0ZWN0dXJlJyxcbiAgICAgICAgQ09OU09MRSAgICAgPSAnY29uc29sZScsXG4gICAgICAgIE1PQklMRSAgICAgID0gJ21vYmlsZScsXG4gICAgICAgIFRBQkxFVCAgICAgID0gJ3RhYmxldCcsXG4gICAgICAgIFNNQVJUVFYgICAgID0gJ3NtYXJ0dHYnLFxuICAgICAgICBXRUFSQUJMRSAgICA9ICd3ZWFyYWJsZScsXG4gICAgICAgIEVNQkVEREVEICAgID0gJ2VtYmVkZGVkJyxcbiAgICAgICAgVUFfTUFYX0xFTkdUSCA9IDM1MDtcblxuICAgIHZhciBBTUFaT04gID0gJ0FtYXpvbicsXG4gICAgICAgIEFQUExFICAgPSAnQXBwbGUnLFxuICAgICAgICBBU1VTICAgID0gJ0FTVVMnLFxuICAgICAgICBCTEFDS0JFUlJZID0gJ0JsYWNrQmVycnknLFxuICAgICAgICBCUk9XU0VSID0gJ0Jyb3dzZXInLFxuICAgICAgICBDSFJPTUUgID0gJ0Nocm9tZScsXG4gICAgICAgIEVER0UgICAgPSAnRWRnZScsXG4gICAgICAgIEZJUkVGT1ggPSAnRmlyZWZveCcsXG4gICAgICAgIEdPT0dMRSAgPSAnR29vZ2xlJyxcbiAgICAgICAgSFVBV0VJICA9ICdIdWF3ZWknLFxuICAgICAgICBMRyAgICAgID0gJ0xHJyxcbiAgICAgICAgTUlDUk9TT0ZUID0gJ01pY3Jvc29mdCcsXG4gICAgICAgIE1PVE9ST0xBICA9ICdNb3Rvcm9sYScsXG4gICAgICAgIE9QRVJBICAgPSAnT3BlcmEnLFxuICAgICAgICBTQU1TVU5HID0gJ1NhbXN1bmcnLFxuICAgICAgICBTSEFSUCAgID0gJ1NoYXJwJyxcbiAgICAgICAgU09OWSAgICA9ICdTb255JyxcbiAgICAgICAgWElBT01JICA9ICdYaWFvbWknLFxuICAgICAgICBaRUJSQSAgID0gJ1plYnJhJyxcbiAgICAgICAgRkFDRUJPT0sgICA9ICdGYWNlYm9vayc7XG5cbiAgICAvLy8vLy8vLy8vL1xuICAgIC8vIEhlbHBlclxuICAgIC8vLy8vLy8vLy9cblxuICAgIHZhciBleHRlbmQgPSBmdW5jdGlvbiAocmVnZXhlcywgZXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgdmFyIG1lcmdlZFJlZ2V4ZXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVnZXhlcykge1xuICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zW2ldICYmIGV4dGVuc2lvbnNbaV0ubGVuZ3RoICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZWRSZWdleGVzW2ldID0gZXh0ZW5zaW9uc1tpXS5jb25jYXQocmVnZXhlc1tpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUmVnZXhlc1tpXSA9IHJlZ2V4ZXNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZFJlZ2V4ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcml6ZSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgICAgIHZhciBlbnVtcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGVudW1zW2FycltpXS50b1VwcGVyQ2FzZSgpXSA9IGFycltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbnVtcztcbiAgICAgICAgfSxcbiAgICAgICAgaGFzID0gZnVuY3Rpb24gKHN0cjEsIHN0cjIpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygc3RyMSA9PT0gU1RSX1RZUEUgPyBsb3dlcml6ZShzdHIyKS5pbmRleE9mKGxvd2VyaXplKHN0cjEpKSAhPT0gLTEgOiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgbG93ZXJpemUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1ham9yaXplID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YodmVyc2lvbikgPT09IFNUUl9UWVBFID8gdmVyc2lvbi5yZXBsYWNlKC9bXlxcZFxcLl0vZywgRU1QVFkpLnNwbGl0KCcuJylbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHRyaW0gPSBmdW5jdGlvbiAoc3RyLCBsZW4pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Yoc3RyKSA9PT0gU1RSX1RZUEUpIHtcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXlxcc1xccyovLCBFTVBUWSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZihsZW4pID09PSBVTkRFRl9UWVBFID8gc3RyIDogc3RyLnN1YnN0cmluZygwLCBVQV9NQVhfTEVOR1RIKTtcbiAgICAgICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gTWFwIGhlbHBlclxuICAgIC8vLy8vLy8vLy8vLy8vXG5cbiAgICB2YXIgcmd4TWFwcGVyID0gZnVuY3Rpb24gKHVhLCBhcnJheXMpIHtcblxuICAgICAgICAgICAgdmFyIGkgPSAwLCBqLCBrLCBwLCBxLCBtYXRjaGVzLCBtYXRjaDtcblxuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGFsbCByZWdleGVzIG1hcHNcbiAgICAgICAgICAgIHdoaWxlIChpIDwgYXJyYXlzLmxlbmd0aCAmJiAhbWF0Y2hlcykge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4ID0gYXJyYXlzW2ldLCAgICAgICAvLyBldmVuIHNlcXVlbmNlICgwLDIsNCwuLilcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSBhcnJheXNbaSArIDFdOyAgIC8vIG9kZCBzZXF1ZW5jZSAoMSwzLDUsLi4pXG4gICAgICAgICAgICAgICAgaiA9IGsgPSAwO1xuXG4gICAgICAgICAgICAgICAgLy8gdHJ5IG1hdGNoaW5nIHVhc3RyaW5nIHdpdGggcmVnZXhlc1xuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgcmVnZXgubGVuZ3RoICYmICFtYXRjaGVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IHJlZ2V4W2orK10uZXhlYyh1YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhbWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IHByb3BzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaGVzWysra107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IHByb3BzW3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGdpdmVuIHByb3BlcnR5IGlzIGFjdHVhbGx5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBxID09PSBPQkpfVFlQRSAmJiBxLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHFbMV0gPT0gRlVOQ19UWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNzaWduIG1vZGlmaWVkIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IHFbMV0uY2FsbCh0aGlzLCBtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBnaXZlbiB2YWx1ZSwgaWdub3JlIHJlZ2V4IG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IHFbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocS5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHdoZXRoZXIgZnVuY3Rpb24gb3IgcmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcVsxXSA9PT0gRlVOQ19UWVBFICYmICEocVsxXS5leGVjICYmIHFbMV0udGVzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGZ1bmN0aW9uICh1c3VhbGx5IHN0cmluZyBtYXBwZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IG1hdGNoID8gcVsxXS5jYWxsKHRoaXMsIG1hdGNoLCBxWzJdKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2FuaXRpemUgbWF0Y2ggdXNpbmcgZ2l2ZW4gcmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gbWF0Y2ggPyBtYXRjaC5yZXBsYWNlKHFbMV0sIHFbMl0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHEubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IG1hdGNoID8gcVszXS5jYWxsKHRoaXMsIG1hdGNoLnJlcGxhY2UocVsxXSwgcVsyXSkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txXSA9IG1hdGNoID8gbWF0Y2ggOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzdHJNYXBwZXIgPSBmdW5jdGlvbiAoc3RyLCBtYXApIHtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBjdXJyZW50IHZhbHVlIGlzIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXBbaV0gPT09IE9CSl9UWVBFICYmIG1hcFtpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFwW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzKG1hcFtpXVtqXSwgc3RyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoaSA9PT0gVU5LTk9XTikgPyB1bmRlZmluZWQgOiBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXMobWFwW2ldLCBzdHIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaSA9PT0gVU5LTk9XTikgPyB1bmRlZmluZWQgOiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgfTtcblxuICAgIC8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN0cmluZyBtYXBcbiAgICAvLy8vLy8vLy8vLy8vL1xuXG4gICAgLy8gU2FmYXJpIDwgMy4wXG4gICAgdmFyIG9sZFNhZmFyaU1hcCA9IHtcbiAgICAgICAgICAgICcxLjAnICAgOiAnLzgnLFxuICAgICAgICAgICAgJzEuMicgICA6ICcvMScsXG4gICAgICAgICAgICAnMS4zJyAgIDogJy8zJyxcbiAgICAgICAgICAgICcyLjAnICAgOiAnLzQxMicsXG4gICAgICAgICAgICAnMi4wLjInIDogJy80MTYnLFxuICAgICAgICAgICAgJzIuMC4zJyA6ICcvNDE3JyxcbiAgICAgICAgICAgICcyLjAuNCcgOiAnLzQxOScsXG4gICAgICAgICAgICAnPycgICAgIDogJy8nXG4gICAgICAgIH0sXG4gICAgICAgIHdpbmRvd3NWZXJzaW9uTWFwID0ge1xuICAgICAgICAgICAgJ01FJyAgICAgICAgOiAnNC45MCcsXG4gICAgICAgICAgICAnTlQgMy4xMScgICA6ICdOVDMuNTEnLFxuICAgICAgICAgICAgJ05UIDQuMCcgICAgOiAnTlQ0LjAnLFxuICAgICAgICAgICAgJzIwMDAnICAgICAgOiAnTlQgNS4wJyxcbiAgICAgICAgICAgICdYUCcgICAgICAgIDogWydOVCA1LjEnLCAnTlQgNS4yJ10sXG4gICAgICAgICAgICAnVmlzdGEnICAgICA6ICdOVCA2LjAnLFxuICAgICAgICAgICAgJzcnICAgICAgICAgOiAnTlQgNi4xJyxcbiAgICAgICAgICAgICc4JyAgICAgICAgIDogJ05UIDYuMicsXG4gICAgICAgICAgICAnOC4xJyAgICAgICA6ICdOVCA2LjMnLFxuICAgICAgICAgICAgJzEwJyAgICAgICAgOiBbJ05UIDYuNCcsICdOVCAxMC4wJ10sXG4gICAgICAgICAgICAnUlQnICAgICAgICA6ICdBUk0nXG4gICAgfTtcblxuICAgIC8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUmVnZXggbWFwXG4gICAgLy8vLy8vLy8vLy8vL1xuXG4gICAgdmFyIHJlZ2V4ZXMgPSB7XG5cbiAgICAgICAgYnJvd3NlciA6IFtbXG5cbiAgICAgICAgICAgIC9cXGIoPzpjcm1vfGNyaW9zKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZSBmb3IgQW5kcm9pZC9pT1NcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0Nocm9tZSddXSwgW1xuICAgICAgICAgICAgL2VkZyg/OmV8aW9zfGEpP1xcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaWNyb3NvZnQgRWRnZVxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnRWRnZSddXSwgW1xuXG4gICAgICAgICAgICAvLyBQcmVzdG8gYmFzZWRcbiAgICAgICAgICAgIC8ob3BlcmEgbWluaSlcXC8oWy1cXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgTWluaVxuICAgICAgICAgICAgLyhvcGVyYSBbbW9iaWxldGFiXXszLDZ9KVxcYi4rdmVyc2lvblxcLyhbLVxcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgLy8gT3BlcmEgTW9iaS9UYWJsZXRcbiAgICAgICAgICAgIC8ob3BlcmEpKD86Lit2ZXJzaW9uXFwvfFtcXC8gXSspKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC9vcGlvc1tcXC8gXSsoW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgbWluaSBvbiBpcGhvbmUgPj0gOC4wXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsIE9QRVJBKycgTWluaSddXSwgW1xuICAgICAgICAgICAgL1xcYm9wclxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgV2Via2l0XG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsIE9QRVJBXV0sIFtcblxuICAgICAgICAgICAgLy8gTWl4ZWRcbiAgICAgICAgICAgIC8oa2luZGxlKVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2luZGxlXG4gICAgICAgICAgICAvKGx1bmFzY2FwZXxtYXh0aG9ufG5ldGZyb250fGphc21pbmV8YmxhemVyKVtcXC8gXT8oW1xcd1xcLl0qKS9pLCAgICAgIC8vIEx1bmFzY2FwZS9NYXh0aG9uL05ldGZyb250L0phc21pbmUvQmxhemVyXG4gICAgICAgICAgICAvLyBUcmlkZW50IGJhc2VkXG4gICAgICAgICAgICAvKGF2YW50IHxpZW1vYmlsZXxzbGltKSg/OmJyb3dzZXIpP1tcXC8gXT8oW1xcd1xcLl0qKS9pLCAgICAgICAgICAgICAgIC8vIEF2YW50L0lFTW9iaWxlL1NsaW1Ccm93c2VyXG4gICAgICAgICAgICAvKGJhP2lkdWJyb3dzZXIpW1xcLyBdPyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhaWR1IEJyb3dzZXJcbiAgICAgICAgICAgIC8oPzptc3xcXCgpKGllKSAoW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXJcblxuICAgICAgICAgICAgLy8gV2Via2l0L0tIVE1MIGJhc2VkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGbG9jay9Sb2NrTWVsdC9NaWRvcmkvRXBpcGhhbnkvU2lsay9Ta3lmaXJlL0JvbHQvSXJvbi9JcmlkaXVtL1BoYW50b21KUy9Cb3dzZXIvUXVwWmlsbGEvRmFsa29uXG4gICAgICAgICAgICAvKGZsb2NrfHJvY2ttZWx0fG1pZG9yaXxlcGlwaGFueXxzaWxrfHNreWZpcmV8b3ZpYnJvd3Nlcnxib2x0fGlyb258dml2YWxkaXxpcmlkaXVtfHBoYW50b21qc3xib3dzZXJ8cXVhcmt8cXVwemlsbGF8ZmFsa29ufHJla29ucXxwdWZmaW58YnJhdmV8d2hhbGV8cXFicm93c2VybGl0ZXxxcXxkdWNrZHVja2dvKVxcLyhbLVxcd1xcLl0rKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWtvbnEvUHVmZmluL0JyYXZlL1doYWxlL1FRQnJvd3NlckxpdGUvUVEsIGFrYSBTaG91UVxuICAgICAgICAgICAgLyh3ZWlibylfXyhbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlaWJvXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8oPzpcXGJ1Yz8gP2Jyb3dzZXJ8KD86anVjLispdWN3ZWIpW1xcLyBdPyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgIC8vIFVDQnJvd3NlclxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnVUMnK0JST1dTRVJdXSwgW1xuICAgICAgICAgICAgL21pY3JvbS4rXFxicWJjb3JlXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2VDaGF0IERlc2t0b3AgZm9yIFdpbmRvd3MgQnVpbHQtaW4gQnJvd3NlclxuICAgICAgICAgICAgL1xcYnFiY29yZVxcLyhbXFx3XFwuXSspLittaWNyb20vaVxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnV2VDaGF0KFdpbikgRGVza3RvcCddXSwgW1xuICAgICAgICAgICAgL21pY3JvbWVzc2VuZ2VyXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZUNoYXRcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ1dlQ2hhdCddXSwgW1xuICAgICAgICAgICAgL2tvbnF1ZXJvclxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLb25xdWVyb3JcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0tvbnF1ZXJvciddXSwgW1xuICAgICAgICAgICAgL3RyaWRlbnQuK3J2WzogXShbXFx3XFwuXXsxLDl9KVxcYi4rbGlrZSBnZWNrby9pICAgICAgICAgICAgICAgICAgICAgICAvLyBJRTExXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdJRSddXSwgW1xuICAgICAgICAgICAgL3lhYnJvd3NlclxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBZYW5kZXhcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ1lhbmRleCddXSwgW1xuICAgICAgICAgICAgLyhhdmFzdHxhdmcpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdmFzdC9BVkcgU2VjdXJlIEJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgLyguKykvLCAnJDEgU2VjdXJlICcrQlJPV1NFUl0sIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvXFxiZm9jdXNcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IEZvY3VzXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsIEZJUkVGT1grJyBGb2N1cyddXSwgW1xuICAgICAgICAgICAgL1xcYm9wdFxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgVG91Y2hcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgT1BFUkErJyBUb3VjaCddXSwgW1xuICAgICAgICAgICAgL2NvY19jb2NcXHcrXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29jIENvYyBCcm93c2VyXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdDb2MgQ29jJ11dLCBbXG4gICAgICAgICAgICAvZG9sZmluXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbHBoaW5cbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0RvbHBoaW4nXV0sIFtcbiAgICAgICAgICAgIC9jb2FzdFxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgQ29hc3RcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgT1BFUkErJyBDb2FzdCddXSwgW1xuICAgICAgICAgICAgL21pdWlicm93c2VyXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNSVVJIEJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ01JVUkgJytCUk9XU0VSXV0sIFtcbiAgICAgICAgICAgIC9meGlvc1xcLyhbLVxcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCBmb3IgaU9TXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsIEZJUkVGT1hdXSwgW1xuICAgICAgICAgICAgL1xcYnFpaHV8KHFpP2hvP28/fDM2MClicm93c2VyL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMzYwXG4gICAgICAgICAgICBdLCBbW05BTUUsICczNjAgJytCUk9XU0VSXV0sIFtcbiAgICAgICAgICAgIC8ob2N1bHVzfHNhbXN1bmd8c2FpbGZpc2h8aHVhd2VpKWJyb3dzZXJcXC8oW1xcd1xcLl0rKS9pXG4gICAgICAgICAgICBdLCBbW05BTUUsIC8oLispLywgJyQxICcrQlJPV1NFUl0sIFZFUlNJT05dLCBbICAgICAgICAgICAgICAgICAgICAgIC8vIE9jdWx1cy9TYW1zdW5nL1NhaWxmaXNoL0h1YXdlaSBCcm93c2VyXG4gICAgICAgICAgICAvKGNvbW9kb19kcmFnb24pXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW9kbyBEcmFnb25cbiAgICAgICAgICAgIF0sIFtbTkFNRSwgL18vZywgJyAnXSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8oZWxlY3Ryb24pXFwvKFtcXHdcXC5dKykgc2FmYXJpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRWxlY3Ryb24tYmFzZWQgQXBwXG4gICAgICAgICAgICAvKHRlc2xhKSg/OiBxdGNhcmJyb3dzZXJ8XFwvKDIwXFxkXFxkXFwuWy1cXHdcXC5dKykpL2ksICAgICAgICAgICAgICAgICAgIC8vIFRlc2xhXG4gICAgICAgICAgICAvbT8ocXFicm93c2VyfGJhaWR1Ym94YXBwfDIzNDVFeHBsb3JlcilbXFwvIF0/KFtcXHdcXC5dKykvaSAgICAgICAgICAgIC8vIFFRQnJvd3Nlci9CYWlkdSBBcHAvMjM0NSBCcm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8obWV0YXNyKVtcXC8gXT8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU291R291QnJvd3NlclxuICAgICAgICAgICAgLyhsYmJyb3dzZXIpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaWVCYW8gQnJvd3NlclxuICAgICAgICAgICAgL1xcWyhsaW5rZWRpbilhcHBcXF0vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpbmtlZEluIEFwcCBmb3IgaU9TICYgQW5kcm9pZFxuICAgICAgICAgICAgXSwgW05BTUVdLCBbXG5cbiAgICAgICAgICAgIC8vIFdlYlZpZXdcbiAgICAgICAgICAgIC8oKD86ZmJhblxcL2ZiaW9zfGZiX2lhYlxcL2ZiNGEpKD8hLitmYmF2KXw7ZmJhdlxcLyhbXFx3XFwuXSspOykvaSAgICAgICAvLyBGYWNlYm9vayBBcHAgZm9yIGlPUyAmIEFuZHJvaWRcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgRkFDRUJPT0tdLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgL3NhZmFyaSAobGluZSlcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaW5lIEFwcCBmb3IgaU9TXG4gICAgICAgICAgICAvXFxiKGxpbmUpXFwvKFtcXHdcXC5dKylcXC9pYWIvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGluZSBBcHAgZm9yIEFuZHJvaWRcbiAgICAgICAgICAgIC8oY2hyb21pdW18aW5zdGFncmFtKVtcXC8gXShbLVxcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21pdW0vSW5zdGFncmFtXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC9cXGJnc2FcXC8oW1xcd1xcLl0rKSAuKnNhZmFyaVxcLy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgU2VhcmNoIEFwcGxpYW5jZSBvbiBpT1NcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0dTQSddXSwgW1xuXG4gICAgICAgICAgICAvaGVhZGxlc3NjaHJvbWUoPzpcXC8oW1xcd1xcLl0rKXwgKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZSBIZWFkbGVzc1xuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCBDSFJPTUUrJyBIZWFkbGVzcyddXSwgW1xuXG4gICAgICAgICAgICAvIHd2XFwpLisoY2hyb21lKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUgV2ViVmlld1xuICAgICAgICAgICAgXSwgW1tOQU1FLCBDSFJPTUUrJyBXZWJWaWV3J10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9kcm9pZC4rIHZlcnNpb25cXC8oW1xcd1xcLl0rKVxcYi4rKD86bW9iaWxlIHNhZmFyaXxzYWZhcmkpL2kgICAgICAgICAgIC8vIEFuZHJvaWQgQnJvd3NlclxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnQW5kcm9pZCAnK0JST1dTRVJdXSwgW1xuXG4gICAgICAgICAgICAvKGNocm9tZXxvbW5pd2VifGFyb3JhfFt0aXplbm9rYV17NX0gP2Jyb3dzZXIpXFwvdj8oW1xcd1xcLl0rKS9pICAgICAgIC8vIENocm9tZS9PbW5pV2ViL0Fyb3JhL1RpemVuL05va2lhXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL3ZlcnNpb25cXC8oW1xcd1xcLlxcLF0rKSAuKm1vYmlsZVxcL1xcdysgKHNhZmFyaSkvaSAgICAgICAgICAgICAgICAgICAgICAvLyBNb2JpbGUgU2FmYXJpXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdNb2JpbGUgU2FmYXJpJ11dLCBbXG4gICAgICAgICAgICAvdmVyc2lvblxcLyhbXFx3KFxcLnxcXCwpXSspIC4qKG1vYmlsZSA/c2FmYXJpfHNhZmFyaSkvaSAgICAgICAgICAgICAgICAvLyBTYWZhcmkgJiBTYWZhcmkgTW9iaWxlXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgTkFNRV0sIFtcbiAgICAgICAgICAgIC93ZWJraXQuKz8obW9iaWxlID9zYWZhcml8c2FmYXJpKShcXC9bXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDwgMy4wXG4gICAgICAgICAgICBdLCBbTkFNRSwgW1ZFUlNJT04sIHN0ck1hcHBlciwgb2xkU2FmYXJpTWFwXV0sIFtcblxuICAgICAgICAgICAgLyh3ZWJraXR8a2h0bWwpXFwvKFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8vIEdlY2tvIGJhc2VkXG4gICAgICAgICAgICAvKG5hdmlnYXRvcnxuZXRzY2FwZVxcZD8pXFwvKFstXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXRzY2FwZVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnTmV0c2NhcGUnXSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC9tb2JpbGUgdnI7IHJ2OihbXFx3XFwuXSspXFwpLitmaXJlZm94L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCBSZWFsaXR5XG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsIEZJUkVGT1grJyBSZWFsaXR5J11dLCBbXG4gICAgICAgICAgICAvZWtpb2hmLisoZmxvdylcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZsb3dcbiAgICAgICAgICAgIC8oc3dpZnRmb3gpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dpZnRmb3hcbiAgICAgICAgICAgIC8oaWNlZHJhZ29ufGljZXdlYXNlbHxjYW1pbm98Y2hpbWVyYXxmZW5uZWN8bWFlbW8gYnJvd3NlcnxtaW5pbW98Y29ua2Vyb3J8a2xhcilbXFwvIF0/KFtcXHdcXC5cXCtdKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWNlRHJhZ29uL0ljZXdlYXNlbC9DYW1pbm8vQ2hpbWVyYS9GZW5uZWMvTWFlbW8vTWluaW1vL0Nvbmtlcm9yL0tsYXJcbiAgICAgICAgICAgIC8oc2VhbW9ua2V5fGstbWVsZW9ufGljZWNhdHxpY2VhcGV8ZmlyZWJpcmR8cGhvZW5peHxwYWxlbW9vbnxiYXNpbGlza3x3YXRlcmZveClcXC8oWy1cXHdcXC5dKykkL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3gvU2VhTW9ua2V5L0stTWVsZW9uL0ljZUNhdC9JY2VBcGUvRmlyZWJpcmQvUGhvZW5peFxuICAgICAgICAgICAgLyhmaXJlZm94KVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlciBGaXJlZm94LWJhc2VkXG4gICAgICAgICAgICAvKG1vemlsbGEpXFwvKFtcXHdcXC5dKykgLitydlxcOi4rZ2Vja29cXC9cXGQrL2ksICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vemlsbGFcblxuICAgICAgICAgICAgLy8gT3RoZXJcbiAgICAgICAgICAgIC8ocG9sYXJpc3xseW54fGRpbGxvfGljYWJ8ZG9yaXN8YW1heWF8dzNtfG5ldHN1cmZ8c2xlaXBuaXJ8b2JpZ298bW9zYWljfCg/OmdvfGljZXx1cClbXFwuIF0/YnJvd3NlcilbLVxcLyBdP3Y/KFtcXHdcXC5dKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9sYXJpcy9MeW54L0RpbGxvL2lDYWIvRG9yaXMvQW1heWEvdzNtL05ldFN1cmYvU2xlaXBuaXIvT2JpZ28vTW9zYWljL0dvL0lDRS9VUC5Ccm93c2VyXG4gICAgICAgICAgICAvKGxpbmtzKSBcXCgoW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpbmtzXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLyhjb2JhbHQpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb2JhbHRcbiAgICAgICAgICAgIF0sIFtOQU1FLCBbVkVSU0lPTiwgL21hc3Rlci58bHRzLi8sIFwiXCJdXVxuICAgICAgICBdLFxuXG4gICAgICAgIGNwdSA6IFtbXG5cbiAgICAgICAgICAgIC8oPzooYW1kfHgoPzooPzo4Nnw2NClbLV9dKT98d293fHdpbik2NClbO1xcKV0vaSAgICAgICAgICAgICAgICAgICAgIC8vIEFNRDY0ICh4NjQpXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgJ2FtZDY0J11dLCBbXG5cbiAgICAgICAgICAgIC8oaWEzMig/PTspKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUEzMiAocXVpY2t0aW1lKVxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsIGxvd2VyaXplXV0sIFtcblxuICAgICAgICAgICAgLygoPzppWzM0Nl18eCk4NilbO1xcKV0vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUEzMiAoeDg2KVxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdpYTMyJ11dLCBbXG5cbiAgICAgICAgICAgIC9cXGIoYWFyY2g2NHxhcm0odj84ZT9sP3xfPzY0KSlcXGIvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFSTTY0XG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgJ2FybTY0J11dLCBbXG5cbiAgICAgICAgICAgIC9cXGIoYXJtKD86dls2N10pP2h0P24/W2ZsXXA/KVxcYi9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBUk1IRlxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdhcm1oZiddXSwgW1xuXG4gICAgICAgICAgICAvLyBQb2NrZXRQQyBtaXN0YWtlbmx5IGlkZW50aWZpZWQgYXMgUG93ZXJQQ1xuICAgICAgICAgICAgL3dpbmRvd3MgKGNlfG1vYmlsZSk7IHBwYzsvaVxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdhcm0nXV0sIFtcblxuICAgICAgICAgICAgLygoPzpwcGN8cG93ZXJwYykoPzo2NCk/KSg/OiBtYWN8O3xcXCkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG93ZXJQQ1xuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsIC9vd2VyLywgRU1QVFksIGxvd2VyaXplXV0sIFtcblxuICAgICAgICAgICAgLyhzdW40XFx3KVs7XFwpXS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNQQVJDXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgJ3NwYXJjJ11dLCBbXG5cbiAgICAgICAgICAgIC8oKD86YXZyMzJ8aWE2NCg/PTspKXw2OGsoPz1cXCkpfFxcYmFybSg/PXYoPzpbMS03XXxbNS03XTEpbD98O3xlYWJpKXwoPz1hdG1lbCApYXZyfCg/OmlyaXh8bWlwc3xzcGFyYykoPzo2NCk/XFxifHBhLXJpc2MpL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUE2NCwgNjhLLCBBUk0vNjQsIEFWUi8zMiwgSVJJWC82NCwgTUlQUy82NCwgU1BBUkMvNjQsIFBBLVJJU0NcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCBsb3dlcml6ZV1dXG4gICAgICAgIF0sXG5cbiAgICAgICAgZGV2aWNlIDogW1tcblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIE1PQklMRVMgJiBUQUJMRVRTXG4gICAgICAgICAgICAvLyBPcmRlcmVkIGJ5IHBvcHVsYXJpdHlcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgLy8gU2Ftc3VuZ1xuICAgICAgICAgICAgL1xcYihzY2gtaVs4OV0wXFxkfHNody1tMzgwc3xzbS1bcHR4XVxcd3syLDR9fGd0LVtwbl1cXGR7Miw0fXxzZ2gtdDhbNTZdOXxuZXh1cyAxMCkvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBTQU1TVU5HXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKCg/OnNbY2dwXWh8Z3R8c20pLVxcdyt8Z2FsYXh5IG5leHVzKS9pLFxuICAgICAgICAgICAgL3NhbXN1bmdbLSBdKFstXFx3XSspL2ksXG4gICAgICAgICAgICAvc2VjLShzZ2hcXHcrKS9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIFNBTVNVTkddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8gQXBwbGVcbiAgICAgICAgICAgIC9cXCgoaXAoPzpob25lfG9kKVtcXHcgXSopOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpUG9kL2lQaG9uZVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBBUFBMRV0sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL1xcKChpcGFkKTtbLVxcd1xcKSw7IF0rYXBwbGUvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpUGFkXG4gICAgICAgICAgICAvYXBwbGVjb3JlbWVkaWFcXC9bXFx3XFwuXSsgXFwoKGlwYWQpL2ksXG4gICAgICAgICAgICAvXFxiKGlwYWQpXFxkXFxkPyxcXGRcXGQ/WztcXF1dLitpb3MvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBBUFBMRV0sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhtYWNpbnRvc2gpOy9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIEFQUExFXV0sIFtcblxuICAgICAgICAgICAgLy8gSHVhd2VpXG4gICAgICAgICAgICAvXFxiKCg/OmFnW3JzXVsyM10/fGJhaDI/fHNodD98YnR2KS1hP1tsd11cXGR7Mn0pXFxiKD8hLitkXFwvcykvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBIVUFXRUldLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oPzpodWF3ZWl8aG9ub3IpKFstXFx3IF0rKVs7XFwpXS9pLFxuICAgICAgICAgICAgL1xcYihuZXh1cyA2cHxcXHd7Miw0fWU/LVthdHVdP1tsbl1bXFxkeF1bMDEyMzU5Y11bYWRuXT8pXFxiKD8hLitkXFwvcykvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBIVUFXRUldLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8gWGlhb21pXG4gICAgICAgICAgICAvXFxiKHBvY29bXFx3IF0rKSg/OiBidWl8XFwpKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFhpYW9taSBQT0NPXG4gICAgICAgICAgICAvXFxiOyAoXFx3KykgYnVpbGRcXC9obVxcMS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYaWFvbWkgSG9uZ21pICdudW1lcmljJyBtb2RlbHNcbiAgICAgICAgICAgIC9cXGIoaG1bLV8gXT9ub3RlP1tfIF0/KD86XFxkXFx3KT8pIGJ1aS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWGlhb21pIEhvbmdtaVxuICAgICAgICAgICAgL1xcYihyZWRtaVtcXC1fIF0/KD86bm90ZXxrKT9bXFx3XyBdKykoPzogYnVpfFxcKSkvaSwgICAgICAgICAgICAgICAgICAgLy8gWGlhb21pIFJlZG1pXG4gICAgICAgICAgICAvXFxiKG1pWy1fIF0/KD86YVxcZHxvbmV8b25lW18gXXBsdXN8bm90ZSBsdGV8bWF4fGNjKT9bXyBdPyg/OlxcZD9cXHc/KVtfIF0/KD86cGx1c3xzZXxsaXRlKT8pKD86IGJ1aXxcXCkpL2kgLy8gWGlhb21pIE1pXG4gICAgICAgICAgICBdLCBbW01PREVMLCAvXy9nLCAnICddLCBbVkVORE9SLCBYSUFPTUldLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9cXGIobWlbLV8gXT8oPzpwYWQpKD86W1xcd18gXSspKSg/OiBidWl8XFwpKS9pICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWkgUGFkIHRhYmxldHNcbiAgICAgICAgICAgIF0sW1tNT0RFTCwgL18vZywgJyAnXSwgW1ZFTkRPUiwgWElBT01JXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8vIE9QUE9cbiAgICAgICAgICAgIC87IChcXHcrKSBidWkuKyBvcHBvL2ksXG4gICAgICAgICAgICAvXFxiKGNwaFsxMl1cXGR7M318cCg/OmFmfGNbYWxdfGRcXHd8ZVthcl0pW210XVxcZDB8eDkwMDd8YTEwMW9wKVxcYi9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdPUFBPJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvLyBWaXZvXG4gICAgICAgICAgICAvdml2byAoXFx3KykoPzogYnVpfFxcKSkvaSxcbiAgICAgICAgICAgIC9cXGIodlsxMl1cXGR7M31cXHc/W2F0XSkoPzogYnVpfDspL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1Zpdm8nXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8vIFJlYWxtZVxuICAgICAgICAgICAgL1xcYihybXhbMTJdXFxkezN9KSg/OiBidWl8O3xcXCkpL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1JlYWxtZSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8gTW90b3JvbGFcbiAgICAgICAgICAgIC9cXGIobWlsZXN0b25lfGRyb2lkKD86WzItNHhdfCAoPzpiaW9uaWN8eDJ8cHJvfHJhenIpKT86PyggNGcpPylcXGJbXFx3IF0rYnVpbGRcXC8vaSxcbiAgICAgICAgICAgIC9cXGJtb3QoPzpvcm9sYSk/Wy0gXShcXHcqKS9pLFxuICAgICAgICAgICAgLygoPzptb3RvW1xcd1xcKFxcKSBdK3x4dFxcZHszLDR9fG5leHVzIDYpKD89IGJ1aXxcXCkpKS9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIE1PVE9ST0xBXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvXFxiKG16NjBcXGR8eG9vbVsyIF17MCwyfSkgYnVpbGRcXC8vaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBNT1RPUk9MQV0sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvLyBMR1xuICAgICAgICAgICAgLygoPz1sZyk/W3ZsXWtcXC0/XFxkezN9KSBidWl8IDNcXC5bLVxcdzsgXXsxMH1sZz8tKFswNmN2OV17Myw0fSkvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBMR10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhsbSg/Oi0/ZjEwMFtudl0/fC1bXFx3XFwuXSspKD89IGJ1aXxcXCkpfG5leHVzIFs0NV0pL2ksXG4gICAgICAgICAgICAvXFxibGdbLWU7XFwvIF0rKCg/IWJyb3dzZXJ8bmV0Y2FzdHxhbmRyb2lkIHR2KVxcdyspL2ksXG4gICAgICAgICAgICAvXFxibGctPyhbXFxkXFx3XSspIGJ1aS9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIExHXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8vIExlbm92b1xuICAgICAgICAgICAgLyhpZGVhdGFiWy1cXHcgXSspL2ksXG4gICAgICAgICAgICAvbGVub3ZvID8oc1s1Nl0wMDBbLVxcd10rfHRhYig/OltcXHcgXSspfHl0Wy1cXGRcXHddezZ9fHRiWy1cXGRcXHddezZ9KS9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdMZW5vdm8nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8vIE5va2lhXG4gICAgICAgICAgICAvKD86bWFlbW98bm9raWEpLioobjkwMHxsdW1pYSBcXGQrKS9pLFxuICAgICAgICAgICAgL25va2lhWy1fIF0/KFstXFx3XFwuXSopL2lcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC9fL2csICcgJ10sIFtWRU5ET1IsICdOb2tpYSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8gR29vZ2xlXG4gICAgICAgICAgICAvKHBpeGVsIGMpXFxiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgUGl4ZWwgQ1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBHT09HTEVdLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9kcm9pZC4rOyAocGl4ZWxbXFxkYXhsIF17MCw2fSkoPzogYnVpfFxcKSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgUGl4ZWxcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgR09PR0xFXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8vIFNvbnlcbiAgICAgICAgICAgIC9kcm9pZC4rIChhP1xcZFswLTJdezJ9c298W2MtZ11cXGR7NH18c29bLWdsXVxcdyt8eHEtYVxcd1s0LTddWzEyXSkoPz0gYnVpfFxcKS4rY2hyb21lXFwvKD8hWzEtNl17MCwxfVxcZFxcLikpL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgU09OWV0sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL3NvbnkgdGFibGV0IFtwc10vaSxcbiAgICAgICAgICAgIC9cXGIoPzpzb255KT9zZ3BcXHcrKD86IGJ1aXxcXCkpL2lcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdYcGVyaWEgVGFibGV0J10sIFtWRU5ET1IsIFNPTlldLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLy8gT25lUGx1c1xuICAgICAgICAgICAgLyAoa2IyMDA1fGluMjBbMTJdNXxiZTIwWzEyXVs1OV0pXFxiL2ksXG4gICAgICAgICAgICAvKD86b25lKT8oPzpwbHVzKT8gKGFcXGQwXFxkXFxkKSg/OiBifFxcKSkvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnT25lUGx1cyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8gQW1hem9uXG4gICAgICAgICAgICAvKGFsZXhhKXdlYm0vaSxcbiAgICAgICAgICAgIC8oa2ZbYS16XXsyfXdpKSggYnVpfFxcKSkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtpbmRsZSBGaXJlIHdpdGhvdXQgU2lsa1xuICAgICAgICAgICAgLyhrZlthLXpdKykoIGJ1aXxcXCkpLitzaWxrXFwvL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtpbmRsZSBGaXJlIEhEXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIEFNQVpPTl0sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLygoPzpzZHxrZilbMDM0OWhpam9yc3R1d10rKSggYnVpfFxcKSkuK3NpbGtcXC8vaSAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmUgUGhvbmVcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC8oLispL2csICdGaXJlIFBob25lICQxJ10sIFtWRU5ET1IsIEFNQVpPTl0sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvLyBCbGFja0JlcnJ5XG4gICAgICAgICAgICAvKHBsYXlib29rKTtbLVxcd1xcKSw7IF0rKHJpbSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxhY2tCZXJyeSBQbGF5Qm9va1xuICAgICAgICAgICAgXSwgW01PREVMLCBWRU5ET1IsIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL1xcYigoPzpiYlthLWZdfHN0W2h2XSkxMDAtXFxkKS9pLFxuICAgICAgICAgICAgL1xcKGJiMTA7IChcXHcrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsYWNrQmVycnkgMTBcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgQkxBQ0tCRVJSWV0sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvLyBBc3VzXG4gICAgICAgICAgICAvKD86XFxifGFzdXNfKSh0cmFuc2ZvW3ByaW1lIF17NCwxMH0gXFx3K3xlZWVwY3xzbGlkZXIgXFx3K3xuZXh1cyA3fHBhZGZvbmV8cDAwW2NqXSkvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBBU1VTXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvICh6W2Jlc102WzAyN11bMDEyXVtrbV1bbHNdfHplbmZvbmUgXFxkXFx3PylcXGIvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBBU1VTXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8vIEhUQ1xuICAgICAgICAgICAgLyhuZXh1cyA5KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIVEMgTmV4dXMgOVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnSFRDJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhodGMpWy07XyBdezEsMn0oW1xcdyBdKyg/PVxcKXwgYnVpKXxcXHcrKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIVENcblxuICAgICAgICAgICAgLy8gWlRFXG4gICAgICAgICAgICAvKHp0ZSlbLSBdKFtcXHcgXSs/KSg/OiBidWl8XFwvfFxcKSkvaSxcbiAgICAgICAgICAgIC8oYWxjYXRlbHxnZWVrc3Bob25lfG5leGlhbnxwYW5hc29uaWN8c29ueSg/IS1icmEpKVstXyBdPyhbLVxcd10qKS9pICAgICAgICAgLy8gQWxjYXRlbC9HZWVrc1Bob25lL05leGlhbi9QYW5hc29uaWMvU29ueVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgW01PREVMLCAvXy9nLCAnICddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8gQWNlclxuICAgICAgICAgICAgL2Ryb2lkLis7IChbYWJdWzEtN10tP1swMTc4YV1cXGRcXGQ/KS9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBY2VyJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvLyBNZWl6dVxuICAgICAgICAgICAgL2Ryb2lkLis7IChtWzEtNV0gbm90ZSkgYnVpL2ksXG4gICAgICAgICAgICAvXFxibXotKFstXFx3XXsyLH0pL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01laXp1J10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvLyBTaGFycFxuICAgICAgICAgICAgL1xcYihzaC0/W2FsdHZ6XT9cXGRcXGRbYS1la21dPykvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBTSEFSUF0sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvLyBNSVhFRFxuICAgICAgICAgICAgLyhibGFja2JlcnJ5fGJlbnF8cGFsbSg/PVxcLSl8c29ueWVyaWNzc29ufGFjZXJ8YXN1c3xkZWxsfG1laXp1fG1vdG9yb2xhfHBvbHl0cm9uKVstXyBdPyhbLVxcd10qKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja0JlcnJ5L0JlblEvUGFsbS9Tb255LUVyaWNzc29uL0FjZXIvQXN1cy9EZWxsL01laXp1L01vdG9yb2xhL1BvbHl0cm9uXG4gICAgICAgICAgICAvKGhwKSAoW1xcdyBdK1xcdykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFAgaVBBUVxuICAgICAgICAgICAgLyhhc3VzKS0/KFxcdyspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXN1c1xuICAgICAgICAgICAgLyhtaWNyb3NvZnQpOyAobHVtaWFbXFx3IF0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IEx1bWlhXG4gICAgICAgICAgICAvKGxlbm92bylbLV8gXT8oWy1cXHddKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZW5vdm9cbiAgICAgICAgICAgIC8oam9sbGEpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSm9sbGFcbiAgICAgICAgICAgIC8ob3BwbykgPyhbXFx3IF0rKSBidWkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9QUE9cbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhhcmNob3MpIChnYW1lcGFkMj8pL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcmNob3NcbiAgICAgICAgICAgIC8oaHApLisodG91Y2hwYWQoPyEuK3RhYmxldCl8dGFibGV0KS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFAgVG91Y2hQYWRcbiAgICAgICAgICAgIC8oa2luZGxlKVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2luZGxlXG4gICAgICAgICAgICAvKG5vb2spW1xcdyBdK2J1aWxkXFwvKFxcdyspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vb2tcbiAgICAgICAgICAgIC8oZGVsbCkgKHN0cmVhW2twclxcZCBdKltcXGRrb10pL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxsIFN0cmVha1xuICAgICAgICAgICAgLyhsZVstIF0rcGFuKVstIF0rKFxcd3sxLDl9KSBidWkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGUgUGFuIFRhYmxldHNcbiAgICAgICAgICAgIC8odHJpbml0eSlbLSBdKih0XFxkezN9KSBidWkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaW5pdHkgVGFibGV0c1xuICAgICAgICAgICAgLyhnaWdhc2V0KVstIF0rKHFcXHd7MSw5fSkgYnVpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2lnYXNldCBUYWJsZXRzXG4gICAgICAgICAgICAvKHZvZGFmb25lKSAoW1xcdyBdKykoPzpcXCl8IGJ1aSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVm9kYWZvbmVcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhzdXJmYWNlIGR1bykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdXJmYWNlIER1b1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBNSUNST1NPRlRdLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9kcm9pZCBbXFxkXFwuXSs7IChmcFxcZHU/KSg/OiBifFxcKSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZhaXJwaG9uZVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnRmFpcnBob25lJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyh1MzA0YWEpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBVCZUXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBVCZUJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL1xcYnNpZS0oXFx3KikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpZW1lbnNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1NpZW1lbnMnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvXFxiKHJjdFxcdyspIGIvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUkNBIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1JDQSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9cXGIodmVudWVbXFxkIF17Miw3fSkgYi9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxsIFZlbnVlIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0RlbGwnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKHEoPzptdnx0YSlcXHcrKSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaXpvbiBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1Zlcml6b24nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKD86YmFybmVzWyYgXStub2JsZSB8Ym5bcnRdKShbXFx3XFwrIF0qKSBiL2kgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhcm5lcyAmIE5vYmxlIFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQmFybmVzICYgTm9ibGUnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKHRtXFxkezN9XFx3KykgYi9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdOdVZpc2lvbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9cXGIoazg4KSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFpURSBLIFNlcmllcyBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pURSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9cXGIobnhcXGR7M31qKSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaVEUgTnViaWFcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pURSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9cXGIoZ2VuXFxkezN9KSBiLis0OWgvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTd2lzcyBHRU4gTW9iaWxlXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTd2lzcyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9cXGIoenVyXFxkezN9KSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTd2lzcyBaVVIgVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTd2lzcyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9cXGIoKHpla2kpP3RiLipcXGIpIGIvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaZWtpIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pla2knXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKFt5cl1cXGR7Mn0pIGIvaSxcbiAgICAgICAgICAgIC9cXGIoZHJhZ29uWy0gXSt0b3VjaCB8ZHQpKFxcd3s1fSkgYi9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEcmFnb24gVG91Y2ggVGFibGV0XG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ0RyYWdvbiBUb3VjaCddLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKG5zLT9cXHd7MCw5fSkgYi9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5zaWduaWEgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnSW5zaWduaWEnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKChueGF8bmV4dCktP1xcd3swLDl9KSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV4dEJvb2sgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTmV4dEJvb2snXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvXFxiKHh0cmVtZVxcXyk/KHYoMVswNDVdfDJbMDE1XXxbMzQ2OV0wfDdbMDVdKSkgYi9pICAgICAgICAgICAgICAgICAgLy8gVm9pY2UgWHRyZW1lIFBob25lc1xuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdWb2ljZSddLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvXFxiKGx2dGVsXFwtKT8odjFbMTJdKSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTHZUZWwgUGhvbmVzXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ0x2VGVsJ10sIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9cXGIocGgtMSkgL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzc2VudGlhbCBQSC0xXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdFc3NlbnRpYWwnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvXFxiKHYoMTAwbWR8NzAwbmF8NzAxMXw5MTdnKS4qXFxiKSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW52aXplbiBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdFbnZpemVuJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL1xcYih0cmlvWy1cXHdcXC4gXSspIGIvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWNoU3BlZWQgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTWFjaFNwZWVkJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL1xcYnR1XygxNDkxKSBiL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90b3IgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnUm90b3InXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKHNoaWVsZFtcXHcgXSspIGIvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOdmlkaWEgU2hpZWxkIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ052aWRpYSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oc3ByaW50KSAoXFx3KykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwcmludCBQaG9uZXNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oa2luXFwuW29uZXR3XXszfSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pY3Jvc29mdCBLaW5cbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC9cXC4vZywgJyAnXSwgW1ZFTkRPUiwgTUlDUk9TT0ZUXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvZHJvaWQuKzsgKGNjNjY2Nj98ZXQ1WzE2XXxtY1syMzldWzIzXXg/fHZjOFswM114PylcXCkvaSAgICAgICAgICAgICAvLyBaZWJyYVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBaRUJSQV0sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL2Ryb2lkLis7IChlYzMwfHBzMjB8dGNbMi04XVxcZFtreF0pXFwpL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgWkVCUkFdLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy8gQ09OU09MRVNcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgLyhvdXlhKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdXlhXG4gICAgICAgICAgICAvKG5pbnRlbmRvKSAoW3dpZHMzdXRjaF0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5pbnRlbmRvXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIENPTlNPTEVdXSwgW1xuICAgICAgICAgICAgL2Ryb2lkLis7IChzaGllbGQpIGJ1aS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOdmlkaWFcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ052aWRpYSddLCBbVFlQRSwgQ09OU09MRV1dLCBbXG4gICAgICAgICAgICAvKHBsYXlzdGF0aW9uIFszNDVwb3J0YWJsZXZpXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBsYXlzdGF0aW9uXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIFNPTlldLCBbVFlQRSwgQ09OU09MRV1dLCBbXG4gICAgICAgICAgICAvXFxiKHhib3goPzogb25lKT8oPyE7IHhib3gpKVtcXCk7IF0vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IFhib3hcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgTUlDUk9TT0ZUXSwgW1RZUEUsIENPTlNPTEVdXSwgW1xuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBTTUFSVFRWU1xuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgICAgICAvc21hcnQtdHYuKyhzYW1zdW5nKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmdcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIFtUWVBFLCBTTUFSVFRWXV0sIFtcbiAgICAgICAgICAgIC9oYmJ0di4rbWFwbGU7KFxcZCspL2lcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC9eLywgJ1NtYXJ0VFYnXSwgW1ZFTkRPUiwgU0FNU1VOR10sIFtUWVBFLCBTTUFSVFRWXV0sIFtcbiAgICAgICAgICAgIC8obnV4OyBuZXRjYXN0LitzbWFydHR2fGxnIChuZXRjYXN0XFwudHYtMjAxXFxkfGFuZHJvaWQgdHYpKS9pICAgICAgICAvLyBMRyBTbWFydFRWXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgTEddLCBbVFlQRSwgU01BUlRUVl1dLCBbXG4gICAgICAgICAgICAvKGFwcGxlKSA/dHYvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGxlIFRWXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBbTU9ERUwsIEFQUExFKycgVFYnXSwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuICAgICAgICAgICAgL2Nya2V5L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgQ2hyb21lY2FzdFxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgQ0hST01FKydjYXN0J10sIFtWRU5ET1IsIEdPT0dMRV0sIFtUWVBFLCBTTUFSVFRWXV0sIFtcbiAgICAgICAgICAgIC9kcm9pZC4rYWZ0KFxcdykoIGJ1aXxcXCkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlIFRWXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIEFNQVpPTl0sIFtUWVBFLCBTTUFSVFRWXV0sIFtcbiAgICAgICAgICAgIC9cXChkdHZbXFwpO10uKyhhcXVvcykvaSxcbiAgICAgICAgICAgIC8oYXF1b3MtdHZbXFx3IF0rKVxcKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaGFycFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBTSEFSUF0sIFtUWVBFLCBTTUFSVFRWXV0sW1xuICAgICAgICAgICAgLyhicmF2aWFbXFx3IF0rKSggYnVpfFxcKSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb255XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsIFNPTlldLCBbVFlQRSwgU01BUlRUVl1dLCBbXG4gICAgICAgICAgICAvKG1pdHYtXFx3ezV9KSBidWkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYaWFvbWlcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgWElBT01JXSwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuICAgICAgICAgICAgL1xcYihyb2t1KVtcXGR4XSpbXFwpXFwvXSgoPzpkdnAtKT9bXFxkXFwuXSopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb2t1XG4gICAgICAgICAgICAvaGJidHZcXC9cXGQrXFwuXFxkK1xcLlxcZCsgK1xcKFtcXHcgXSo7ICooXFx3W147XSopOyhbXjtdKikvaSAgICAgICAgICAgICAgIC8vIEhiYlRWIGRldmljZXNcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCB0cmltXSwgW01PREVMLCB0cmltXSwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuICAgICAgICAgICAgL1xcYihhbmRyb2lkIHR2fHNtYXJ0Wy0gXT90dnxvcGVyYSB0dnx0djsgcnY6KVxcYi9pICAgICAgICAgICAgICAgICAgIC8vIFNtYXJ0VFYgZnJvbSBVbmlkZW50aWZpZWQgVmVuZG9yc1xuICAgICAgICAgICAgXSwgW1tUWVBFLCBTTUFSVFRWXV0sIFtcblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy8gV0VBUkFCTEVTXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgIC8oKHBlYmJsZSkpYXBwL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGViYmxlXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFdFQVJBQkxFXV0sIFtcbiAgICAgICAgICAgIC9kcm9pZC4rOyAoZ2xhc3MpIFxcZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBHbGFzc1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBHT09HTEVdLCBbVFlQRSwgV0VBUkFCTEVdXSwgW1xuICAgICAgICAgICAgL2Ryb2lkLis7ICh3dDYzPzB7MiwzfSlcXCkvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBaRUJSQV0sIFtUWVBFLCBXRUFSQUJMRV1dLCBbXG4gICAgICAgICAgICAvKHF1ZXN0KCAyKT8pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9jdWx1cyBRdWVzdFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCBGQUNFQk9PS10sIFtUWVBFLCBXRUFSQUJMRV1dLCBbXG5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIEVNQkVEREVEXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgIC8odGVzbGEpKD86IHF0Y2FyYnJvd3NlcnxcXC9bLVxcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVzbGFcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIFtUWVBFLCBFTUJFRERFRF1dLCBbXG5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBNSVhFRCAoR0VORVJJQylcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgL2Ryb2lkIC4rPzsgKFteO10rPykoPzogYnVpfFxcKSBhcHBsZXcpLis/IG1vYmlsZSBzYWZhcmkvaSAgICAgICAgICAgLy8gQW5kcm9pZCBQaG9uZXMgZnJvbSBVbmlkZW50aWZpZWQgVmVuZG9yc1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9kcm9pZCAuKz87IChbXjtdKz8pKD86IGJ1aXxcXCkgYXBwbGV3KS4rPyg/ISBtb2JpbGUpIHNhZmFyaS9pICAgICAgIC8vIEFuZHJvaWQgVGFibGV0cyBmcm9tIFVuaWRlbnRpZmllZCBWZW5kb3JzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL1xcYigodGFibGV0fHRhYilbO1xcL118Zm9jdXNcXC9cXGQoPyEuK21vYmlsZSkpL2kgICAgICAgICAgICAgICAgICAgICAgLy8gVW5pZGVudGlmaWFibGUgVGFibGV0XG4gICAgICAgICAgICBdLCBbW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKHBob25lfG1vYmlsZSg/Ols7XFwvXXwgWyBcXHdcXC9cXC5dKnNhZmFyaSl8cGRhKD89Lit3aW5kb3dzIGNlKSkvaSAgICAvLyBVbmlkZW50aWZpYWJsZSBNb2JpbGVcbiAgICAgICAgICAgIF0sIFtbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oYW5kcm9pZFstXFx3XFwuIF17MCw5fSk7LitidWlsL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIEFuZHJvaWQgRGV2aWNlXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdHZW5lcmljJ11dXG4gICAgICAgIF0sXG5cbiAgICAgICAgZW5naW5lIDogW1tcblxuICAgICAgICAgICAgL3dpbmRvd3MuKyBlZGdlXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVkZ2VIVE1MXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsIEVER0UrJ0hUTUwnXV0sIFtcblxuICAgICAgICAgICAgL3dlYmtpdFxcLzUzN1xcLjM2LitjaHJvbWVcXC8oPyEyNykoW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsaW5rXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdCbGluayddXSwgW1xuXG4gICAgICAgICAgICAvKHByZXN0bylcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXN0b1xuICAgICAgICAgICAgLyh3ZWJraXR8dHJpZGVudHxuZXRmcm9udHxuZXRzdXJmfGFtYXlhfGx5bnh8dzNtfGdvYW5uYSlcXC8oW1xcd1xcLl0rKS9pLCAvLyBXZWJLaXQvVHJpZGVudC9OZXRGcm9udC9OZXRTdXJmL0FtYXlhL0x5bngvdzNtL0dvYW5uYVxuICAgICAgICAgICAgL2VraW9oKGZsb3cpXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGbG93XG4gICAgICAgICAgICAvKGtodG1sfHRhc21hbnxsaW5rcylbXFwvIF1cXCg/KFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLSFRNTC9UYXNtYW4vTGlua3NcbiAgICAgICAgICAgIC8oaWNhYilbXFwvIF0oWzIzXVxcLltcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlDYWJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvcnZcXDooW1xcd1xcLl17MSw5fSlcXGIuKyhnZWNrbykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZWNrb1xuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIE5BTUVdXG4gICAgICAgIF0sXG5cbiAgICAgICAgb3MgOiBbW1xuXG4gICAgICAgICAgICAvLyBXaW5kb3dzXG4gICAgICAgICAgICAvbWljcm9zb2Z0ICh3aW5kb3dzKSAodmlzdGF8eHApL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgKGlUdW5lcylcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLyh3aW5kb3dzKSBudCA2XFwuMjsgKGFybSkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2luZG93cyBSVFxuICAgICAgICAgICAgLyh3aW5kb3dzICg/OnBob25lKD86IG9zKT98bW9iaWxlKSlbXFwvIF0/KFtcXGRcXC5cXHcgXSopL2ksICAgICAgICAgICAgLy8gV2luZG93cyBQaG9uZVxuICAgICAgICAgICAgLyh3aW5kb3dzKVtcXC8gXT8oW250Y2VcXGRcXC4gXStcXHcpKD8hLit4Ym94KS9pXG4gICAgICAgICAgICBdLCBbTkFNRSwgW1ZFUlNJT04sIHN0ck1hcHBlciwgd2luZG93c1ZlcnNpb25NYXBdXSwgW1xuICAgICAgICAgICAgLyh3aW4oPz0zfDl8bil8d2luIDl4ICkoW250XFxkXFwuXSspL2lcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1dpbmRvd3MnXSwgW1ZFUlNJT04sIHN0ck1hcHBlciwgd2luZG93c1ZlcnNpb25NYXBdXSwgW1xuXG4gICAgICAgICAgICAvLyBpT1MvbWFjT1NcbiAgICAgICAgICAgIC9pcFtob25lYWRdezIsNH1cXGIoPzouKm9zIChbXFx3XSspIGxpa2UgbWFjfDsgb3BlcmEpL2ksICAgICAgICAgICAgICAvLyBpT1NcbiAgICAgICAgICAgIC9jZm5ldHdvcmtcXC8uK2Rhcndpbi9pXG4gICAgICAgICAgICBdLCBbW1ZFUlNJT04sIC9fL2csICcuJ10sIFtOQU1FLCAnaU9TJ11dLCBbXG4gICAgICAgICAgICAvKG1hYyBvcyB4KSA/KFtcXHdcXC4gXSopL2ksXG4gICAgICAgICAgICAvKG1hY2ludG9zaHxtYWNfcG93ZXJwY1xcYikoPyEuK2hhaWt1KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWMgT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ01hYyBPUyddLCBbVkVSU0lPTiwgL18vZywgJy4nXV0sIFtcblxuICAgICAgICAgICAgLy8gTW9iaWxlIE9TZXNcbiAgICAgICAgICAgIC9kcm9pZCAoW1xcd1xcLl0rKVxcYi4rKGFuZHJvaWRbLSBdeDg2fGhhcm1vbnlvcykvaSAgICAgICAgICAgICAgICAgICAgLy8gQW5kcm9pZC14ODYvSGFybW9ueU9TXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgTkFNRV0sIFsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFuZHJvaWQvV2ViT1MvUU5YL0JhZGEvUklNL01hZW1vL01lZUdvL1NhaWxmaXNoIE9TXG4gICAgICAgICAgICAvKGFuZHJvaWR8d2Vib3N8cW54fGJhZGF8cmltIHRhYmxldCBvc3xtYWVtb3xtZWVnb3xzYWlsZmlzaClbLVxcLyBdPyhbXFx3XFwuXSopL2ksXG4gICAgICAgICAgICAvKGJsYWNrYmVycnkpXFx3KlxcLyhbXFx3XFwuXSopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja2JlcnJ5XG4gICAgICAgICAgICAvKHRpemVufGthaW9zKVtcXC8gXShbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRpemVuL0thaU9TXG4gICAgICAgICAgICAvXFwoKHNlcmllczQwKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXJpZXMgNDBcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgL1xcKGJiKDEwKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxhY2tCZXJyeSAxMFxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCBCTEFDS0JFUlJZXV0sIFtcbiAgICAgICAgICAgIC8oPzpzeW1iaWFuID9vc3xzeW1ib3N8czYwKD89Oyl8c2VyaWVzNjApWy1cXC8gXT8oW1xcd1xcLl0qKS9pICAgICAgICAgLy8gU3ltYmlhblxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnU3ltYmlhbiddXSwgW1xuICAgICAgICAgICAgL21vemlsbGFcXC9bXFxkXFwuXSsgXFwoKD86bW9iaWxlfHRhYmxldHx0dnxtb2JpbGU7IFtcXHcgXSspOyBydjouKyBnZWNrb1xcLyhbXFx3XFwuXSspL2kgLy8gRmlyZWZveCBPU1xuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCBGSVJFRk9YKycgT1MnXV0sIFtcbiAgICAgICAgICAgIC93ZWIwczsuK3J0KHR2KS9pLFxuICAgICAgICAgICAgL1xcYig/OmhwKT93b3MoPzpicm93c2VyKT9cXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2ViT1NcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ3dlYk9TJ11dLCBbXG5cbiAgICAgICAgICAgIC8vIEdvb2dsZSBDaHJvbWVjYXN0XG4gICAgICAgICAgICAvY3JrZXlcXC8oW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBDaHJvbWVjYXN0XG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsIENIUk9NRSsnY2FzdCddXSwgW1xuICAgICAgICAgICAgLyhjcm9zKSBbXFx3XSsgKFtcXHdcXC5dK1xcdykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21pdW0gT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0Nocm9taXVtIE9TJ10sIFZFUlNJT05dLFtcblxuICAgICAgICAgICAgLy8gQ29uc29sZVxuICAgICAgICAgICAgLyhuaW50ZW5kb3xwbGF5c3RhdGlvbikgKFt3aWRzMzQ1cG9ydGFibGV2dWNoXSspL2ksICAgICAgICAgICAgICAgICAvLyBOaW50ZW5kby9QbGF5c3RhdGlvblxuICAgICAgICAgICAgLyh4Ym94KTsgK3hib3ggKFteXFwpO10rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IFhib3ggKDM2MCwgT25lLCBYLCBTLCBTZXJpZXMgWCwgU2VyaWVzIFMpXG5cbiAgICAgICAgICAgIC8vIE90aGVyXG4gICAgICAgICAgICAvXFxiKGpvbGl8cGFsbSlcXGIgPyg/Om9zKT9cXC8/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSm9saS9QYWxtXG4gICAgICAgICAgICAvKG1pbnQpW1xcL1xcKFxcKSBdPyhcXHcqKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaW50XG4gICAgICAgICAgICAvKG1hZ2VpYXx2ZWN0b3JsaW51eClbOyBdL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hZ2VpYS9WZWN0b3JMaW51eFxuICAgICAgICAgICAgLyhba3hsbl0/dWJ1bnR1fGRlYmlhbnxzdXNlfG9wZW5zdXNlfGdlbnRvb3xhcmNoKD89IGxpbnV4KXxzbGFja3dhcmV8ZmVkb3JhfG1hbmRyaXZhfGNlbnRvc3xwY2xpbnV4b3N8cmVkID9oYXR8emVud2Fsa3xsaW5wdXN8cmFzcGJpYW58cGxhbiA5fG1pbml4fHJpc2Mgb3N8Y29udGlraXxkZWVwaW58bWFuamFyb3xlbGVtZW50YXJ5IG9zfHNhYmF5b258bGluc3BpcmUpKD86IGdudVxcL2xpbnV4KT8oPzogZW50ZXJwcmlzZSk/KD86Wy0gXWxpbnV4KT8oPzotZ251KT9bLVxcLyBdPyg/IWNocm9tfHBhY2thZ2UpKFstXFx3XFwuXSopL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVidW50dS9EZWJpYW4vU1VTRS9HZW50b28vQXJjaC9TbGFja3dhcmUvRmVkb3JhL01hbmRyaXZhL0NlbnRPUy9QQ0xpbnV4T1MvUmVkSGF0L1plbndhbGsvTGlucHVzL1Jhc3BiaWFuL1BsYW45L01pbml4L1JJU0NPUy9Db250aWtpL0RlZXBpbi9NYW5qYXJvL2VsZW1lbnRhcnkvU2FiYXlvbi9MaW5zcGlyZVxuICAgICAgICAgICAgLyhodXJkfGxpbnV4KSA/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh1cmQvTGludXhcbiAgICAgICAgICAgIC8oZ251KSA/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHTlVcbiAgICAgICAgICAgIC9cXGIoWy1mcmVudG9wY2doc117MCw1fWJzZHxkcmFnb25mbHkpW1xcLyBdPyg/IWFtZHxbaXgzNDZdezEsMn04NikoW1xcd1xcLl0qKS9pLCAvLyBGcmVlQlNEL05ldEJTRC9PcGVuQlNEL1BDLUJTRC9HaG9zdEJTRC9EcmFnb25GbHlcbiAgICAgICAgICAgIC8oaGFpa3UpIChcXHcrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhaWt1XG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8oc3Vub3MpID8oW1xcd1xcLlxcZF0qKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29sYXJpc1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnU29sYXJpcyddLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLygoPzpvcGVuKT9zb2xhcmlzKVstXFwvIF0/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb2xhcmlzXG4gICAgICAgICAgICAvKGFpeCkgKChcXGQpKD89XFwufFxcKXwgKVtcXHdcXC5dKSovaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQUlYXG4gICAgICAgICAgICAvXFxiKGJlb3N8b3NcXC8yfGFtaWdhb3N8bW9ycGhvc3xvcGVudm1zfGZ1Y2hzaWF8aHAtdXgpL2ksICAgICAgICAgICAgLy8gQmVPUy9PUzIvQW1pZ2FPUy9Nb3JwaE9TL09wZW5WTVMvRnVjaHNpYS9IUC1VWFxuICAgICAgICAgICAgLyh1bml4KSA/KFtcXHdcXC5dKikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVOSVhcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXVxuICAgICAgICBdXG4gICAgfTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ29uc3RydWN0b3JcbiAgICAvLy8vLy8vLy8vLy8vLy8vXG5cbiAgICB2YXIgVUFQYXJzZXIgPSBmdW5jdGlvbiAodWEsIGV4dGVuc2lvbnMpIHtcblxuICAgICAgICBpZiAodHlwZW9mIHVhID09PSBPQkpfVFlQRSkge1xuICAgICAgICAgICAgZXh0ZW5zaW9ucyA9IHVhO1xuICAgICAgICAgICAgdWEgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVUFQYXJzZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVBUGFyc2VyKHVhLCBleHRlbnNpb25zKS5nZXRSZXN1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfdWEgPSB1YSB8fCAoKHR5cGVvZiB3aW5kb3cgIT09IFVOREVGX1RZUEUgJiYgd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgPyB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCA6IEVNUFRZKTtcbiAgICAgICAgdmFyIF9yZ3htYXAgPSBleHRlbnNpb25zID8gZXh0ZW5kKHJlZ2V4ZXMsIGV4dGVuc2lvbnMpIDogcmVnZXhlcztcblxuICAgICAgICB0aGlzLmdldEJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2Jyb3dzZXIgPSB7fTtcbiAgICAgICAgICAgIF9icm93c2VyW05BTUVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgX2Jyb3dzZXJbVkVSU0lPTl0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZ3hNYXBwZXIuY2FsbChfYnJvd3NlciwgX3VhLCBfcmd4bWFwLmJyb3dzZXIpO1xuICAgICAgICAgICAgX2Jyb3dzZXIubWFqb3IgPSBtYWpvcml6ZShfYnJvd3Nlci52ZXJzaW9uKTtcbiAgICAgICAgICAgIHJldHVybiBfYnJvd3NlcjtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRDUFUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2NwdSA9IHt9O1xuICAgICAgICAgICAgX2NwdVtBUkNISVRFQ1RVUkVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmd4TWFwcGVyLmNhbGwoX2NwdSwgX3VhLCBfcmd4bWFwLmNwdSk7XG4gICAgICAgICAgICByZXR1cm4gX2NwdTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXREZXZpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2RldmljZSA9IHt9O1xuICAgICAgICAgICAgX2RldmljZVtWRU5ET1JdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgX2RldmljZVtNT0RFTF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfZGV2aWNlW1RZUEVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmd4TWFwcGVyLmNhbGwoX2RldmljZSwgX3VhLCBfcmd4bWFwLmRldmljZSk7XG4gICAgICAgICAgICByZXR1cm4gX2RldmljZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRFbmdpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2VuZ2luZSA9IHt9O1xuICAgICAgICAgICAgX2VuZ2luZVtOQU1FXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIF9lbmdpbmVbVkVSU0lPTl0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZ3hNYXBwZXIuY2FsbChfZW5naW5lLCBfdWEsIF9yZ3htYXAuZW5naW5lKTtcbiAgICAgICAgICAgIHJldHVybiBfZW5naW5lO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldE9TID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9vcyA9IHt9O1xuICAgICAgICAgICAgX29zW05BTUVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgX29zW1ZFUlNJT05dID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmd4TWFwcGVyLmNhbGwoX29zLCBfdWEsIF9yZ3htYXAub3MpO1xuICAgICAgICAgICAgcmV0dXJuIF9vcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRSZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVhICAgICAgOiB0aGlzLmdldFVBKCksXG4gICAgICAgICAgICAgICAgYnJvd3NlciA6IHRoaXMuZ2V0QnJvd3NlcigpLFxuICAgICAgICAgICAgICAgIGVuZ2luZSAgOiB0aGlzLmdldEVuZ2luZSgpLFxuICAgICAgICAgICAgICAgIG9zICAgICAgOiB0aGlzLmdldE9TKCksXG4gICAgICAgICAgICAgICAgZGV2aWNlICA6IHRoaXMuZ2V0RGV2aWNlKCksXG4gICAgICAgICAgICAgICAgY3B1ICAgICA6IHRoaXMuZ2V0Q1BVKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0VUEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3VhO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldFVBID0gZnVuY3Rpb24gKHVhKSB7XG4gICAgICAgICAgICBfdWEgPSAodHlwZW9mIHVhID09PSBTVFJfVFlQRSAmJiB1YS5sZW5ndGggPiBVQV9NQVhfTEVOR1RIKSA/IHRyaW0odWEsIFVBX01BWF9MRU5HVEgpIDogdWE7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRVQShfdWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVUFQYXJzZXIuVkVSU0lPTiA9IExJQlZFUlNJT047XG4gICAgVUFQYXJzZXIuQlJPV1NFUiA9ICBlbnVtZXJpemUoW05BTUUsIFZFUlNJT04sIE1BSk9SXSk7XG4gICAgVUFQYXJzZXIuQ1BVID0gZW51bWVyaXplKFtBUkNISVRFQ1RVUkVdKTtcbiAgICBVQVBhcnNlci5ERVZJQ0UgPSBlbnVtZXJpemUoW01PREVMLCBWRU5ET1IsIFRZUEUsIENPTlNPTEUsIE1PQklMRSwgU01BUlRUViwgVEFCTEVULCBXRUFSQUJMRSwgRU1CRURERURdKTtcbiAgICBVQVBhcnNlci5FTkdJTkUgPSBVQVBhcnNlci5PUyA9IGVudW1lcml6ZShbTkFNRSwgVkVSU0lPTl0pO1xuXG4gICAgLy8vLy8vLy8vLy9cbiAgICAvLyBFeHBvcnRcbiAgICAvLy8vLy8vLy8vXG5cbiAgICAvLyBjaGVjayBqcyBlbnZpcm9ubWVudFxuICAgIGlmICh0eXBlb2YoZXhwb3J0cykgIT09IFVOREVGX1RZUEUpIHtcbiAgICAgICAgLy8gbm9kZWpzIGVudlxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gVU5ERUZfVFlQRSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gVUFQYXJzZXI7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0cy5VQVBhcnNlciA9IFVBUGFyc2VyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlcXVpcmVqcyBlbnYgKG9wdGlvbmFsKVxuICAgICAgICBpZiAodHlwZW9mKGRlZmluZSkgPT09IEZVTkNfVFlQRSAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBVQVBhcnNlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFVOREVGX1RZUEUpIHtcbiAgICAgICAgICAgIC8vIGJyb3dzZXIgZW52XG4gICAgICAgICAgICB3aW5kb3cuVUFQYXJzZXIgPSBVQVBhcnNlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGpRdWVyeS9aZXB0byBzcGVjaWZpYyAob3B0aW9uYWwpXG4gICAgLy8gTm90ZTpcbiAgICAvLyAgIEluIEFNRCBlbnYgdGhlIGdsb2JhbCBzY29wZSBzaG91bGQgYmUga2VwdCBjbGVhbiwgYnV0IGpRdWVyeSBpcyBhbiBleGNlcHRpb24uXG4gICAgLy8gICBqUXVlcnkgYWx3YXlzIGV4cG9ydHMgdG8gZ2xvYmFsIHNjb3BlLCB1bmxlc3MgalF1ZXJ5Lm5vQ29uZmxpY3QodHJ1ZSkgaXMgdXNlZCxcbiAgICAvLyAgIGFuZCB3ZSBzaG91bGQgY2F0Y2ggdGhhdC5cbiAgICB2YXIgJCA9IHR5cGVvZiB3aW5kb3cgIT09IFVOREVGX1RZUEUgJiYgKHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTtcbiAgICBpZiAoJCAmJiAhJC51YSkge1xuICAgICAgICB2YXIgcGFyc2VyID0gbmV3IFVBUGFyc2VyKCk7XG4gICAgICAgICQudWEgPSBwYXJzZXIuZ2V0UmVzdWx0KCk7XG4gICAgICAgICQudWEuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlci5nZXRVQSgpO1xuICAgICAgICB9O1xuICAgICAgICAkLnVhLnNldCA9IGZ1bmN0aW9uICh1YSkge1xuICAgICAgICAgICAgcGFyc2VyLnNldFVBKHVhKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZXIuZ2V0UmVzdWx0KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICQudWFbcHJvcF0gPSByZXN1bHRbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG59KSh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyA/IHdpbmRvdyA6IHRoaXMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///232\n\n}")},811:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('{\n;// ./node_modules/@zappar/zappar-cv/lib/zappar-cv.js\n\nvar ZCV = (function() {\n  var _scriptDir = typeof document !== \'undefined\' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(ZCV) {\n  ZCV = ZCV || {};\n\n\nvar e;e||(e=typeof ZCV !== \'undefined\' ? ZCV : {});var aa,ba;e.ready=new Promise(function(a,b){aa=a;ba=b});var ca={},l;for(l in e)e.hasOwnProperty(l)&&(ca[l]=e[l]);var da="./this.program";function ea(a,b){throw b;}var m="",fa;m=self.location.href;_scriptDir&&(m=_scriptDir);0!==m.indexOf("blob:")?m=m.substr(0,m.lastIndexOf("/")+1):m="";fa=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";b.send(null);return new Uint8Array(b.response)};\nvar ha=e.print||console.log.bind(console),n=e.printErr||console.warn.bind(console);for(l in ca)ca.hasOwnProperty(l)&&(e[l]=ca[l]);ca=null;e.thisProgram&&(da=e.thisProgram);e.quit&&(ea=e.quit);function ia(a){ja||(ja={});ja[a]||(ja[a]=1,n(a))}var ja,ka;e.wasmBinary&&(ka=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;"object"!==typeof WebAssembly&&x("no native wasm support detected");var la,ma=!1,na;function oa(a,b){a||x("Assertion failed: "+b)}\nfunction pa(a){var b=e["_"+a];oa(b,"Cannot call unknown function "+a+", make sure it is exported");return b}\nfunction qa(a,b,c,d){var f={string:function(p){var t=0;if(null!==p&&void 0!==p&&0!==p){var w=(p.length<<2)+1;t=ra(w);z(p,A,t,w)}return t},array:function(p){var t=ra(p.length);D.set(p,t);return t}},g=pa(a),k=[];a=0;if(d)for(var q=0;q<d.length;q++){var r=f[c[q]];r?(0===a&&(a=sa()),k[q]=r(d[q])):k[q]=d[q]}c=g.apply(null,k);c=function(p){return"string"===b?E(p):"boolean"===b?!!p:p}(c);0!==a&&ta(a);return c}var ua="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;\nfunction va(a,b,c){var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.subarray&&ua)return ua.decode(a.subarray(b,c));for(d="";b<c;){var f=a[b++];if(f&128){var g=a[b++]&63;if(192==(f&224))d+=String.fromCharCode((f&31)<<6|g);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|g<<6|k:(f&7)<<18|g<<12|k<<6|a[b++]&63;65536>f?d+=String.fromCharCode(f):(f-=65536,d+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else d+=String.fromCharCode(f)}return d}function E(a,b){return a?va(A,a,b):""}\nfunction z(a,b,c,d){if(!(0<d))return 0;var f=c;d=c+d-1;for(var g=0;g<a.length;++g){var k=a.charCodeAt(g);if(55296<=k&&57343>=k){var q=a.charCodeAt(++g);k=65536+((k&1023)<<10)|q&1023}if(127>=k){if(c>=d)break;b[c++]=k}else{if(2047>=k){if(c+1>=d)break;b[c++]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++]=224|k>>12}else{if(c+3>=d)break;b[c++]=240|k>>18;b[c++]=128|k>>12&63}b[c++]=128|k>>6&63}b[c++]=128|k&63}}b[c]=0;return c-f}\nfunction wa(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}function xa(a){var b=wa(a)+1,c=ya(b);c&&z(a,D,c,b);return c}function za(a,b){for(var c=0;c<a.length;++c)D[b++>>0]=a.charCodeAt(c);D[b>>0]=0}var Aa,D,A,Ba,F,G,H,Ca,Da;\nfunction Ea(){var a=la.buffer;Aa=a;e.HEAP8=D=new Int8Array(a);e.HEAP16=Ba=new Int16Array(a);e.HEAP32=G=new Int32Array(a);e.HEAPU8=A=new Uint8Array(a);e.HEAPU16=F=new Uint16Array(a);e.HEAPU32=H=new Uint32Array(a);e.HEAPF32=Ca=new Float32Array(a);e.HEAPF64=Da=new Float64Array(a)}var I,Fa=[],Ga=[],Ha=[],Ia=[];function Ja(){var a=e.preRun.shift();Fa.unshift(a)}var Ka=0,La=null,Ma=null;function Na(){Ka++;e.monitorRunDependencies&&e.monitorRunDependencies(Ka)}\nfunction Oa(){Ka--;e.monitorRunDependencies&&e.monitorRunDependencies(Ka);if(0==Ka&&(null!==La&&(clearInterval(La),La=null),Ma)){var a=Ma;Ma=null;a()}}e.preloadedImages={};e.preloadedAudios={};function x(a){if(e.onAbort)e.onAbort(a);n(a);ma=!0;na=1;a=new WebAssembly.RuntimeError("abort("+a+"). Build with -s ASSERTIONS=1 for more info.");ba(a);throw a;}var Pa="zappar-cv.wasm";\nif(String.prototype.startsWith?!Pa.startsWith("data:application/octet-stream;base64,"):0!==Pa.indexOf("data:application/octet-stream;base64,")){var Qa=Pa;Pa=e.locateFile?e.locateFile(Qa,m):m+Qa}\nfunction Ra(a){var b=Pa;try{a:{try{if(b==Pa&&ka){var c=new Uint8Array(ka);break a}if(fa){c=fa(b);break a}throw"sync fetching of the wasm failed: you can preload it to Module[\'wasmBinary\'] manually, or emcc.py will do that for you when generating HTML (but not JS)";}catch(g){x(g)}c=void 0}var d=new WebAssembly.Module(c);var f=new WebAssembly.Instance(d,a)}catch(g){throw a=g.toString(),n("failed to compile wasm module: "+a),(0<=a.indexOf("imported Memory")||0<=a.indexOf("memory import"))&&n("Memory size incompatibility issues may be due to changing INITIAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set INITIAL_MEMORY at runtime to something smaller than it was at compile time)."),\ng;}return[f,d]}var K,M;function Sa(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b(e);else{var c=b.vd;"number"===typeof c?void 0===b.Oc?I.get(c)():I.get(c)(b.Oc):c(void 0===b.Oc?null:b.Oc)}}}var Ta;Ta=function(){return performance.now()};function Ua(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=Ta();else return G[Va()>>2]=28,-1;G[b>>2]=a/1E3|0;G[b+4>>2]=a%1E3*1E6|0;return 0}\nfunction Wa(a){this.Hc=a-16;this.Md=function(b){G[this.Hc+8>>2]=b};this.Jd=function(b){G[this.Hc+0>>2]=b};this.Kd=function(){G[this.Hc+4>>2]=0};this.Id=function(){D[this.Hc+12>>0]=0};this.Ld=function(){D[this.Hc+13>>0]=0};this.yd=function(b,c){this.Md(b);this.Jd(c);this.Kd();this.Id();this.Ld()}}var Ya=0;function Za(a,b){for(var c=0,d=a.length-1;0<=d;d--){var f=a[d];"."===f?a.splice(d,1):".."===f?(a.splice(d,1),c++):c&&(a.splice(d,1),c--)}if(b)for(;c;c--)a.unshift("..");return a}\nfunction $a(a){var b="/"===a.charAt(0),c="/"===a.substr(-1);(a=Za(a.split("/").filter(function(d){return!!d}),!b).join("/"))||b||(a=".");a&&c&&(a+="/");return(b?"/":"")+a}function ab(a){var b=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/.exec(a).slice(1);a=b[0];b=b[1];if(!a&&!b)return".";b&&(b=b.substr(0,b.length-1));return a+b}function bb(a){if("/"===a)return"/";a=$a(a);a=a.replace(/\\/$/,"");var b=a.lastIndexOf("/");return-1===b?a:a.substr(b+1)}\nfunction cb(){if("object"===typeof crypto&&"function"===typeof crypto.getRandomValues){var a=new Uint8Array(1);return function(){crypto.getRandomValues(a);return a[0]}}return function(){x("randomDevice")}}\nfunction db(){for(var a="",b=!1,c=arguments.length-1;-1<=c&&!b;c--){b=0<=c?arguments[c]:"/";if("string"!==typeof b)throw new TypeError("Arguments to path.resolve must be strings");if(!b)return"";a=b+"/"+a;b="/"===b.charAt(0)}a=Za(a.split("/").filter(function(d){return!!d}),!b).join("/");return(b?"/":"")+a||"."}var eb=[];function fb(a,b){eb[a]={input:[],wc:[],Gc:b};gb(a,hb)}\nvar hb={open:function(a){var b=eb[a.node.Lc];if(!b)throw new N(43);a.uc=b;a.seekable=!1},close:function(a){a.uc.Gc.flush(a.uc)},flush:function(a){a.uc.Gc.flush(a.uc)},read:function(a,b,c,d){if(!a.uc||!a.uc.Gc.hd)throw new N(60);for(var f=0,g=0;g<d;g++){try{var k=a.uc.Gc.hd(a.uc)}catch(q){throw new N(29);}if(void 0===k&&0===f)throw new N(6);if(null===k||void 0===k)break;f++;b[c+g]=k}f&&(a.node.timestamp=Date.now());return f},write:function(a,b,c,d){if(!a.uc||!a.uc.Gc.$c)throw new N(60);try{for(var f=\n0;f<d;f++)a.uc.Gc.$c(a.uc,b[c+f])}catch(g){throw new N(29);}d&&(a.node.timestamp=Date.now());return f}},jb={hd:function(a){if(!a.input.length){var b=null;"undefined"!=typeof window&&"function"==typeof window.prompt?(b=window.prompt("Input: "),null!==b&&(b+="\\n")):"function"==typeof readline&&(b=readline(),null!==b&&(b+="\\n"));if(!b)return null;a.input=ib(b,!0)}return a.input.shift()},$c:function(a,b){null===b||10===b?(ha(va(a.wc,0)),a.wc=[]):0!=b&&a.wc.push(b)},flush:function(a){a.wc&&0<a.wc.length&&\n(ha(va(a.wc,0)),a.wc=[])}},kb={$c:function(a,b){null===b||10===b?(n(va(a.wc,0)),a.wc=[]):0!=b&&a.wc.push(b)},flush:function(a){a.wc&&0<a.wc.length&&(n(va(a.wc,0)),a.wc=[])}},P={zc:null,Bc:function(){return P.createNode(null,"/",16895,0)},createNode:function(a,b,c,d){if(24576===(c&61440)||4096===(c&61440))throw new N(63);P.zc||(P.zc={dir:{node:{yc:P.qc.yc,Ac:P.qc.Ac,Jc:P.qc.Jc,Qc:P.qc.Qc,nd:P.qc.nd,Wc:P.qc.Wc,od:P.qc.od,Rc:P.qc.Rc,Sc:P.qc.Sc},stream:{Ec:P.sc.Ec}},file:{node:{yc:P.qc.yc,Ac:P.qc.Ac},\nstream:{Ec:P.sc.Ec,read:P.sc.read,write:P.sc.write,cd:P.sc.cd,jd:P.sc.jd,ld:P.sc.ld}},link:{node:{yc:P.qc.yc,Ac:P.qc.Ac,Mc:P.qc.Mc},stream:{}},dd:{node:{yc:P.qc.yc,Ac:P.qc.Ac},stream:lb}});c=mb(a,b,c,d);16384===(c.mode&61440)?(c.qc=P.zc.dir.node,c.sc=P.zc.dir.stream,c.rc={}):32768===(c.mode&61440)?(c.qc=P.zc.file.node,c.sc=P.zc.file.stream,c.tc=0,c.rc=null):40960===(c.mode&61440)?(c.qc=P.zc.link.node,c.sc=P.zc.link.stream):8192===(c.mode&61440)&&(c.qc=P.zc.dd.node,c.sc=P.zc.dd.stream);c.timestamp=\nDate.now();a&&(a.rc[b]=c,a.timestamp=c.timestamp);return c},Yd:function(a){return a.rc?a.rc.subarray?a.rc.subarray(0,a.tc):new Uint8Array(a.rc):new Uint8Array(0)},ed:function(a,b){var c=a.rc?a.rc.length:0;c>=b||(b=Math.max(b,c*(1048576>c?2:1.125)>>>0),0!=c&&(b=Math.max(b,256)),c=a.rc,a.rc=new Uint8Array(b),0<a.tc&&a.rc.set(c.subarray(0,a.tc),0))},Gd:function(a,b){if(a.tc!=b)if(0==b)a.rc=null,a.tc=0;else{var c=a.rc;a.rc=new Uint8Array(b);c&&a.rc.set(c.subarray(0,Math.min(b,a.tc)));a.tc=b}},qc:{yc:function(a){var b=\n{};b.td=8192===(a.mode&61440)?a.id:1;b.Zc=a.id;b.mode=a.mode;b.Ed=1;b.uid=0;b.wd=0;b.Lc=a.Lc;16384===(a.mode&61440)?b.size=4096:32768===(a.mode&61440)?b.size=a.tc:40960===(a.mode&61440)?b.size=a.link.length:b.size=0;b.pd=new Date(a.timestamp);b.Dd=new Date(a.timestamp);b.sd=new Date(a.timestamp);b.qd=4096;b.rd=Math.ceil(b.size/b.qd);return b},Ac:function(a,b){void 0!==b.mode&&(a.mode=b.mode);void 0!==b.timestamp&&(a.timestamp=b.timestamp);void 0!==b.size&&P.Gd(a,b.size)},Jc:function(){throw nb[44];\n},Qc:function(a,b,c,d){return P.createNode(a,b,c,d)},nd:function(a,b,c){if(16384===(a.mode&61440)){try{var d=ob(b,c)}catch(g){}if(d)for(var f in d.rc)throw new N(55);}delete a.parent.rc[a.name];a.parent.timestamp=Date.now();a.name=c;b.rc[c]=a;b.timestamp=a.parent.timestamp;a.parent=b},Wc:function(a,b){delete a.rc[b];a.timestamp=Date.now()},od:function(a,b){var c=ob(a,b),d;for(d in c.rc)throw new N(55);delete a.rc[b];a.timestamp=Date.now()},Rc:function(a){var b=[".",".."],c;for(c in a.rc)a.rc.hasOwnProperty(c)&&\nb.push(c);return b},Sc:function(a,b,c){a=P.createNode(a,b,41471,0);a.link=c;return a},Mc:function(a){if(40960!==(a.mode&61440))throw new N(28);return a.link}},sc:{read:function(a,b,c,d,f){var g=a.node.rc;if(f>=a.node.tc)return 0;a=Math.min(a.node.tc-f,d);if(8<a&&g.subarray)b.set(g.subarray(f,f+a),c);else for(d=0;d<a;d++)b[c+d]=g[f+d];return a},write:function(a,b,c,d,f,g){b.buffer===D.buffer&&(g=!1);if(!d)return 0;a=a.node;a.timestamp=Date.now();if(b.subarray&&(!a.rc||a.rc.subarray)){if(g)return a.rc=\nb.subarray(c,c+d),a.tc=d;if(0===a.tc&&0===f)return a.rc=b.slice(c,c+d),a.tc=d;if(f+d<=a.tc)return a.rc.set(b.subarray(c,c+d),f),d}P.ed(a,f+d);if(a.rc.subarray&&b.subarray)a.rc.set(b.subarray(c,c+d),f);else for(g=0;g<d;g++)a.rc[f+g]=b[c+g];a.tc=Math.max(a.tc,f+d);return d},Ec:function(a,b,c){1===c?b+=a.position:2===c&&32768===(a.node.mode&61440)&&(b+=a.node.tc);if(0>b)throw new N(28);return b},cd:function(a,b,c){P.ed(a.node,b+c);a.node.tc=Math.max(a.node.tc,b+c)},jd:function(a,b,c,d,f,g){if(0!==b)throw new N(28);\nif(32768!==(a.node.mode&61440))throw new N(43);a=a.node.rc;if(g&2||a.buffer!==Aa){if(0<d||d+c<a.length)a.subarray?a=a.subarray(d,d+c):a=Array.prototype.slice.call(a,d,d+c);d=!0;g=16384*Math.ceil(c/16384);for(b=ya(g);c<g;)D[b+c++]=0;c=b;if(!c)throw new N(48);D.set(a,c)}else d=!1,c=a.byteOffset;return{Hc:c,Ud:d}},ld:function(a,b,c,d,f){if(32768!==(a.node.mode&61440))throw new N(43);if(f&2)return 0;P.sc.write(a,b,0,d,c,!1);return 0}}},pb=null,qb={},rb=[],sb=1,Q=null,tb=!0,R={},N=null,nb={};\nfunction T(a,b){a=db("/",a);b=b||{};if(!a)return{path:"",node:null};var c={fd:!0,ad:0},d;for(d in c)void 0===b[d]&&(b[d]=c[d]);if(8<b.ad)throw new N(32);a=Za(a.split("/").filter(function(k){return!!k}),!1);var f=pb;c="/";for(d=0;d<a.length;d++){var g=d===a.length-1;if(g&&b.parent)break;f=ob(f,a[d]);c=$a(c+"/"+a[d]);f.Kc&&(!g||g&&b.fd)&&(f=f.Kc.root);if(!g||b.Pc)for(g=0;40960===(f.mode&61440);)if(f=ub(c),c=db(ab(c),f),f=T(c,{ad:b.ad}).node,40<g++)throw new N(32);}return{path:c,node:f}}\nfunction vb(a){for(var b;;){if(a===a.parent)return a=a.Bc.kd,b?"/"!==a[a.length-1]?a+"/"+b:a+b:a;b=b?a.name+"/"+b:a.name;a=a.parent}}function wb(a,b){for(var c=0,d=0;d<b.length;d++)c=(c<<5)-c+b.charCodeAt(d)|0;return(a+c>>>0)%Q.length}function ob(a,b){var c;if(c=(c=xb(a,"x"))?c:a.qc.Jc?0:2)throw new N(c,a);for(c=Q[wb(a.id,b)];c;c=c.Fc){var d=c.name;if(c.parent.id===a.id&&d===b)return c}return a.qc.Jc(a,b)}function mb(a,b,c,d){a=new yb(a,b,c,d);b=wb(a.parent.id,a.name);a.Fc=Q[b];return Q[b]=a}\nvar zb={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090};function Ab(a){var b=["r","w","rw"][a&3];a&512&&(b+="w");return b}function xb(a,b){if(tb)return 0;if(-1===b.indexOf("r")||a.mode&292){if(-1!==b.indexOf("w")&&!(a.mode&146)||-1!==b.indexOf("x")&&!(a.mode&73))return 2}else return 2;return 0}function Bb(a,b){try{return ob(a,b),20}catch(c){}return xb(a,"wx")}function Cb(a){var b=4096;for(a=a||0;a<=b;a++)if(!rb[a])return a;throw new N(33);}\nfunction Db(a,b){Eb||(Eb=function(){},Eb.prototype={});var c=new Eb,d;for(d in a)c[d]=a[d];a=c;b=Cb(b);a.Cc=b;return rb[b]=a}var lb={open:function(a){a.sc=qb[a.node.Lc].sc;a.sc.open&&a.sc.open(a)},Ec:function(){throw new N(70);}};function gb(a,b){qb[a]={sc:b}}\nfunction Fb(a,b){var c="/"===b,d=!b;if(c&&pb)throw new N(10);if(!c&&!d){var f=T(b,{fd:!1});b=f.path;f=f.node;if(f.Kc)throw new N(10);if(16384!==(f.mode&61440))throw new N(54);}b={type:a,be:{},kd:b,Cd:[]};a=a.Bc(b);a.Bc=b;b.root=a;c?pb=a:f&&(f.Kc=b,f.Bc&&f.Bc.Cd.push(b))}function Gb(a,b,c){var d=T(a,{parent:!0}).node;a=bb(a);if(!a||"."===a||".."===a)throw new N(28);var f=Bb(d,a);if(f)throw new N(f);if(!d.qc.Qc)throw new N(63);return d.qc.Qc(d,a,b,c)}function U(a){return Gb(a,16895,0)}\nfunction Hb(a,b,c){"undefined"===typeof c&&(c=b,b=438);Gb(a,b|8192,c)}function Ib(a,b){if(!db(a))throw new N(44);var c=T(b,{parent:!0}).node;if(!c)throw new N(44);b=bb(b);var d=Bb(c,b);if(d)throw new N(d);if(!c.qc.Sc)throw new N(63);c.qc.Sc(c,b,a)}function ub(a){a=T(a).node;if(!a)throw new N(44);if(!a.qc.Mc)throw new N(28);return db(vb(a.parent),a.qc.Mc(a))}function Jb(a,b){a=T(a,{Pc:!b}).node;if(!a)throw new N(44);if(!a.qc.yc)throw new N(63);return a.qc.yc(a)}function Kb(a){return Jb(a,!0)}\nfunction Lb(a,b,c,d){if(""===a)throw new N(44);if("string"===typeof b){var f=zb[b];if("undefined"===typeof f)throw Error("Unknown file open mode: "+b);b=f}c=b&64?("undefined"===typeof c?438:c)&4095|32768:0;if("object"===typeof a)var g=a;else{a=$a(a);try{g=T(a,{Pc:!(b&131072)}).node}catch(k){}}f=!1;if(b&64)if(g){if(b&128)throw new N(20);}else g=Gb(a,c,0),f=!0;if(!g)throw new N(44);8192===(g.mode&61440)&&(b&=-513);if(b&65536&&16384!==(g.mode&61440))throw new N(54);if(!f&&(c=g?40960===(g.mode&61440)?\n32:16384===(g.mode&61440)&&("r"!==Ab(b)||b&512)?31:xb(g,Ab(b)):44))throw new N(c);if(b&512){c=g;c="string"===typeof c?T(c,{Pc:!0}).node:c;if(!c.qc.Ac)throw new N(63);if(16384===(c.mode&61440))throw new N(31);if(32768!==(c.mode&61440))throw new N(28);if(f=xb(c,"w"))throw new N(f);c.qc.Ac(c,{size:0,timestamp:Date.now()})}b&=-131713;d=Db({node:g,path:vb(g),flags:b,seekable:!0,position:0,sc:g.sc,Rd:[],error:!1},d);d.sc.open&&d.sc.open(d);!e.logReadFiles||b&1||(Mb||(Mb={}),a in Mb||(Mb[a]=1,n("FS.trackingDelegate error on read file: "+\na)));try{R.onOpenFile&&(g=0,1!==(b&2097155)&&(g|=1),0!==(b&2097155)&&(g|=2),R.onOpenFile(a,g))}catch(k){n("FS.trackingDelegate[\'onOpenFile\'](\'"+a+"\', flags) threw an exception: "+k.message)}return d}function Nb(a,b,c){if(null===a.Cc)throw new N(8);if(!a.seekable||!a.sc.Ec)throw new N(70);if(0!=c&&1!=c&&2!=c)throw new N(28);a.position=a.sc.Ec(a,b,c);a.Rd=[];return a.position}\nfunction Ob(){N||(N=function(a,b){this.node=b;this.Hd=function(c){this.vc=c};this.Hd(a);this.message="FS error"},N.prototype=Error(),N.prototype.constructor=N,[44].forEach(function(a){nb[a]=new N(a);nb[a].stack="<generic error, no stack>"}))}var Pb;function Qb(a,b){var c=0;a&&(c|=365);b&&(c|=146);return c}\nfunction Rb(a,b,c){a=$a("/dev/"+a);var d=Qb(!!b,!!c);Sb||(Sb=64);var f=Sb++<<8|0;gb(f,{open:function(g){g.seekable=!1},close:function(){c&&c.buffer&&c.buffer.length&&c(10)},read:function(g,k,q,r){for(var p=0,t=0;t<r;t++){try{var w=b()}catch(C){throw new N(29);}if(void 0===w&&0===p)throw new N(6);if(null===w||void 0===w)break;p++;k[q+t]=w}p&&(g.node.timestamp=Date.now());return p},write:function(g,k,q,r){for(var p=0;p<r;p++)try{c(k[q+p])}catch(t){throw new N(29);}r&&(g.node.timestamp=Date.now());return p}});\nHb(a,d,f)}var Sb,V={},Eb,Mb;\nfunction Tb(a,b,c){try{var d=a(b)}catch(f){if(f&&f.node&&$a(b)!==$a(vb(f.node)))return-54;throw f;}G[c>>2]=d.td;G[c+4>>2]=0;G[c+8>>2]=d.Zc;G[c+12>>2]=d.mode;G[c+16>>2]=d.Ed;G[c+20>>2]=d.uid;G[c+24>>2]=d.wd;G[c+28>>2]=d.Lc;G[c+32>>2]=0;M=[d.size>>>0,(K=d.size,1<=+Math.abs(K)?0<K?(Math.min(+Math.floor(K/4294967296),4294967295)|0)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)];G[c+40>>2]=M[0];G[c+44>>2]=M[1];G[c+48>>2]=4096;G[c+52>>2]=d.rd;G[c+56>>2]=d.pd.getTime()/1E3|0;G[c+60>>2]=0;G[c+64>>2]=\nd.Dd.getTime()/1E3|0;G[c+68>>2]=0;G[c+72>>2]=d.sd.getTime()/1E3|0;G[c+76>>2]=0;M=[d.Zc>>>0,(K=d.Zc,1<=+Math.abs(K)?0<K?(Math.min(+Math.floor(K/4294967296),4294967295)|0)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)];G[c+80>>2]=M[0];G[c+84>>2]=M[1];return 0}var Ub=void 0;function Vb(){Ub+=4;return G[Ub-4>>2]}function Wb(a){a=rb[a];if(!a)throw new N(8);return a}\nfunction Xb(a,b){Yb=a;Zb=b;if($b)if(ac||(ac=!0),0==a)bc=function(){var d=Math.max(0,cc+b-Ta())|0;setTimeout(dc,d)};else if(1==a)bc=function(){ec(dc)};else if(2==a){if("undefined"===typeof setImmediate){var c=[];addEventListener("message",function(d){if("setimmediate"===d.data||"setimmediate"===d.data.target)d.stopPropagation(),c.shift()()},!0);setImmediate=function(d){c.push(d);void 0===e.setImmediates&&(e.setImmediates=[]);e.setImmediates.push(d);postMessage({target:"setimmediate"})}}bc=function(){setImmediate(dc)}}}\nfunction fc(a){function b(){if(c<gc){if(!noExitRuntime)try{hc(na)}catch(d){if(!(d instanceof ic))throw d;}return!1}return!0}oa(!$b,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");$b=a;var c=gc;ac=!1;dc=function(){if(!ma)if(0<jc.length){var d=Date.now(),f=jc.shift();f.vd(f.Oc);if(kc){var g=kc,k=0==g%1?g-1:Math.floor(g);kc=f.Vd?k:(8*g+(k+.5))/9}console.log(\'main loop blocker "\'+\nf.name+\'" took \'+(Date.now()-d)+" ms");e.setStatus&&(d=e.statusMessage||"Please wait...",f=kc,g=lc.Xd,f?f<g?e.setStatus(d+" ("+(g-f)+"/"+g+")"):e.setStatus(d):e.setStatus(""));b()&&setTimeout(dc,0)}else b()&&(mc=mc+1|0,1==Yb&&1<Zb&&0!=mc%Zb?bc():(0==Yb&&(cc=Ta()),ma||e.preMainLoop&&!1===e.preMainLoop()||(X(a),e.postMainLoop&&e.postMainLoop()),b()&&("object"===typeof SDL&&SDL.audio&&SDL.audio.Fd&&SDL.audio.Fd(),bc())))}}\nfunction X(a){try{a()}catch(b){if(!(b instanceof ic)&&"unwind"!==b)throw b&&"object"===typeof b&&b.stack&&n("exception thrown: "+[b,b.stack]),b;}}var ac=!1,bc=null,gc=0,$b=null,Yb=0,Zb=0,mc=0,jc=[],lc={},cc,dc,kc,nc=!1,oc=!1,pc=[];\nfunction qc(){function a(){oc=document.pointerLockElement===e.canvas||document.mozPointerLockElement===e.canvas||document.webkitPointerLockElement===e.canvas||document.msPointerLockElement===e.canvas}e.preloadPlugins||(e.preloadPlugins=[]);if(!rc){rc=!0;try{sc=!0}catch(c){sc=!1,console.log("warning: no blob constructor, cannot create blobs with mimetypes")}tc="undefined"!=typeof MozBlobBuilder?MozBlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:sc?null:console.log("warning: no BlobBuilder");\nuc="undefined"!=typeof window?window.URL?window.URL:window.webkitURL:void 0;e.md||"undefined"!==typeof uc||(console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."),e.md=!0);e.preloadPlugins.push({canHandle:function(c){return!e.md&&/\\.(jpg|jpeg|png|bmp)$/i.test(c)},handle:function(c,d,f,g){var k=null;if(sc)try{k=new Blob([c],{type:vc(d)}),k.size!==c.length&&(k=new Blob([(new Uint8Array(c)).buffer],{type:vc(d)}))}catch(p){ia("Blob constructor present but fails: "+\np+"; falling back to blob builder")}k||(k=new tc,k.append((new Uint8Array(c)).buffer),k=k.getBlob());var q=uc.createObjectURL(k),r=new Image;r.onload=function(){oa(r.complete,"Image "+d+" could not be decoded");var p=document.createElement("canvas");p.width=r.width;p.height=r.height;p.getContext("2d").drawImage(r,0,0);e.preloadedImages[d]=p;uc.revokeObjectURL(q);f&&f(c)};r.onerror=function(){console.log("Image "+q+" could not be decoded");g&&g()};r.src=q}});e.preloadPlugins.push({canHandle:function(c){return!e.ae&&\nc.substr(-4)in{".ogg":1,".wav":1,".mp3":1}},handle:function(c,d,f,g){function k(w){r||(r=!0,e.preloadedAudios[d]=w,f&&f(c))}function q(){r||(r=!0,e.preloadedAudios[d]=new Audio,g&&g())}var r=!1;if(sc){try{var p=new Blob([c],{type:vc(d)})}catch(w){return q()}p=uc.createObjectURL(p);var t=new Audio;t.addEventListener("canplaythrough",function(){k(t)},!1);t.onerror=function(){if(!r){console.log("warning: browser could not fully decode audio "+d+", trying slower base64 approach");for(var w="",C=0,h=0,\nu=0;u<c.length;u++)for(C=C<<8|c[u],h+=8;6<=h;){var y=C>>h-6&63;h-=6;w+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[y]}2==h?(w+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(C&3)<<4],w+="=="):4==h&&(w+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(C&15)<<2],w+="=");t.src="data:audio/x-"+d.substr(-3)+";base64,"+w;k(t)}};t.src=p;wc(function(){k(t)},1E4)}else return q()}});var b=e.canvas;b&&(b.requestPointerLock=b.requestPointerLock||\nb.mozRequestPointerLock||b.webkitRequestPointerLock||b.msRequestPointerLock||function(){},b.exitPointerLock=document.exitPointerLock||document.mozExitPointerLock||document.webkitExitPointerLock||document.msExitPointerLock||function(){},b.exitPointerLock=b.exitPointerLock.bind(document),document.addEventListener("pointerlockchange",a,!1),document.addEventListener("mozpointerlockchange",a,!1),document.addEventListener("webkitpointerlockchange",a,!1),document.addEventListener("mspointerlockchange",a,\n!1),e.elementPointerLock&&b.addEventListener("click",function(c){!oc&&e.canvas.requestPointerLock&&(e.canvas.requestPointerLock(),c.preventDefault())},!1))}}\nfunction xc(a,b,c,d){if(b&&e.Yc&&a==e.canvas)return e.Yc;var f;if(b){var g={antialias:!1,alpha:!1,Bd:1};if(d)for(var k in d)g[k]=d[k];if("undefined"!==typeof yc&&(f=zc(a,g)))var q=Ac[f].Xc}else q=a.getContext("2d");if(!q)return null;c&&(b||oa("undefined"===typeof Bc,"cannot set in module if GLctx is used, but we are a non-GL context that would replace it"),e.Yc=q,b&&(Cc=Ac[f],e.Yc=Bc=Cc&&Cc.Xc),e.ee=b,pc.forEach(function(r){r()}),qc());return q}var Dc=!1,Ec=void 0,Fc=void 0;\nfunction Gc(a,b){function c(){nc=!1;var g=d.parentNode;(document.fullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement||document.webkitCurrentFullScreenElement)===g?(d.exitFullscreen=Hc,Ec&&d.requestPointerLock(),nc=!0,Fc?("undefined"!=typeof SDL&&(G[SDL.screen>>2]=H[SDL.screen>>2]|8388608),Ic(e.canvas),Jc()):Ic(d)):(g.parentNode.insertBefore(d,g),g.parentNode.removeChild(g),Fc?("undefined"!=typeof SDL&&(G[SDL.screen>>2]=H[SDL.screen>>2]&\n-8388609),Ic(e.canvas),Jc()):Ic(d));if(e.onFullScreen)e.onFullScreen(nc);if(e.onFullscreen)e.onFullscreen(nc)}Ec=a;Fc=b;"undefined"===typeof Ec&&(Ec=!0);"undefined"===typeof Fc&&(Fc=!1);var d=e.canvas;Dc||(Dc=!0,document.addEventListener("fullscreenchange",c,!1),document.addEventListener("mozfullscreenchange",c,!1),document.addEventListener("webkitfullscreenchange",c,!1),document.addEventListener("MSFullscreenChange",c,!1));var f=document.createElement("div");d.parentNode.insertBefore(f,d);f.appendChild(d);\nf.requestFullscreen=f.requestFullscreen||f.mozRequestFullScreen||f.msRequestFullscreen||(f.webkitRequestFullscreen?function(){f.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)}:null)||(f.webkitRequestFullScreen?function(){f.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)}:null);f.requestFullscreen()}\nfunction Hc(){if(!nc)return!1;(document.exitFullscreen||document.cancelFullScreen||document.mozCancelFullScreen||document.msExitFullscreen||document.webkitCancelFullScreen||function(){}).apply(document,[]);return!0}var Kc=0;function ec(a){if("function"===typeof requestAnimationFrame)requestAnimationFrame(a);else{var b=Date.now();if(0===Kc)Kc=b+1E3/60;else for(;b+2>=Kc;)Kc+=1E3/60;setTimeout(a,Math.max(Kc-b,0))}}function Lc(a){ec(function(){X(a)})}function wc(a,b){setTimeout(function(){X(a)},b)}\nfunction vc(a){return{jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",bmp:"image/bmp",ogg:"audio/ogg",wav:"audio/wav",mp3:"audio/mpeg"}[a.substr(a.lastIndexOf(".")+1)]}var Mc=[];function Jc(){var a=e.canvas;Mc.forEach(function(b){b(a.width,a.height)})}\nfunction Ic(a,b,c){b&&c?(a.Sd=b,a.xd=c):(b=a.Sd,c=a.xd);var d=b,f=c;e.forcedAspectRatio&&0<e.forcedAspectRatio&&(d/f<e.forcedAspectRatio?d=Math.round(f*e.forcedAspectRatio):f=Math.round(d/e.forcedAspectRatio));if((document.fullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement||document.webkitCurrentFullScreenElement)===a.parentNode&&"undefined"!=typeof screen){var g=Math.min(screen.width/d,screen.height/f);d=Math.round(d*g);f=Math.round(f*\ng)}Fc?(a.width!=d&&(a.width=d),a.height!=f&&(a.height=f),"undefined"!=typeof a.style&&(a.style.removeProperty("width"),a.style.removeProperty("height"))):(a.width!=b&&(a.width=b),a.height!=c&&(a.height=c),"undefined"!=typeof a.style&&(d!=b||f!=c?(a.style.setProperty("width",d+"px","important"),a.style.setProperty("height",f+"px","important")):(a.style.removeProperty("width"),a.style.removeProperty("height"))))}var rc,sc,tc,uc;function Nc(){return!1}e._emscripten_is_main_browser_thread=Nc;var Oc=[];\nfunction Y(a,b){H[a>>2]=b;H[a+4>>2]=b/4294967296|0}var Pc;\nfunction Qc(a,b,c,d,f){function g(B){var O=0,L=0;B&&(L=v.response?v.response.byteLength:0,O=ya(L),A.set(new Uint8Array(v.response),O));H[a+12>>2]=O;Y(a+16,L)}var k=H[a+8>>2];if(k){var q=E(k),r=a+112,p=E(r);p||(p="GET");var t=H[r+52>>2],w=H[r+56>>2],C=!!H[r+60>>2],h=H[r+68>>2],u=H[r+72>>2];k=H[r+76>>2];var y=H[r+80>>2],J=H[r+84>>2];r=H[r+88>>2];var S=!!(t&1),W=!!(t&2);t=!!(t&64);h=h?E(h):void 0;u=u?E(u):void 0;var Xa=y?E(y):void 0,v=new XMLHttpRequest;v.withCredentials=C;v.open(p,q,!t,h,u);t||(v.timeout=\nw);v.ce=q;v.responseType="arraybuffer";y&&v.overrideMimeType(Xa);if(k)for(;;){p=H[k>>2];if(!p)break;q=H[k+4>>2];if(!q)break;k+=8;p=E(p);q=E(q);v.setRequestHeader(p,q)}Oc.push(v);H[a+0>>2]=Oc.length;k=J&&r?A.slice(J,J+r):null;v.onload=function(B){g(S&&!W);var O=v.response?v.response.byteLength:0;Y(a+24,0);O&&Y(a+32,O);F[a+40>>1]=v.readyState;F[a+42>>1]=v.status;v.statusText&&z(v.statusText,A,a+44,64);200<=v.status&&300>v.status?b&&b(a,v,B):c&&c(a,v,B)};v.onerror=function(B){g(S);var O=v.status;Y(a+\n24,0);Y(a+32,v.response?v.response.byteLength:0);F[a+40>>1]=v.readyState;F[a+42>>1]=O;c&&c(a,v,B)};v.ontimeout=function(B){c&&c(a,v,B)};v.onprogress=function(B){var O=S&&W&&v.response?v.response.byteLength:0,L=0;S&&W&&(L=ya(O),A.set(new Uint8Array(v.response),L));H[a+12>>2]=L;Y(a+16,O);Y(a+24,B.loaded-O);Y(a+32,B.total);F[a+40>>1]=v.readyState;3<=v.readyState&&0===v.status&&0<B.loaded&&(v.status=200);F[a+42>>1]=v.status;v.statusText&&z(v.statusText,A,a+44,64);d&&d(a,v,B);L&&Rc(L)};v.onreadystatechange=\nfunction(B){F[a+40>>1]=v.readyState;2<=v.readyState&&(F[a+42>>1]=v.status);f&&f(a,v,B)};try{v.send(k)}catch(B){c&&c(a,v,B)}}else c(a,0,"no url specified!")}\nfunction Sc(a,b,c,d){var f=Pc;if(f){var g=H[a+112+64>>2];g||(g=H[a+8>>2]);var k=E(g);try{var q=f.transaction(["FILES"],"readwrite").objectStore("FILES").put(b,k);q.onsuccess=function(){F[a+40>>1]=4;F[a+42>>1]=200;z("OK",A,a+44,64);c(a,0,k)};q.onerror=function(r){F[a+40>>1]=4;F[a+42>>1]=413;z("Payload Too Large",A,a+44,64);d(a,0,r)}}catch(r){d(a,0,r)}}else d(a,0,"IndexedDB not available!")}\nfunction Tc(a,b,c){var d=Pc;if(d){var f=H[a+112+64>>2];f||(f=H[a+8>>2]);f=E(f);try{var g=d.transaction(["FILES"],"readonly").objectStore("FILES").get(f);g.onsuccess=function(k){if(k.target.result){k=k.target.result;var q=k.byteLength||k.length,r=ya(q);A.set(new Uint8Array(k),r);H[a+12>>2]=r;Y(a+16,q);Y(a+24,0);Y(a+32,q);F[a+40>>1]=4;F[a+42>>1]=200;z("OK",A,a+44,64);b(a,0,k)}else F[a+40>>1]=4,F[a+42>>1]=404,z("Not Found",A,a+44,64),c(a,0,"no data")};g.onerror=function(k){F[a+40>>1]=4;F[a+42>>1]=404;\nz("Not Found",A,a+44,64);c(a,0,k)}}catch(k){c(a,0,k)}}else c(a,0,"IndexedDB not available!")}\nfunction Uc(a,b,c){var d=Pc;if(d){var f=H[a+112+64>>2];f||(f=H[a+8>>2]);f=E(f);try{var g=d.transaction(["FILES"],"readwrite").objectStore("FILES").delete(f);g.onsuccess=function(k){k=k.target.result;H[a+12>>2]=0;Y(a+16,0);Y(a+24,0);Y(a+32,0);F[a+40>>1]=4;F[a+42>>1]=200;z("OK",A,a+44,64);b(a,0,k)};g.onerror=function(k){F[a+40>>1]=4;F[a+42>>1]=404;z("Not Found",A,a+44,64);c(a,0,k)}}catch(k){c(a,0,k)}}else c(a,0,"IndexedDB not available!")}var Vc={};\nfunction Wc(){if(!Xc){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"===typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:da||"./this.program"},b;for(b in Vc)a[b]=Vc[b];var c=[];for(b in a)c.push(b+"="+a[b]);Xc=c}return Xc}var Xc;\nfunction Yc(a){var b=a.getExtension("ANGLE_instanced_arrays");b&&(a.vertexAttribDivisor=function(c,d){b.vertexAttribDivisorANGLE(c,d)},a.drawArraysInstanced=function(c,d,f,g){b.drawArraysInstancedANGLE(c,d,f,g)},a.drawElementsInstanced=function(c,d,f,g,k){b.drawElementsInstancedANGLE(c,d,f,g,k)})}\nfunction Zc(a){var b=a.getExtension("OES_vertex_array_object");b&&(a.createVertexArray=function(){return b.createVertexArrayOES()},a.deleteVertexArray=function(c){b.deleteVertexArrayOES(c)},a.bindVertexArray=function(c){b.bindVertexArrayOES(c)},a.isVertexArray=function(c){return b.isVertexArrayOES(c)})}function $c(a){var b=a.getExtension("WEBGL_draw_buffers");b&&(a.drawBuffers=function(c,d){b.drawBuffersWEBGL(c,d)})}var ad=1,bd=[],Ac=[];\nfunction cd(a){for(var b=ad++,c=a.length;c<b;c++)a[c]=null;return b}function zc(a,b){a.gd||(a.gd=a.getContext,a.getContext=function(d,f){f=a.gd(d,f);return"webgl"==d==f instanceof WebGLRenderingContext?f:null});var c=a.getContext("webgl",b);return c?dd(c,b):0}function dd(a,b){var c=cd(Ac),d={Zd:c,attributes:b,version:b.Bd,Xc:a};a.canvas&&(a.canvas.Td=d);Ac[c]=d;("undefined"===typeof b.ud||b.ud)&&ed(d);return c}\nfunction ed(a){a||(a=Cc);if(!a.zd){a.zd=!0;var b=a.Xc;Yc(b);Zc(b);$c(b);b.Wd=b.getExtension("EXT_disjoint_timer_query");b.$d=b.getExtension("WEBGL_multi_draw");(b.getSupportedExtensions()||[]).forEach(function(c){0>c.indexOf("lose_context")&&0>c.indexOf("debug")&&b.getExtension(c)})}}var yc={},fd,Cc;\nfunction gd(a,b){a=new Date(1E3*G[a>>2]);G[b>>2]=a.getUTCSeconds();G[b+4>>2]=a.getUTCMinutes();G[b+8>>2]=a.getUTCHours();G[b+12>>2]=a.getUTCDate();G[b+16>>2]=a.getUTCMonth();G[b+20>>2]=a.getUTCFullYear()-1900;G[b+24>>2]=a.getUTCDay();G[b+36>>2]=0;G[b+32>>2]=0;G[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;gd.bd||(gd.bd=xa("GMT"));G[b+40>>2]=gd.bd;return b}\nfunction hd(){function a(k){return(k=k.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?k[1]:"GMT"}if(!id){id=!0;var b=(new Date).getFullYear(),c=new Date(b,0,1),d=new Date(b,6,1);b=c.getTimezoneOffset();var f=d.getTimezoneOffset(),g=Math.max(b,f);G[jd()>>2]=60*g;G[kd()>>2]=Number(b!=f);c=a(c);d=a(d);c=xa(c);d=xa(d);f<b?(G[ld()>>2]=c,G[ld()+4>>2]=d):(G[ld()>>2]=d,G[ld()+4>>2]=c)}}var id;function md(a){return 0===a%4&&(0!==a%100||0===a%400)}function nd(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}\nvar od=[31,29,31,30,31,30,31,31,30,31,30,31],pd=[31,28,31,30,31,30,31,31,30,31,30,31];function qd(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=(md(a.getFullYear())?od:pd)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\nfunction rd(a,b,c,d){function f(h,u,y){for(h="number"===typeof h?h.toString():h||"";h.length<u;)h=y[0]+h;return h}function g(h,u){return f(h,u,"0")}function k(h,u){function y(S){return 0>S?-1:0<S?1:0}var J;0===(J=y(h.getFullYear()-u.getFullYear()))&&0===(J=y(h.getMonth()-u.getMonth()))&&(J=y(h.getDate()-u.getDate()));return J}function q(h){switch(h.getDay()){case 0:return new Date(h.getFullYear()-1,11,29);case 1:return h;case 2:return new Date(h.getFullYear(),0,3);case 3:return new Date(h.getFullYear(),\n0,2);case 4:return new Date(h.getFullYear(),0,1);case 5:return new Date(h.getFullYear()-1,11,31);case 6:return new Date(h.getFullYear()-1,11,30)}}function r(h){h=qd(new Date(h.xc+1900,0,1),h.Vc);var u=new Date(h.getFullYear()+1,0,4),y=q(new Date(h.getFullYear(),0,4));u=q(u);return 0>=k(y,h)?0>=k(u,h)?h.getFullYear()+1:h.getFullYear():h.getFullYear()-1}var p=G[d+40>>2];d={Pd:G[d>>2],Od:G[d+4>>2],Tc:G[d+8>>2],Nc:G[d+12>>2],Ic:G[d+16>>2],xc:G[d+20>>2],Uc:G[d+24>>2],Vc:G[d+28>>2],de:G[d+32>>2],Nd:G[d+\n36>>2],Qd:p?E(p):""};c=E(c);p={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var t in p)c=c.replace(new RegExp(t,"g"),p[t]);var w="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),\nC="January February March April May June July August September October November December".split(" ");p={"%a":function(h){return w[h.Uc].substring(0,3)},"%A":function(h){return w[h.Uc]},"%b":function(h){return C[h.Ic].substring(0,3)},"%B":function(h){return C[h.Ic]},"%C":function(h){return g((h.xc+1900)/100|0,2)},"%d":function(h){return g(h.Nc,2)},"%e":function(h){return f(h.Nc,2," ")},"%g":function(h){return r(h).toString().substring(2)},"%G":function(h){return r(h)},"%H":function(h){return g(h.Tc,\n2)},"%I":function(h){h=h.Tc;0==h?h=12:12<h&&(h-=12);return g(h,2)},"%j":function(h){return g(h.Nc+nd(md(h.xc+1900)?od:pd,h.Ic-1),3)},"%m":function(h){return g(h.Ic+1,2)},"%M":function(h){return g(h.Od,2)},"%n":function(){return"\\n"},"%p":function(h){return 0<=h.Tc&&12>h.Tc?"AM":"PM"},"%S":function(h){return g(h.Pd,2)},"%t":function(){return"\\t"},"%u":function(h){return h.Uc||7},"%U":function(h){var u=new Date(h.xc+1900,0,1),y=0===u.getDay()?u:qd(u,7-u.getDay());h=new Date(h.xc+1900,h.Ic,h.Nc);return 0>\nk(y,h)?g(Math.ceil((31-y.getDate()+(nd(md(h.getFullYear())?od:pd,h.getMonth()-1)-31)+h.getDate())/7),2):0===k(y,u)?"01":"00"},"%V":function(h){var u=new Date(h.xc+1901,0,4),y=q(new Date(h.xc+1900,0,4));u=q(u);var J=qd(new Date(h.xc+1900,0,1),h.Vc);return 0>k(J,y)?"53":0>=k(u,J)?"01":g(Math.ceil((y.getFullYear()<h.xc+1900?h.Vc+32-y.getDate():h.Vc+1-y.getDate())/7),2)},"%w":function(h){return h.Uc},"%W":function(h){var u=new Date(h.xc,0,1),y=1===u.getDay()?u:qd(u,0===u.getDay()?1:7-u.getDay()+1);h=\nnew Date(h.xc+1900,h.Ic,h.Nc);return 0>k(y,h)?g(Math.ceil((31-y.getDate()+(nd(md(h.getFullYear())?od:pd,h.getMonth()-1)-31)+h.getDate())/7),2):0===k(y,u)?"01":"00"},"%y":function(h){return(h.xc+1900).toString().substring(2)},"%Y":function(h){return h.xc+1900},"%z":function(h){h=h.Nd;var u=0<=h;h=Math.abs(h)/60;return(u?"+":"-")+String("0000"+(h/60*100+h%60)).slice(-4)},"%Z":function(h){return h.Qd},"%%":function(){return"%"}};for(t in p)0<=c.indexOf(t)&&(c=c.replace(new RegExp(t,"g"),p[t](d)));t=\nib(c,!1);if(t.length>b)return 0;D.set(t,a);return t.length-1}function yb(a,b,c,d){a||(a=this);this.parent=a;this.Bc=a.Bc;this.Kc=null;this.id=sb++;this.name=b;this.mode=c;this.qc={};this.sc={};this.Lc=d}Object.defineProperties(yb.prototype,{read:{get:function(){return 365===(this.mode&365)},set:function(a){a?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146===(this.mode&146)},set:function(a){a?this.mode|=146:this.mode&=-147}}});Ob();Q=Array(4096);Fb(P,"/");U("/tmp");U("/home");U("/home/web_user");\n(function(){U("/dev");gb(259,{read:function(){return 0},write:function(b,c,d,f){return f}});Hb("/dev/null",259);fb(1280,jb);fb(1536,kb);Hb("/dev/tty",1280);Hb("/dev/tty1",1536);var a=cb();Rb("random",a);Rb("urandom",a);U("/dev/shm");U("/dev/shm/tmp")})();\n(function(){U("/proc");var a=U("/proc/self");U("/proc/self/fd");Fb({Bc:function(){var b=mb(a,"fd",16895,73);b.qc={Jc:function(c,d){var f=rb[+d];if(!f)throw new N(8);c={parent:null,Bc:{kd:"fake"},qc:{Mc:function(){return f.path}}};return c.parent=c}};return b}},"/proc/self/fd")})();e.requestFullscreen=function(a,b){Gc(a,b)};e.requestAnimationFrame=function(a){ec(a)};e.setCanvasSize=function(a,b,c){Ic(e.canvas,a,b);c||Jc()};e.pauseMainLoop=function(){bc=null;gc++};\ne.resumeMainLoop=function(){gc++;var a=Yb,b=Zb,c=$b;$b=null;fc(c);Xb(a,b);bc()};e.getUserMedia=function(){window.getUserMedia||(window.getUserMedia=navigator.getUserMedia||navigator.mozGetUserMedia);window.getUserMedia(void 0)};e.createContext=function(a,b,c,d){return xc(a,b,c,d)};\n(function(a,b){try{var c=indexedDB.open("emscripten_filesystem",1)}catch(d){b(d);return}c.onupgradeneeded=function(d){d=d.target.result;d.objectStoreNames.contains("FILES")&&d.deleteObjectStore("FILES");d.createObjectStore("FILES")};c.onsuccess=function(d){a(d.target.result)};c.onerror=function(d){b(d)}})(function(a){Pc=a;Oa()},function(){Pc=!1;Oa()});"undefined"!==typeof ENVIRONMENT_IS_FETCH_WORKER&&ENVIRONMENT_IS_FETCH_WORKER||Na();var Bc;\nfunction ib(a,b){var c=Array(wa(a)+1);a=z(a,c,0,c.length);b&&(c.length=a);return c}\nvar sd={I:function(a,b){return Ua(a,b)},a:function(a){return ya(a+16)+16},b:function(a,b,c){(new Wa(a)).yd(b,c);Ya++;throw a;},e:function(a,b,c){Ub=c;try{var d=Wb(a);switch(b){case 0:var f=Vb();return 0>f?-28:Lb(d.path,d.flags,0,f).Cc;case 1:case 2:return 0;case 3:return d.flags;case 4:return f=Vb(),d.flags|=f,0;case 12:return f=Vb(),Ba[f+0>>1]=2,0;case 13:case 14:return 0;case 16:case 8:return-28;case 9:return G[Va()>>2]=28,-1;default:return-28}}catch(g){return"undefined"!==typeof V&&g instanceof\nN||x(g),-g.vc}},E:function(a,b,c){try{var d=Wb(a);if(!d.Dc){var f=T(d.path,{Pc:!0}).node;if(!f.qc.Rc)throw new N(54);var g=f.qc.Rc(f);d.Dc=g}a=0;for(var k=Nb(d,0,1),q=Math.floor(k/280);q<d.Dc.length&&a+280<=c;){var r=d.Dc[q];if("."===r[0]){var p=1;var t=4}else{var w=ob(d.node,r);p=w.id;t=8192===(w.mode&61440)?2:16384===(w.mode&61440)?4:40960===(w.mode&61440)?10:8}M=[p>>>0,(K=p,1<=+Math.abs(K)?0<K?(Math.min(+Math.floor(K/4294967296),4294967295)|0)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)];\nG[b+a>>2]=M[0];G[b+a+4>>2]=M[1];M=[280*(q+1)>>>0,(K=280*(q+1),1<=+Math.abs(K)?0<K?(Math.min(+Math.floor(K/4294967296),4294967295)|0)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)];G[b+a+8>>2]=M[0];G[b+a+12>>2]=M[1];Ba[b+a+16>>1]=280;D[b+a+18>>0]=t;z(r,A,b+a+19,256);a+=280;q+=1}Nb(d,280*q,0);return a}catch(C){return"undefined"!==typeof V&&C instanceof N||x(C),-C.vc}},n:function(){return 42},G:function(a,b,c){Ub=c;try{var d=Wb(a);switch(b){case 21509:case 21505:return d.uc?0:-59;case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:return d.uc?\n0:-59;case 21519:if(!d.uc)return-59;var f=Vb();return G[f>>2]=0;case 21520:return d.uc?-28:-59;case 21531:a=f=Vb();if(!d.sc.Ad)throw new N(59);return d.sc.Ad(d,b,a);case 21523:return d.uc?0:-59;case 21524:return d.uc?0:-59;default:x("bad ioctl syscall "+b)}}catch(g){return"undefined"!==typeof V&&g instanceof N||x(g),-g.vc}},H:function(a,b){try{return a=E(a),Tb(Kb,a,b)}catch(c){return"undefined"!==typeof V&&c instanceof N||x(c),-c.vc}},p:function(a,b,c){Ub=c;try{var d=E(a),f=c?Vb():0;return Lb(d,b,\nf).Cc}catch(g){return"undefined"!==typeof V&&g instanceof N||x(g),-g.vc}},J:function(a,b){try{return a=E(a),Tb(Jb,a,b)}catch(c){return"undefined"!==typeof V&&c instanceof N||x(c),-c.vc}},C:function(a,b){try{return a=E(a),b=E(b),Ib(a,b),0}catch(c){return"undefined"!==typeof V&&c instanceof N||x(c),-c.vc}},K:function(a){try{if(!a)return-21;var b={__size__:390,domainname:325,machine:260,nodename:65,release:130,sysname:0,version:195};za("Emscripten",a+b.sysname);za("emscripten",a+b.nodename);za("1.0",\na+b.release);za("#1",a+b.version);za("wasm32",a+b.machine);return 0}catch(c){return"undefined"!==typeof V&&c instanceof N||x(c),-c.vc}},D:function(a){try{a=E(a);var b=T(a,{parent:!0}).node,c=bb(a),d=ob(b,c);a:{try{var f=ob(b,c)}catch(p){var g=p.vc;break a}var k=xb(b,"wx");g=k?k:16384===(f.mode&61440)?31:0}if(g)throw new N(g);if(!b.qc.Wc)throw new N(63);if(d.Kc)throw new N(10);try{R.willDeletePath&&R.willDeletePath(a)}catch(p){n("FS.trackingDelegate[\'willDeletePath\'](\'"+a+"\') threw an exception: "+\np.message)}b.qc.Wc(b,c);var q=wb(d.parent.id,d.name);if(Q[q]===d)Q[q]=d.Fc;else for(var r=Q[q];r;){if(r.Fc===d){r.Fc=d.Fc;break}r=r.Fc}try{if(R.onDeletePath)R.onDeletePath(a)}catch(p){n("FS.trackingDelegate[\'onDeletePath\'](\'"+a+"\') threw an exception: "+p.message)}return 0}catch(p){return"undefined"!==typeof V&&p instanceof N||x(p),-p.vc}},L:function(a){delete Oc[a-1]},c:function(){x()},h:Ua,P:function(a,b){return a-b},R:function(){self.postMessage({t:"gfx"})},t:function(){var a=(new URL(location.origin)).hostname;\n0===a.length&&(a=(new URL(location.href.replace("blob:",""))).hostname);if(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(a))0===a.indexOf("10.")&&(a="10.*"),0===a.indexOf("192.168.")&&(a="192.168.*"),0===a.indexOf("172.")&&(a="172.*"),0===a.indexOf("127.")&&(a="127.*");else{var b=new RegExp("("+String.fromCharCode(92)+".ngrok"+String.fromCharCode(92)+".io)$","i");b.test(a)&&(a="*.ngrok.io");\nb=new RegExp("("+String.fromCharCode(92)+".ngrok-free"+String.fromCharCode(92)+".app)$","i");b.test(a)&&(a="*.ngrok.io");b=new RegExp("("+String.fromCharCode(92)+".arweb"+String.fromCharCode(92)+".app)$","i");b.test(a)&&(a="*.arweb.app")}b=wa(a)+1;var c=ya(b);z(a,A,c,b+1);return c},s:function(){self.postMessage({t:"licerr"})},l:function(a,b,c){function d(){I.get(a)(b)}0<=c?wc(d,c):Lc(d)},x:function(){return 2147483648},N:Nc,v:function(a,b,c){A.copyWithin(a,b,b+c)},w:function(a){var b=A.length;if(2147483648<\na)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);d=Math.max(a,d);0<d%65536&&(d+=65536-d%65536);a:{try{la.grow(Math.min(2147483648,d)-Aa.byteLength+65535>>>16);Ea();var f=1;break a}catch(g){}f=void 0}if(f)return!0}return!1},M:function(a,b,c,d,f){function g(B){Qc(B,k,p,t,r)}function k(B,O){Sc(B,O.response,function(L){X(function(){u?I.get(u)(L):b&&b(L)})},function(L){X(function(){u?I.get(u)(L):b&&b(L)})})}function q(B){Qc(B,w,p,t,r)}function r(B){X(function(){S?I.get(S)(B):\nf&&f(B)})}function p(B){X(function(){y?I.get(y)(B):c&&c(B)})}function t(B){X(function(){J?I.get(J)(B):d&&d(B)})}function w(B){X(function(){u?I.get(u)(B):b&&b(B)})}var C=a+112,h=E(C),u=H[C+36>>2],y=H[C+40>>2],J=H[C+44>>2],S=H[C+48>>2],W=H[C+52>>2],Xa=!!(W&4),v=!!(W&32);W=!!(W&16);if("EM_IDB_STORE"===h)h=H[C+84>>2],Sc(a,A.slice(h,h+H[C+88>>2]),w,p);else if("EM_IDB_DELETE"===h)Uc(a,w,p);else if(W){if(v)return 0;Qc(a,Xa?k:w,p,t,r)}else Tc(a,w,v?p:Xa?g:q);return a},A:function(a,b){try{var c=0;Wc().forEach(function(d,\nf){var g=b+c;G[a+4*f>>2]=g;za(d,g);c+=d.length+1});return 0}catch(d){return"undefined"!==typeof V&&d instanceof N||x(d),d.vc}},B:function(a,b){try{var c=Wc();G[a>>2]=c.length;var d=0;c.forEach(function(f){d+=f.length+1});G[b>>2]=d;return 0}catch(f){return"undefined"!==typeof V&&f instanceof N||x(f),f.vc}},O:function(a){hc(a)},g:function(a){try{var b=Wb(a);if(null===b.Cc)throw new N(8);b.Dc&&(b.Dc=null);try{b.sc.close&&b.sc.close(b)}catch(c){throw c;}finally{rb[b.Cc]=null}b.Cc=null;return 0}catch(c){return"undefined"!==\ntypeof V&&c instanceof N||x(c),c.vc}},F:function(a,b,c,d){try{a:{for(var f=Wb(a),g=a=0;g<c;g++){var k=G[b+(8*g+4)>>2],q=f,r=G[b+8*g>>2],p=k,t=void 0,w=D;if(0>p||0>t)throw new N(28);if(null===q.Cc)throw new N(8);if(1===(q.flags&2097155))throw new N(8);if(16384===(q.node.mode&61440))throw new N(31);if(!q.sc.read)throw new N(28);var C="undefined"!==typeof t;if(!C)t=q.position;else if(!q.seekable)throw new N(70);var h=q.sc.read(q,w,r,p,t);C||(q.position+=h);var u=h;if(0>u){var y=-1;break a}a+=u;if(u<\nk)break}y=a}G[d>>2]=y;return 0}catch(J){return"undefined"!==typeof V&&J instanceof N||x(J),J.vc}},u:function(a,b,c,d,f){try{var g=Wb(a);a=4294967296*c+(b>>>0);if(-9007199254740992>=a||9007199254740992<=a)return-61;Nb(g,a,d);M=[g.position>>>0,(K=g.position,1<=+Math.abs(K)?0<K?(Math.min(+Math.floor(K/4294967296),4294967295)|0)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)];G[f>>2]=M[0];G[f+4>>2]=M[1];g.Dc&&0===a&&0===d&&(g.Dc=null);return 0}catch(k){return"undefined"!==typeof V&&k instanceof N||\nx(k),k.vc}},k:function(a,b,c,d){try{a:{for(var f=Wb(a),g=a=0;g<c;g++){var k=f,q=G[b+8*g>>2],r=G[b+(8*g+4)>>2],p=void 0,t=D;if(0>r||0>p)throw new N(28);if(null===k.Cc)throw new N(8);if(0===(k.flags&2097155))throw new N(8);if(16384===(k.node.mode&61440))throw new N(31);if(!k.sc.write)throw new N(28);k.seekable&&k.flags&1024&&Nb(k,0,2);var w="undefined"!==typeof p;if(!w)p=k.position;else if(!k.seekable)throw new N(70);var C=k.sc.write(k,t,q,r,p,void 0);w||(k.position+=C);try{if(k.path&&R.onWriteToFile)R.onWriteToFile(k.path)}catch(y){n("FS.trackingDelegate[\'onWriteToFile\'](\'"+\nk.path+"\') threw an exception: "+y.message)}var h=C;if(0>h){var u=-1;break a}a+=h}u=a}G[d>>2]=u;return 0}catch(y){return"undefined"!==typeof V&&y instanceof N||x(y),y.vc}},f:function(a){var b=Date.now();G[a>>2]=b/1E3|0;G[a+4>>2]=b%1E3*1E3|0;return 0},m:function(a,b){Bc.bindTexture(a,bd[b])},o:function(a,b){for(var c=0;c<a;c++){var d=Bc.createTexture(),f=d&&cd(bd);d?(d.name=f,bd[f]=d):fd||(fd=1282);G[b+4*c>>2]=f}},i:function(a,b,c,d,f,g,k,q,r){var p=Bc,t=p.texImage2D;if(r){var w=q-5120;w=1==w?A:4==\nw?G:6==w?Ca:5==w||28922==w?H:F;var C=31-Math.clz32(w.BYTES_PER_ELEMENT);r=w.subarray(r>>C,r+f*(d*({5:3,6:4,8:2,29502:3,29504:4}[k-6402]||1)*(1<<C)+4-1&-4)>>C)}else r=null;t.call(p,a,b,c,d,f,g,k,q,r)},j:function(a,b,c){Bc.texParameteri(a,b,c)},r:gd,q:function(a,b){hd();a=new Date(1E3*G[a>>2]);G[b>>2]=a.getSeconds();G[b+4>>2]=a.getMinutes();G[b+8>>2]=a.getHours();G[b+12>>2]=a.getDate();G[b+16>>2]=a.getMonth();G[b+20>>2]=a.getFullYear()-1900;G[b+24>>2]=a.getDay();var c=new Date(a.getFullYear(),0,1);\nG[b+28>>2]=(a.getTime()-c.getTime())/864E5|0;G[b+36>>2]=-(60*a.getTimezoneOffset());var d=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();c=c.getTimezoneOffset();a=(d!=c&&a.getTimezoneOffset()==Math.min(c,d))|0;G[b+32>>2]=a;a=G[ld()+(a?4:0)>>2];G[b+40>>2]=a;return b},Q:function(){return 6},y:function(){return 28},z:function(a,b,c,d){return rd(a,b,c,d)},d:function(a){var b=Date.now()/1E3|0;a&&(G[a>>2]=b);return b}},Z=function(){function a(c){e.asm=c.exports;la=e.asm.S;Ea();I=e.asm.X;Ga.unshift(e.asm.T);\nOa()}var b={a:sd};Na();if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){return n("Module.instantiateWasm callback failed with error: "+c),!1}b=Ra(b);a(b[0]);return e.asm}();e.___wasm_call_ctors=Z.T;e._zappar_has_initialized=Z.U;e._zappar_invert=Z.V;e._zappar_loaded=Z.W;e._zappar_pipeline_create=Z.Y;e._zappar_pipeline_destroy=Z.Z;e._zappar_pipeline_camera_frame_submit=Z._;e._zappar_pipeline_camera_frame_submit_raw_pointer=Z.$;e._zappar_pipeline_frame_update=Z.aa;\ne._zappar_pipeline_camera_frame_user_data=Z.ba;e._zappar_pipeline_camera_model=Z.ca;e._zappar_pipeline_frame_number=Z.da;e._zappar_pipeline_motion_accelerometer_submit=Z.ea;e._zappar_pipeline_motion_rotation_rate_submit=Z.fa;e._zappar_pipeline_motion_attitude_submit=Z.ga;e._zappar_pipeline_motion_attitude_matrix_submit=Z.ha;e._zappar_pipeline_camera_frame_user_facing=Z.ia;e._zappar_pipeline_camera_frame_texture_matrix=Z.ja;e._zappar_pipeline_camera_pose_with_attitude=Z.ka;\ne._zappar_pipeline_camera_pose_with_origin=Z.la;e._zappar_pipeline_camera_frame_camera_attitude=Z.ma;e._zappar_pipeline_camera_frame_device_attitude=Z.na;e._zappar_pipeline_camera_frame_texture_gl=Z.oa;e._zappar_pipeline_camera_frame_upload_gl=Z.pa;e._zappar_pipeline_sequence_record_start=Z.qa;e._zappar_pipeline_sequence_record_stop=Z.ra;e._zappar_pipeline_sequence_record_clear=Z.sa;e._zappar_pipeline_sequence_record_device_attitude_matrices_set=Z.ta;e._zappar_pipeline_sequence_record_data_size=Z.ua;\ne._zappar_pipeline_sequence_record_data=Z.va;e._zappar_pipeline_process_gl=Z.wa;e._zappar_pipeline_camera_pose_default=Z.xa;e._zappar_instant_world_tracker_create=Z.ya;e._zappar_instant_world_tracker_destroy=Z.za;e._zappar_instant_world_tracker_anchor_pose_set_from_camera_offset_raw=Z.Aa;e._zappar_instant_world_tracker_anchor_pose_raw=Z.Ba;e._zappar_instant_world_tracker_enabled_set=Z.Ca;e._zappar_instant_world_tracker_enabled=Z.Da;e._zappar_image_tracker_create=Z.Ea;\ne._zappar_image_tracker_destroy=Z.Fa;e._zappar_image_tracker_target_load_from_memory=Z.Ga;e.__Z42zappar_image_tracker_target_load_from_fileP23zappar_image_tracker_tiPKc=Z.Ha;var Rc=e._free=Z.Ia;e._zappar_image_tracker_anchor_count=Z.Ja;e._zappar_image_tracker_anchor_id=Z.Ka;e._zappar_image_tracker_anchor_pose_raw=Z.La;e._zappar_image_tracker_enabled_set=Z.Ma;e._zappar_image_tracker_enabled=Z.Na;e._zappar_image_tracker_target_loaded_version=Z.Oa;\ne.__Z33zappar_image_tracker_target_countP23zappar_image_tracker_ti=Z.Pa;e.__Z46zappar_image_tracker_target_preview_compressedP23zappar_image_tracker_tii=Z.Qa;e.__Z51zappar_image_tracker_target_preview_compressed_sizeP23zappar_image_tracker_tii=Z.Ra;e.__Z55zappar_image_tracker_target_preview_compressed_mimetypeP23zappar_image_tracker_tii=Z.Sa;e.__Z40zappar_image_tracker_target_preview_rgbaP23zappar_image_tracker_tii=Z.Ta;\ne.__Z45zappar_image_tracker_target_preview_rgba_sizeP23zappar_image_tracker_tii=Z.Ua;e.__Z46zappar_image_tracker_target_preview_rgba_widthP23zappar_image_tracker_tii=Z.Va;e.__Z47zappar_image_tracker_target_preview_rgba_heightP23zappar_image_tracker_tii=Z.Wa;e.__Z38zappar_image_tracker_target_radius_topP23zappar_image_tracker_tii=Z.Xa;e.__Z41zappar_image_tracker_target_radius_bottomP23zappar_image_tracker_tii=Z.Ya;e.__Z39zappar_image_tracker_target_side_lengthP23zappar_image_tracker_tii=Z.Za;\ne.__Z49zappar_image_tracker_target_physical_scale_factorP23zappar_image_tracker_tii=Z._a;e.__Z49zappar_image_tracker_target_preview_mesh_verticesP23zappar_image_tracker_tii=Z.$a;e.__Z48zappar_image_tracker_target_preview_mesh_normalsP23zappar_image_tracker_tii=Z.ab;e.__Z44zappar_image_tracker_target_preview_mesh_uvsP23zappar_image_tracker_tii=Z.bb;e.__Z48zappar_image_tracker_target_preview_mesh_indicesP23zappar_image_tracker_tii=Z.cb;\ne.__Z54zappar_image_tracker_target_preview_mesh_vertices_sizeP23zappar_image_tracker_tii=Z.db;e.__Z53zappar_image_tracker_target_preview_mesh_normals_sizeP23zappar_image_tracker_tii=Z.eb;e.__Z49zappar_image_tracker_target_preview_mesh_uvs_sizeP23zappar_image_tracker_tii=Z.fb;e.__Z53zappar_image_tracker_target_preview_mesh_indices_sizeP23zappar_image_tracker_tii=Z.gb;e.__Z32zappar_image_tracker_target_typeP23zappar_image_tracker_tii=Z.hb;e._zappar_face_tracker_create=Z.ib;\ne._zappar_face_tracker_destroy=Z.jb;e._zappar_face_tracker_model_load_from_memory=Z.kb;e._zappar_face_tracker_anchor_count=Z.lb;e._zappar_face_tracker_anchor_id=Z.mb;e._zappar_face_tracker_anchor_pose_raw=Z.nb;e._zappar_face_tracker_anchor_identity_coefficients=Z.ob;e._zappar_face_tracker_anchor_expression_coefficients=Z.pb;e._zappar_face_tracker_enabled_set=Z.qb;e._zappar_face_tracker_enabled=Z.rb;e._zappar_face_tracker_max_faces_set=Z.sb;e._zappar_face_tracker_max_faces=Z.tb;\ne._zappar_face_tracker_model_loaded_version=Z.ub;e._zappar_face_landmark_create=Z.vb;e._zappar_face_landmark_destroy=Z.wb;e.__Z27zappar_face_landmark_updateP23zappar_face_landmark_tiPKfS2_i=Z.xb;e._zappar_face_landmark_anchor_pose=Z.yb;e._zappar_barcode_finder_create=Z.zb;e._zappar_barcode_finder_destroy=Z.Ab;e._zappar_barcode_finder_found_number=Z.Bb;e._zappar_barcode_finder_found_text=Z.Cb;e._zappar_barcode_finder_enabled_set=Z.Db;e._zappar_barcode_finder_enabled=Z.Eb;\ne._zappar_barcode_finder_found_format=Z.Fb;e._zappar_barcode_finder_formats=Z.Gb;e._zappar_barcode_finder_formats_set=Z.Hb;var ya=e._malloc=Z.Ib;e._zappar_face_mesh_create=Z.Jb;e._zappar_face_mesh_destroy=Z.Kb;e.__Z33zappar_face_mesh_load_from_memoryP19zappar_face_mesh_tiPKciiiii=Z.Lb;e.__Z29zappar_face_mesh_indices_sizeP19zappar_face_mesh_ti=Z.Mb;e.__Z25zappar_face_mesh_uvs_sizeP19zappar_face_mesh_ti=Z.Nb;e.__Z30zappar_face_mesh_vertices_sizeP19zappar_face_mesh_ti=Z.Ob;\ne.__Z31zappar_face_mesh_loaded_versionP19zappar_face_mesh_ti=Z.Pb;e.__Z25zappar_face_mesh_verticesP19zappar_face_mesh_ti=Z.Qb;e.__Z20zappar_face_mesh_uvsP19zappar_face_mesh_ti=Z.Rb;e.__Z24zappar_face_mesh_indicesP19zappar_face_mesh_ti=Z.Sb;e.__Z23zappar_face_mesh_updateP19zappar_face_mesh_tiPKfS2_i=Z.Tb;e.__Z29zappar_face_mesh_normals_sizeP19zappar_face_mesh_ti=Z.Ub;e.__Z24zappar_face_mesh_normalsP19zappar_face_mesh_ti=Z.Vb;e._zappar_camera_source_create=Z.Wb;e._zappar_camera_source_destroy=Z.Xb;\ne._zappar_camera_source_start=Z.Yb;e._zappar_camera_source_pause=Z.Zb;e._zappar_camera_default_device_id=Z._b;e._zappar_sequence_source_create=Z.$b;e.__Z28zappar_sequence_source_startP25zappar_sequence_source_ti=Z.ac;e.__Z39zappar_sequence_source_load_from_memoryP25zappar_sequence_source_tiPKci=Z.bc;e.__Z28zappar_sequence_source_pauseP25zappar_sequence_source_ti=Z.cc;e._zappar_sequence_source_destroy=Z.dc;e._zappar_sequence_source_max_playback_fps_set=Z.ec;e._zappar_log_level_set=Z.fc;\ne._zappar_log_level=Z.gc;e.__Z23zappar_log_redirect_setPFv18zappar_log_level_tPKcE=Z.hc;e._zappar_analytics_project_id_set=Z.ic;var Va=e.___errno_location=Z.jc,ld=e.__get_tzname=Z.kc,kd=e.__get_daylight=Z.lc,jd=e.__get_timezone=Z.mc,sa=e.stackSave=Z.nc,ta=e.stackRestore=Z.oc,ra=e.stackAlloc=Z.pc;e.cwrap=function(a,b,c,d){c=c||[];var f=c.every(function(g){return"number"===g});return"string"!==b&&f&&!d?pa(a):function(){return qa(a,b,c,arguments)}};\ne.setValue=function(a,b,c){c=c||"i8";"*"===c.charAt(c.length-1)&&(c="i32");switch(c){case "i1":D[a>>0]=b;break;case "i8":D[a>>0]=b;break;case "i16":Ba[a>>1]=b;break;case "i32":G[a>>2]=b;break;case "i64":M=[b>>>0,(K=b,1<=+Math.abs(K)?0<K?(Math.min(+Math.floor(K/4294967296),4294967295)|0)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)];G[a>>2]=M[0];G[a+4>>2]=M[1];break;case "float":Ca[a>>2]=b;break;case "double":Da[a>>3]=b;break;default:x("invalid type for setValue: "+c)}};\ne.getValue=function(a,b){b=b||"i8";"*"===b.charAt(b.length-1)&&(b="i32");switch(b){case "i1":return D[a>>0];case "i8":return D[a>>0];case "i16":return Ba[a>>1];case "i32":return G[a>>2];case "i64":return G[a>>2];case "float":return Ca[a>>2];case "double":return Da[a>>3];default:x("invalid type for getValue: "+b)}return null};e.UTF8ToString=E;var td;function ic(a){this.name="ExitStatus";this.message="Program terminated with exit("+a+")";this.status=a}Ma=function ud(){td||vd();td||(Ma=ud)};\nfunction vd(){function a(){if(!td&&(td=!0,e.calledRun=!0,!ma)){e.noFSInit||Pb||(Pb=!0,Ob(),e.stdin=e.stdin,e.stdout=e.stdout,e.stderr=e.stderr,e.stdin?Rb("stdin",e.stdin):Ib("/dev/tty","/dev/stdin"),e.stdout?Rb("stdout",null,e.stdout):Ib("/dev/tty","/dev/stdout"),e.stderr?Rb("stderr",null,e.stderr):Ib("/dev/tty1","/dev/stderr"),Lb("/dev/stdin",0),Lb("/dev/stdout",1),Lb("/dev/stderr",1));Sa(Ga);tb=!1;Sa(Ha);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for("function"==typeof e.postRun&&\n(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();Ia.unshift(b)}Sa(Ia)}}if(!(0<Ka)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)Ja();Sa(Fa);0<Ka||(e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1);a()},1)):a())}}e.run=vd;function hc(a){na=a;if(!noExitRuntime){if(e.onExit)e.onExit(a);ma=!0}ea(a,new ic(a))}if(e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();\nvd();\n\n\n  return ZCV\n}\n);\n})();\n/* harmony default export */ const zappar_cv = (ZCV);\n;// ./node_modules/@zappar/zappar-cv/lib/gen/zappar-cwrap.js\nfunction getRuntimeObject(mod) {\n    let log_level_wrapped = mod.cwrap("zappar_log_level", "number", []);\n    let log_level_set_wrapped = mod.cwrap("zappar_log_level_set", null, [\n        "number"\n    ]);\n    let analytics_project_id_set_wrapped = mod.cwrap("zappar_analytics_project_id_set", null, [\n        "string", "string"\n    ]);\n    let pipeline_create_wrapped = mod.cwrap("zappar_pipeline_create", "number", []);\n    let pipeline_destroy_wrapped = mod.cwrap("zappar_pipeline_destroy", null, ["number"]);\n    let pipeline_frame_update_wrapped = mod.cwrap("zappar_pipeline_frame_update", null, [\n        "number"\n    ]);\n    let pipeline_frame_number_wrapped = mod.cwrap("zappar_pipeline_frame_number", "number", [\n        "number"\n    ]);\n    let pipeline_camera_model_wrapped = mod.cwrap("zappar_pipeline_camera_model", "number", [\n        "number"\n    ]);\n    let pipeline_camera_frame_user_data_wrapped = mod.cwrap("zappar_pipeline_camera_frame_user_data", "number", [\n        "number"\n    ]);\n    let pipeline_camera_frame_submit_wrapped = mod.cwrap("zappar_pipeline_camera_frame_submit", null, [\n        "number",\n        "number", "number", "number", "number", "number", "number", "number", "number"\n    ]);\n    let pipeline_camera_frame_submit_raw_pointer_wrapped = mod.cwrap("zappar_pipeline_camera_frame_submit_raw_pointer", null, [\n        "number",\n        "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"\n    ]);\n    let pipeline_camera_frame_camera_attitude_wrapped = mod.cwrap("zappar_pipeline_camera_frame_camera_attitude", "number", [\n        "number"\n    ]);\n    let pipeline_camera_frame_device_attitude_wrapped = mod.cwrap("zappar_pipeline_camera_frame_device_attitude", "number", [\n        "number"\n    ]);\n    let pipeline_motion_accelerometer_submit_wrapped = mod.cwrap("zappar_pipeline_motion_accelerometer_submit", null, [\n        "number",\n        "number", "number", "number", "number"\n    ]);\n    let pipeline_motion_rotation_rate_submit_wrapped = mod.cwrap("zappar_pipeline_motion_rotation_rate_submit", null, [\n        "number",\n        "number", "number", "number", "number"\n    ]);\n    let pipeline_motion_attitude_submit_wrapped = mod.cwrap("zappar_pipeline_motion_attitude_submit", null, [\n        "number",\n        "number", "number", "number", "number"\n    ]);\n    let pipeline_motion_attitude_matrix_submit_wrapped = mod.cwrap("zappar_pipeline_motion_attitude_matrix_submit", null, [\n        "number",\n        "number"\n    ]);\n    let camera_source_create_wrapped = mod.cwrap("zappar_camera_source_create", "number", ["number", "string"]);\n    let camera_source_destroy_wrapped = mod.cwrap("zappar_camera_source_destroy", null, ["number"]);\n    let sequence_source_create_wrapped = mod.cwrap("zappar_sequence_source_create", "number", ["number"]);\n    let sequence_source_destroy_wrapped = mod.cwrap("zappar_sequence_source_destroy", null, ["number"]);\n    let image_tracker_create_wrapped = mod.cwrap("zappar_image_tracker_create", "number", ["number"]);\n    let image_tracker_destroy_wrapped = mod.cwrap("zappar_image_tracker_destroy", null, ["number"]);\n    let image_tracker_target_load_from_memory_wrapped = mod.cwrap("zappar_image_tracker_target_load_from_memory", null, [\n        "number",\n        "number", "number"\n    ]);\n    let image_tracker_target_loaded_version_wrapped = mod.cwrap("zappar_image_tracker_target_loaded_version", "number", [\n        "number"\n    ]);\n    let image_tracker_enabled_wrapped = mod.cwrap("zappar_image_tracker_enabled", "number", [\n        "number"\n    ]);\n    let image_tracker_enabled_set_wrapped = mod.cwrap("zappar_image_tracker_enabled_set", null, [\n        "number",\n        "number"\n    ]);\n    let image_tracker_anchor_count_wrapped = mod.cwrap("zappar_image_tracker_anchor_count", "number", [\n        "number"\n    ]);\n    let image_tracker_anchor_id_wrapped = mod.cwrap("zappar_image_tracker_anchor_id", "string", [\n        "number",\n        "number"\n    ]);\n    let image_tracker_anchor_pose_raw_wrapped = mod.cwrap("zappar_image_tracker_anchor_pose_raw", "number", [\n        "number",\n        "number"\n    ]);\n    let face_tracker_create_wrapped = mod.cwrap("zappar_face_tracker_create", "number", ["number"]);\n    let face_tracker_destroy_wrapped = mod.cwrap("zappar_face_tracker_destroy", null, ["number"]);\n    let face_tracker_model_load_from_memory_wrapped = mod.cwrap("zappar_face_tracker_model_load_from_memory", null, [\n        "number",\n        "number", "number"\n    ]);\n    let face_tracker_model_loaded_version_wrapped = mod.cwrap("zappar_face_tracker_model_loaded_version", "number", [\n        "number"\n    ]);\n    let face_tracker_enabled_set_wrapped = mod.cwrap("zappar_face_tracker_enabled_set", null, [\n        "number",\n        "number"\n    ]);\n    let face_tracker_enabled_wrapped = mod.cwrap("zappar_face_tracker_enabled", "number", [\n        "number"\n    ]);\n    let face_tracker_max_faces_set_wrapped = mod.cwrap("zappar_face_tracker_max_faces_set", null, [\n        "number",\n        "number"\n    ]);\n    let face_tracker_max_faces_wrapped = mod.cwrap("zappar_face_tracker_max_faces", "number", [\n        "number"\n    ]);\n    let face_tracker_anchor_count_wrapped = mod.cwrap("zappar_face_tracker_anchor_count", "number", [\n        "number"\n    ]);\n    let face_tracker_anchor_id_wrapped = mod.cwrap("zappar_face_tracker_anchor_id", "string", [\n        "number",\n        "number"\n    ]);\n    let face_tracker_anchor_pose_raw_wrapped = mod.cwrap("zappar_face_tracker_anchor_pose_raw", "number", [\n        "number",\n        "number"\n    ]);\n    let face_tracker_anchor_identity_coefficients_wrapped = mod.cwrap("zappar_face_tracker_anchor_identity_coefficients", "number", [\n        "number",\n        "number"\n    ]);\n    let face_tracker_anchor_expression_coefficients_wrapped = mod.cwrap("zappar_face_tracker_anchor_expression_coefficients", "number", [\n        "number",\n        "number"\n    ]);\n    let face_mesh_create_wrapped = mod.cwrap("zappar_face_mesh_create", "number", []);\n    let face_mesh_destroy_wrapped = mod.cwrap("zappar_face_mesh_destroy", null, ["number"]);\n    let face_landmark_create_wrapped = mod.cwrap("zappar_face_landmark_create", "number", ["number"]);\n    let face_landmark_destroy_wrapped = mod.cwrap("zappar_face_landmark_destroy", null, ["number"]);\n    let barcode_finder_create_wrapped = mod.cwrap("zappar_barcode_finder_create", "number", ["number"]);\n    let barcode_finder_destroy_wrapped = mod.cwrap("zappar_barcode_finder_destroy", null, ["number"]);\n    let barcode_finder_enabled_set_wrapped = mod.cwrap("zappar_barcode_finder_enabled_set", null, [\n        "number",\n        "number"\n    ]);\n    let barcode_finder_enabled_wrapped = mod.cwrap("zappar_barcode_finder_enabled", "number", [\n        "number"\n    ]);\n    let barcode_finder_found_number_wrapped = mod.cwrap("zappar_barcode_finder_found_number", "number", [\n        "number"\n    ]);\n    let barcode_finder_found_text_wrapped = mod.cwrap("zappar_barcode_finder_found_text", "string", [\n        "number",\n        "number"\n    ]);\n    let barcode_finder_found_format_wrapped = mod.cwrap("zappar_barcode_finder_found_format", "number", [\n        "number",\n        "number"\n    ]);\n    let barcode_finder_formats_wrapped = mod.cwrap("zappar_barcode_finder_formats", "number", [\n        "number"\n    ]);\n    let barcode_finder_formats_set_wrapped = mod.cwrap("zappar_barcode_finder_formats_set", null, [\n        "number",\n        "number"\n    ]);\n    let instant_world_tracker_create_wrapped = mod.cwrap("zappar_instant_world_tracker_create", "number", ["number"]);\n    let instant_world_tracker_destroy_wrapped = mod.cwrap("zappar_instant_world_tracker_destroy", null, ["number"]);\n    let instant_world_tracker_enabled_set_wrapped = mod.cwrap("zappar_instant_world_tracker_enabled_set", null, [\n        "number",\n        "number"\n    ]);\n    let instant_world_tracker_enabled_wrapped = mod.cwrap("zappar_instant_world_tracker_enabled", "number", [\n        "number"\n    ]);\n    let instant_world_tracker_anchor_pose_raw_wrapped = mod.cwrap("zappar_instant_world_tracker_anchor_pose_raw", "number", [\n        "number"\n    ]);\n    let instant_world_tracker_anchor_pose_set_from_camera_offset_raw_wrapped = mod.cwrap("zappar_instant_world_tracker_anchor_pose_set_from_camera_offset_raw", null, [\n        "number",\n        "number", "number", "number", "number"\n    ]);\n    let dataArrayArgLength = 32;\n    let dataArrayArg = mod._malloc(dataArrayArgLength);\n    let floatDataArrayArgLength = 16 * 4;\n    let floatDataArrayArg = mod._malloc(floatDataArrayArgLength);\n    let floatDataArraysByArgIndex = new Map();\n    let getFloatDataArrayForArgIndex = (indx, len) => {\n        let existing = floatDataArraysByArgIndex.get(indx);\n        if (!existing || existing[0] < len) {\n            if (existing)\n                mod._free(existing[1]);\n            existing = [len, mod._malloc(len)];\n            floatDataArraysByArgIndex.set(indx, existing);\n        }\n        return existing[1];\n    };\n    return {\n        log_level: () => {\n            let ret = log_level_wrapped();\n            return ret;\n        },\n        log_level_set: (level) => {\n            let arg_level = level;\n            let ret = log_level_set_wrapped(arg_level);\n            return ret;\n        },\n        analytics_project_id_set: (id, uid) => {\n            let arg_id = id;\n            let arg_uid = uid;\n            let ret = analytics_project_id_set_wrapped(arg_id, arg_uid);\n            return ret;\n        },\n        pipeline_create: () => {\n            return pipeline_create_wrapped();\n        },\n        pipeline_destroy: () => {\n            pipeline_destroy_wrapped();\n        },\n        pipeline_frame_update: (o) => {\n            let ret = pipeline_frame_update_wrapped(o);\n            return ret;\n        },\n        pipeline_frame_number: (o) => {\n            let ret = pipeline_frame_number_wrapped(o);\n            return ret;\n        },\n        pipeline_camera_model: (o) => {\n            let ret = pipeline_camera_model_wrapped(o);\n            let ab = new Float32Array(6);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 6 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        pipeline_camera_frame_user_data: (o) => {\n            let ret = pipeline_camera_frame_user_data_wrapped(o);\n            return ret;\n        },\n        pipeline_camera_frame_submit: (o, data, width, height, user_data, camera_to_device_transform, camera_model, user_facing) => {\n            if (dataArrayArgLength < data.byteLength) {\n                mod._free(dataArrayArg);\n                dataArrayArgLength = data.byteLength;\n                dataArrayArg = mod._malloc(dataArrayArgLength);\n            }\n            let arg_data = dataArrayArg;\n            let arg_len_data = data.byteLength;\n            mod.HEAPU8.set(new Uint8Array(data), dataArrayArg);\n            let arg_width = width;\n            let arg_height = height;\n            let arg_user_data = user_data;\n            let arg_camera_to_device_transform = getFloatDataArrayForArgIndex(4, camera_to_device_transform.byteLength);\n            mod.HEAPF32.set(camera_to_device_transform, arg_camera_to_device_transform / 4);\n            let arg_camera_model = getFloatDataArrayForArgIndex(5, camera_model.byteLength);\n            mod.HEAPF32.set(camera_model, arg_camera_model / 4);\n            let arg_user_facing = user_facing ? 1 : 0;\n            let ret = pipeline_camera_frame_submit_wrapped(o, arg_data, arg_len_data, arg_width, arg_height, arg_user_data, arg_camera_to_device_transform, arg_camera_model, arg_user_facing);\n            return ret;\n        },\n        pipeline_camera_frame_submit_raw_pointer: (o, data, dataLength, format, width, height, user_data, camera_to_device_transform, rotation, camera_model, user_facing) => {\n            let arg_data = data;\n            let arg_dataLength = dataLength;\n            let arg_format = format;\n            let arg_width = width;\n            let arg_height = height;\n            let arg_user_data = user_data;\n            let arg_camera_to_device_transform = getFloatDataArrayForArgIndex(6, camera_to_device_transform.byteLength);\n            mod.HEAPF32.set(camera_to_device_transform, arg_camera_to_device_transform / 4);\n            let arg_rotation = rotation;\n            let arg_camera_model = getFloatDataArrayForArgIndex(8, camera_model.byteLength);\n            mod.HEAPF32.set(camera_model, arg_camera_model / 4);\n            let arg_user_facing = user_facing ? 1 : 0;\n            let ret = pipeline_camera_frame_submit_raw_pointer_wrapped(o, arg_data, arg_dataLength, arg_format, arg_width, arg_height, arg_user_data, arg_camera_to_device_transform, arg_rotation, arg_camera_model, arg_user_facing);\n            return ret;\n        },\n        pipeline_camera_frame_camera_attitude: (o) => {\n            let ret = pipeline_camera_frame_camera_attitude_wrapped(o);\n            let ab = new Float32Array(16);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 16 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        pipeline_camera_frame_device_attitude: (o) => {\n            let ret = pipeline_camera_frame_device_attitude_wrapped(o);\n            let ab = new Float32Array(16);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 16 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        pipeline_motion_accelerometer_submit: (o, time, x, y, z) => {\n            let arg_time = time;\n            let arg_x = x;\n            let arg_y = y;\n            let arg_z = z;\n            let ret = pipeline_motion_accelerometer_submit_wrapped(o, arg_time, arg_x, arg_y, arg_z);\n            return ret;\n        },\n        pipeline_motion_rotation_rate_submit: (o, time, x, y, z) => {\n            let arg_time = time;\n            let arg_x = x;\n            let arg_y = y;\n            let arg_z = z;\n            let ret = pipeline_motion_rotation_rate_submit_wrapped(o, arg_time, arg_x, arg_y, arg_z);\n            return ret;\n        },\n        pipeline_motion_attitude_submit: (o, time, x, y, z) => {\n            let arg_time = time;\n            let arg_x = x;\n            let arg_y = y;\n            let arg_z = z;\n            let ret = pipeline_motion_attitude_submit_wrapped(o, arg_time, arg_x, arg_y, arg_z);\n            return ret;\n        },\n        pipeline_motion_attitude_matrix_submit: (o, mat) => {\n            let arg_mat = getFloatDataArrayForArgIndex(0, mat.byteLength);\n            mod.HEAPF32.set(mat, arg_mat / 4);\n            let ret = pipeline_motion_attitude_matrix_submit_wrapped(o, arg_mat);\n            return ret;\n        },\n        camera_source_create: (pipeline, device_id) => {\n            let arg_pipeline = pipeline;\n            let arg_device_id = device_id;\n            return camera_source_create_wrapped(arg_pipeline, arg_device_id);\n        },\n        camera_source_destroy: () => {\n            camera_source_destroy_wrapped();\n        },\n        sequence_source_create: (pipeline) => {\n            let arg_pipeline = pipeline;\n            return sequence_source_create_wrapped(arg_pipeline);\n        },\n        sequence_source_destroy: () => {\n            sequence_source_destroy_wrapped();\n        },\n        image_tracker_create: (pipeline) => {\n            let arg_pipeline = pipeline;\n            return image_tracker_create_wrapped(arg_pipeline);\n        },\n        image_tracker_destroy: () => {\n            image_tracker_destroy_wrapped();\n        },\n        image_tracker_target_load_from_memory: (o, data) => {\n            if (dataArrayArgLength < data.byteLength) {\n                mod._free(dataArrayArg);\n                dataArrayArgLength = data.byteLength;\n                dataArrayArg = mod._malloc(dataArrayArgLength);\n            }\n            let arg_data = dataArrayArg;\n            let arg_len_data = data.byteLength;\n            mod.HEAPU8.set(new Uint8Array(data), dataArrayArg);\n            let ret = image_tracker_target_load_from_memory_wrapped(o, arg_data, arg_len_data);\n            return ret;\n        },\n        image_tracker_target_loaded_version: (o) => {\n            let ret = image_tracker_target_loaded_version_wrapped(o);\n            return ret;\n        },\n        image_tracker_enabled: (o) => {\n            let ret = image_tracker_enabled_wrapped(o);\n            ret = ret === 1;\n            return ret;\n        },\n        image_tracker_enabled_set: (o, enabled) => {\n            let arg_enabled = enabled ? 1 : 0;\n            let ret = image_tracker_enabled_set_wrapped(o, arg_enabled);\n            return ret;\n        },\n        image_tracker_anchor_count: (o) => {\n            let ret = image_tracker_anchor_count_wrapped(o);\n            return ret;\n        },\n        image_tracker_anchor_id: (o, indx) => {\n            let arg_indx = indx;\n            let ret = image_tracker_anchor_id_wrapped(o, arg_indx);\n            return ret;\n        },\n        image_tracker_anchor_pose_raw: (o, indx) => {\n            let arg_indx = indx;\n            let ret = image_tracker_anchor_pose_raw_wrapped(o, arg_indx);\n            let ab = new Float32Array(16);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 16 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        face_tracker_create: (pipeline) => {\n            let arg_pipeline = pipeline;\n            return face_tracker_create_wrapped(arg_pipeline);\n        },\n        face_tracker_destroy: () => {\n            face_tracker_destroy_wrapped();\n        },\n        face_tracker_model_load_from_memory: (o, data) => {\n            if (dataArrayArgLength < data.byteLength) {\n                mod._free(dataArrayArg);\n                dataArrayArgLength = data.byteLength;\n                dataArrayArg = mod._malloc(dataArrayArgLength);\n            }\n            let arg_data = dataArrayArg;\n            let arg_len_data = data.byteLength;\n            mod.HEAPU8.set(new Uint8Array(data), dataArrayArg);\n            let ret = face_tracker_model_load_from_memory_wrapped(o, arg_data, arg_len_data);\n            return ret;\n        },\n        face_tracker_model_loaded_version: (o) => {\n            let ret = face_tracker_model_loaded_version_wrapped(o);\n            return ret;\n        },\n        face_tracker_enabled_set: (o, enabled) => {\n            let arg_enabled = enabled ? 1 : 0;\n            let ret = face_tracker_enabled_set_wrapped(o, arg_enabled);\n            return ret;\n        },\n        face_tracker_enabled: (o) => {\n            let ret = face_tracker_enabled_wrapped(o);\n            ret = ret === 1;\n            return ret;\n        },\n        face_tracker_max_faces_set: (o, num) => {\n            let arg_num = num;\n            let ret = face_tracker_max_faces_set_wrapped(o, arg_num);\n            return ret;\n        },\n        face_tracker_max_faces: (o) => {\n            let ret = face_tracker_max_faces_wrapped(o);\n            return ret;\n        },\n        face_tracker_anchor_count: (o) => {\n            let ret = face_tracker_anchor_count_wrapped(o);\n            return ret;\n        },\n        face_tracker_anchor_id: (o, indx) => {\n            let arg_indx = indx;\n            let ret = face_tracker_anchor_id_wrapped(o, arg_indx);\n            return ret;\n        },\n        face_tracker_anchor_pose_raw: (o, indx) => {\n            let arg_indx = indx;\n            let ret = face_tracker_anchor_pose_raw_wrapped(o, arg_indx);\n            let ab = new Float32Array(16);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 16 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        face_tracker_anchor_identity_coefficients: (o, indx) => {\n            let arg_indx = indx;\n            let ret = face_tracker_anchor_identity_coefficients_wrapped(o, arg_indx);\n            let ab = new Float32Array(50);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 50 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        face_tracker_anchor_expression_coefficients: (o, indx) => {\n            let arg_indx = indx;\n            let ret = face_tracker_anchor_expression_coefficients_wrapped(o, arg_indx);\n            let ab = new Float32Array(29);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 29 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        face_mesh_create: () => {\n            return face_mesh_create_wrapped();\n        },\n        face_mesh_destroy: () => {\n            face_mesh_destroy_wrapped();\n        },\n        face_landmark_create: (landmark) => {\n            let arg_landmark = landmark;\n            return face_landmark_create_wrapped(arg_landmark);\n        },\n        face_landmark_destroy: () => {\n            face_landmark_destroy_wrapped();\n        },\n        barcode_finder_create: (pipeline) => {\n            let arg_pipeline = pipeline;\n            return barcode_finder_create_wrapped(arg_pipeline);\n        },\n        barcode_finder_destroy: () => {\n            barcode_finder_destroy_wrapped();\n        },\n        barcode_finder_enabled_set: (o, enabled) => {\n            let arg_enabled = enabled ? 1 : 0;\n            let ret = barcode_finder_enabled_set_wrapped(o, arg_enabled);\n            return ret;\n        },\n        barcode_finder_enabled: (o) => {\n            let ret = barcode_finder_enabled_wrapped(o);\n            ret = ret === 1;\n            return ret;\n        },\n        barcode_finder_found_number: (o) => {\n            let ret = barcode_finder_found_number_wrapped(o);\n            return ret;\n        },\n        barcode_finder_found_text: (o, indx) => {\n            let arg_indx = indx;\n            let ret = barcode_finder_found_text_wrapped(o, arg_indx);\n            return ret;\n        },\n        barcode_finder_found_format: (o, indx) => {\n            let arg_indx = indx;\n            let ret = barcode_finder_found_format_wrapped(o, arg_indx);\n            return ret;\n        },\n        barcode_finder_formats: (o) => {\n            let ret = barcode_finder_formats_wrapped(o);\n            return ret;\n        },\n        barcode_finder_formats_set: (o, f) => {\n            let arg_f = f;\n            let ret = barcode_finder_formats_set_wrapped(o, arg_f);\n            return ret;\n        },\n        instant_world_tracker_create: (pipeline) => {\n            let arg_pipeline = pipeline;\n            return instant_world_tracker_create_wrapped(arg_pipeline);\n        },\n        instant_world_tracker_destroy: () => {\n            instant_world_tracker_destroy_wrapped();\n        },\n        instant_world_tracker_enabled_set: (o, enabled) => {\n            let arg_enabled = enabled ? 1 : 0;\n            let ret = instant_world_tracker_enabled_set_wrapped(o, arg_enabled);\n            return ret;\n        },\n        instant_world_tracker_enabled: (o) => {\n            let ret = instant_world_tracker_enabled_wrapped(o);\n            ret = ret === 1;\n            return ret;\n        },\n        instant_world_tracker_anchor_pose_raw: (o) => {\n            let ret = instant_world_tracker_anchor_pose_raw_wrapped(o);\n            let ab = new Float32Array(16);\n            ab.set(mod.HEAPF32.subarray(ret / 4, 16 + ret / 4));\n            ret = ab;\n            return ret;\n        },\n        instant_world_tracker_anchor_pose_set_from_camera_offset_raw: (o, x, y, z, orientation) => {\n            let arg_x = x;\n            let arg_y = y;\n            let arg_z = z;\n            let arg_orientation = orientation;\n            let ret = instant_world_tracker_anchor_pose_set_from_camera_offset_raw_wrapped(o, arg_x, arg_y, arg_z, arg_orientation);\n            return ret;\n        },\n    };\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/serializer.js\nclass MessageSerializer {\n    constructor(_messageSender) {\n        this._messageSender = _messageSender;\n        this._freeBufferPool = [];\n        this._buffer = new ArrayBuffer(16);\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u8cView = new Uint8ClampedArray(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        this._offset = 1;\n        this._startOffset = -1;\n        this._timeoutSet = false;\n        this._appender = {\n            int: i => this.int(i),\n            bool: i => this.int(i ? 1 : 0),\n            float: i => this.float(i),\n            string: i => this.string(i),\n            dataWithLength: i => this.arrayBuffer(i),\n            type: i => this.int(i),\n            matrix4x4: i => this.float32ArrayBuffer(i),\n            matrix3x3: i => this.float32ArrayBuffer(i),\n            identityCoefficients: i => this.float32ArrayBuffer(i),\n            expressionCoefficients: i => this.float32ArrayBuffer(i),\n            cameraModel: i => this.float32ArrayBuffer(i),\n            timestamp: i => this.double(i),\n            barcodeFormat: i => this.int(i),\n            faceLandmarkName: i => this.int(i),\n            instantTrackerTransformOrientation: i => this.int(i),\n            logLevel: i => this.int(i),\n        };\n        this._freeBufferPool.push(new ArrayBuffer(16));\n        this._freeBufferPool.push(new ArrayBuffer(16));\n    }\n    bufferReturn(ab) {\n        this._freeBufferPool.push(ab);\n    }\n    // public copySerializedData(): ArrayBuffer {\n    //     let data = this._buffer.slice(0, this._offset * Int32Array.BYTES_PER_ELEMENT);\n    //     this._offset = 0;\n    //     this._startOffset = -1;\n    //     return data;\n    // }\n    _ensureArrayBuffer(incremental) {\n        let requirement = (this._offset + incremental + 8) * 4;\n        if (this._buffer && this._buffer.byteLength >= requirement)\n            return;\n        let newBuffer = undefined;\n        // for (let i = 0; i < this._freeBufferPool.length; i++) {\n        //     if (this._freeBufferPool[i].byteLength > requirement) {\n        //         newBuffer = this._freeBufferPool[i];\n        //         this._freeBufferPool.splice(i, 1);\n        //         break;\n        //     }\n        // }\n        if (!newBuffer) {\n            let nextPow2 = requirement;\n            nextPow2--;\n            nextPow2 |= nextPow2 >> 1;\n            nextPow2 |= nextPow2 >> 2;\n            nextPow2 |= nextPow2 >> 4;\n            nextPow2 |= nextPow2 >> 8;\n            nextPow2 |= nextPow2 >> 16;\n            nextPow2++;\n            newBuffer = new ArrayBuffer(nextPow2);\n        }\n        let oldView = this._buffer ? this._i32View : undefined;\n        this._buffer = newBuffer;\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u8cView = new Uint8ClampedArray(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        if (oldView)\n            this._i32View.set(oldView.subarray(0, this._offset));\n        // this._offset = 1; // First int is whole length\n        // this._startOffset = -1;\n    }\n    sendMessage(messageId, cb) {\n        this._ensureArrayBuffer(4);\n        this._startOffset = this._offset;\n        this._i32View[this._offset + 1] = messageId;\n        this._offset += 2;\n        cb(this._appender);\n        this._i32View[this._startOffset] = this._offset - this._startOffset;\n        this._startOffset = -1;\n        this._sendOneTime();\n    }\n    _sendOneTime() {\n        if (this._timeoutSet === false) {\n            this._timeoutSet = true;\n            setTimeout(() => {\n                this._timeoutSet = false;\n                this._send();\n            }, 0);\n        }\n    }\n    _send() {\n        // Continue filling the current buffer unless have a new buffer to fill\n        if (this._freeBufferPool.length === 0) {\n            this._sendOneTime();\n            return;\n        }\n        this._i32View[0] = this._offset;\n        this._messageSender(this._buffer);\n        this._buffer = undefined;\n        this._buffer = this._freeBufferPool.pop();\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u8cView = new Uint8ClampedArray(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        this._offset = 1;\n        this._startOffset = -1;\n    }\n    int(arg) {\n        this._ensureArrayBuffer(1);\n        this._i32View[this._offset] = arg;\n        this._offset++;\n    }\n    double(arg) {\n        this._ensureArrayBuffer(2);\n        if (this._offset % 2 === 1)\n            this._offset++;\n        this._f64View[this._offset / 2] = arg;\n        this._offset += 2;\n    }\n    float(arg) {\n        this._ensureArrayBuffer(1);\n        this._f32View[this._offset] = arg;\n        this._offset++;\n    }\n    int32Array(args) {\n        this._ensureArrayBuffer(args.length);\n        for (let i = 0; i < args.length; ++i) {\n            this._i32View[this._offset + i] = args[i];\n        }\n        this._offset += args.length;\n    }\n    float32Array(args) {\n        this._ensureArrayBuffer(args.length);\n        for (let i = 0; i < args.length; ++i) {\n            this._f32View[this._offset + i] = args[i];\n        }\n        this._offset += args.length;\n    }\n    booleanArray(args) {\n        this._ensureArrayBuffer(args.length);\n        for (let i = 0; i < args.length; ++i) {\n            this._i32View[this._offset + i] = args[i] ? 1 : 0;\n        }\n        this._offset += args.length;\n    }\n    uint8ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.byteLength;\n        this._offset++;\n        this._u8View.set(data, this._offset * 4);\n        // Update the int32 offset\n        this._offset += (data.byteLength >> 2);\n        if ((data.byteLength & 3) !== 0)\n            this._offset++;\n    }\n    arrayBuffer(data) {\n        let view = new Uint8Array(data);\n        this.uint8ArrayBuffer(view);\n    }\n    uint8ClampedArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.byteLength;\n        this._offset++;\n        this._u8cView.set(data, this._offset * 4);\n        // Update the int32 offset\n        this._offset += (data.byteLength >> 2);\n        if ((data.byteLength & 3) !== 0)\n            this._offset++;\n    }\n    float32ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        this._f32View.set(data, this._offset);\n        this._offset += data.length;\n    }\n    uint16ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        let u16Offset = this._offset * 2;\n        this._u16View.set(data, u16Offset);\n        // Update the int32 offset\n        this._offset += (data.length >> 1);\n        if ((data.length & 1) !== 0)\n            this._offset++;\n    }\n    int32ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        this._i32View.set(data, this._offset);\n        this._offset += data.length;\n    }\n    uint32ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        this._u32View.set(data, this._offset);\n        this._offset += data.length;\n    }\n    string(data) {\n        let encoder = new TextEncoder();\n        let res = encoder.encode(data);\n        this._ensureArrayBuffer(res.byteLength / 4);\n        this._i32View[this._offset] = res.byteLength;\n        this._offset++;\n        this._u8View.set(res, this._offset * 4);\n        // Update the int32 offset\n        this._offset += (res.byteLength >> 2);\n        if ((res.byteLength & 3) !== 0)\n            this._offset++;\n    }\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/deserializer.js\nclass MessageDeserializer {\n    constructor() {\n        this._buffer = new ArrayBuffer(0);\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        this._offset = 0;\n        this._length = 0;\n        this._startOffset = -1;\n        this._processor = {\n            int: () => this._i32View[this._startOffset++],\n            bool: () => (this._i32View[this._startOffset++] === 1),\n            type: () => this._i32View[this._startOffset++],\n            float: () => this._f32View[this._startOffset++],\n            timestamp: () => {\n                if (this._startOffset % 2 === 1)\n                    this._startOffset++;\n                let ret = this._f64View[this._startOffset / 2];\n                this._startOffset += 2;\n                return ret;\n            },\n            string: () => {\n                let len = this._i32View[this._startOffset++];\n                let decoder = new TextDecoder();\n                let res = decoder.decode(new Uint8Array(this._buffer, this._startOffset * 4, len));\n                this._startOffset += (len >> 2);\n                if ((len & 3) !== 0)\n                    this._startOffset++;\n                return res;\n            },\n            dataWithLength: () => {\n                let len = this._i32View[this._startOffset++];\n                let ret = new Uint8Array(len);\n                ret.set(this._u8View.subarray(this._startOffset * 4, this._startOffset * 4 + len));\n                this._startOffset += (ret.byteLength >> 2);\n                if ((ret.byteLength & 3) !== 0)\n                    this._startOffset++;\n                return ret.buffer;\n            },\n            matrix4x4: () => {\n                let len = this._i32View[this._startOffset++];\n                let ret = new Float32Array(len);\n                ret.set(this._f32View.subarray(this._startOffset, this._startOffset + 16));\n                this._startOffset += len;\n                return ret;\n            },\n            matrix3x3: () => {\n                let len = this._i32View[this._startOffset++];\n                let ret = new Float32Array(len);\n                ret.set(this._f32View.subarray(this._startOffset, this._startOffset + 9));\n                this._startOffset += len;\n                return ret;\n            },\n            identityCoefficients: () => {\n                let len = this._i32View[this._startOffset++];\n                let ret = new Float32Array(len);\n                ret.set(this._f32View.subarray(this._startOffset, this._startOffset + 50));\n                this._startOffset += len;\n                return ret;\n            },\n            expressionCoefficients: () => {\n                let len = this._i32View[this._startOffset++];\n                let ret = new Float32Array(len);\n                ret.set(this._f32View.subarray(this._startOffset, this._startOffset + 29));\n                this._startOffset += len;\n                return ret;\n            },\n            cameraModel: () => {\n                let len = this._i32View[this._startOffset++];\n                let ret = new Float32Array(len);\n                ret.set(this._f32View.subarray(this._startOffset, this._startOffset + 6));\n                this._startOffset += len;\n                return ret;\n            },\n            barcodeFormat: () => this._i32View[this._startOffset++],\n            faceLandmarkName: () => this._i32View[this._startOffset++],\n            instantTrackerTransformOrientation: () => this._i32View[this._startOffset++],\n            logLevel: () => this._i32View[this._startOffset++],\n        };\n    }\n    setData(data) {\n        this._buffer = data;\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        this._offset = 0;\n        this._length = 0;\n        if (data.byteLength >= 4) {\n            this._offset = 1;\n            this._length = this._i32View[0];\n        }\n        this._startOffset = -1;\n    }\n    hasMessage() {\n        return this._offset + 1 < this._length;\n    }\n    forMessages(cb) {\n        while (this.hasMessage()) {\n            let len = this._i32View[this._offset];\n            let messageId = this._i32View[this._offset + 1];\n            this._startOffset = this._offset + 2;\n            this._offset += len;\n            cb(messageId, this._processor);\n        }\n    }\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/gen/zappar-server.js\n\n\nclass zappar_server {\n    constructor(_impl, _sender) {\n        this._impl = _impl;\n        this._sender = _sender;\n        this._deserializer = new MessageDeserializer();\n        this.serializersByPipelineId = new Map();\n        this._pipeline_id_by_pipeline_id = new Map();\n        this._pipeline_by_instance = new Map();\n        this._pipeline_id_by_camera_source_id = new Map();\n        this._camera_source_by_instance = new Map();\n        this._pipeline_id_by_sequence_source_id = new Map();\n        this._sequence_source_by_instance = new Map();\n        this._pipeline_id_by_image_tracker_id = new Map();\n        this._image_tracker_by_instance = new Map();\n        this._pipeline_id_by_face_tracker_id = new Map();\n        this._face_tracker_by_instance = new Map();\n        this._pipeline_id_by_face_mesh_id = new Map();\n        this._face_mesh_by_instance = new Map();\n        this._pipeline_id_by_face_landmark_id = new Map();\n        this._face_landmark_by_instance = new Map();\n        this._pipeline_id_by_barcode_finder_id = new Map();\n        this._barcode_finder_by_instance = new Map();\n        this._pipeline_id_by_instant_world_tracker_id = new Map();\n        this._instant_world_tracker_by_instance = new Map();\n    }\n    processBuffer(b) {\n        this._deserializer.setData(b);\n        this._deserializer.forMessages((messageId, msg) => {\n            switch (messageId) {\n                case 34: {\n                    this._impl.log_level_set(msg.logLevel());\n                    break;\n                }\n                case 31: {\n                    this._impl.analytics_project_id_set(msg.string(), msg.string());\n                    break;\n                }\n                case 27: {\n                    let clientId = msg.type();\n                    let handle = this._impl.pipeline_create();\n                    this._pipeline_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_pipeline_id.set(clientId, clientId);\n                    this.serializersByPipelineId.set(clientId, new MessageSerializer(ab => {\n                        this._sender(clientId, ab);\n                    }));\n                    break;\n                }\n                case 28: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_destroy(obj);\n                    this._pipeline_by_instance.delete(clientId);\n                    break;\n                }\n                case 9: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_frame_update(obj);\n                    break;\n                }\n                case 8: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_camera_frame_submit(obj, msg.dataWithLength(), msg.int(), msg.int(), msg.int(), msg.matrix4x4(), msg.cameraModel(), msg.bool());\n                    break;\n                }\n                case 10: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_motion_accelerometer_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n                    break;\n                }\n                case 11: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_motion_rotation_rate_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n                    break;\n                }\n                case 12: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_motion_attitude_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n                    break;\n                }\n                case 13: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_motion_attitude_matrix_submit(obj, msg.matrix4x4());\n                    break;\n                }\n                case 29: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let arg_device_id = msg.string();\n                    let handle = this._impl.camera_source_create(arg_pipeline, arg_device_id);\n                    this._camera_source_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_camera_source_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 30: {\n                    let clientId = msg.type();\n                    let obj = this._camera_source_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.camera_source_destroy(obj);\n                    this._camera_source_by_instance.delete(clientId);\n                    break;\n                }\n                case 35: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.sequence_source_create(arg_pipeline);\n                    this._sequence_source_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_sequence_source_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 36: {\n                    let clientId = msg.type();\n                    let obj = this._sequence_source_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.sequence_source_destroy(obj);\n                    this._sequence_source_by_instance.delete(clientId);\n                    break;\n                }\n                case 2: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.image_tracker_create(arg_pipeline);\n                    this._image_tracker_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_image_tracker_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 14: {\n                    let clientId = msg.type();\n                    let obj = this._image_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.image_tracker_destroy(obj);\n                    this._image_tracker_by_instance.delete(clientId);\n                    break;\n                }\n                case 4: {\n                    let clientId = msg.type();\n                    let obj = this._image_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.image_tracker_target_load_from_memory(obj, msg.dataWithLength());\n                    break;\n                }\n                case 3: {\n                    let clientId = msg.type();\n                    let obj = this._image_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.image_tracker_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 20: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.face_tracker_create(arg_pipeline);\n                    this._face_tracker_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_face_tracker_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 21: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_destroy(obj);\n                    this._face_tracker_by_instance.delete(clientId);\n                    break;\n                }\n                case 22: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_model_load_from_memory(obj, msg.dataWithLength());\n                    break;\n                }\n                case 23: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 24: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_max_faces_set(obj, msg.int());\n                    break;\n                }\n                case 25: {\n                    let clientId = msg.type();\n                    let handle = this._impl.face_mesh_create();\n                    this._face_mesh_by_instance.set(clientId, handle);\n                    break;\n                }\n                case 26: {\n                    let clientId = msg.type();\n                    let obj = this._face_mesh_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_mesh_destroy(obj);\n                    this._face_mesh_by_instance.delete(clientId);\n                    break;\n                }\n                case 32: {\n                    let clientId = msg.type();\n                    let arg_landmark = msg.faceLandmarkName();\n                    let handle = this._impl.face_landmark_create(arg_landmark);\n                    this._face_landmark_by_instance.set(clientId, handle);\n                    break;\n                }\n                case 33: {\n                    let clientId = msg.type();\n                    let obj = this._face_landmark_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_landmark_destroy(obj);\n                    this._face_landmark_by_instance.delete(clientId);\n                    break;\n                }\n                case 16: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.barcode_finder_create(arg_pipeline);\n                    this._barcode_finder_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_barcode_finder_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 17: {\n                    let clientId = msg.type();\n                    let obj = this._barcode_finder_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.barcode_finder_destroy(obj);\n                    this._barcode_finder_by_instance.delete(clientId);\n                    break;\n                }\n                case 18: {\n                    let clientId = msg.type();\n                    let obj = this._barcode_finder_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.barcode_finder_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 19: {\n                    let clientId = msg.type();\n                    let obj = this._barcode_finder_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.barcode_finder_formats_set(obj, msg.barcodeFormat());\n                    break;\n                }\n                case 5: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.instant_world_tracker_create(arg_pipeline);\n                    this._instant_world_tracker_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_instant_world_tracker_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 15: {\n                    let clientId = msg.type();\n                    let obj = this._instant_world_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.instant_world_tracker_destroy(obj);\n                    this._instant_world_tracker_by_instance.delete(clientId);\n                    break;\n                }\n                case 6: {\n                    let clientId = msg.type();\n                    let obj = this._instant_world_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.instant_world_tracker_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 7: {\n                    let clientId = msg.type();\n                    let obj = this._instant_world_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.instant_world_tracker_anchor_pose_set_from_camera_offset_raw(obj, msg.float(), msg.float(), msg.float(), msg.instantTrackerTransformOrientation());\n                    break;\n                }\n            }\n        });\n    }\n    exploreState() {\n        for (let [k, v] of this._pipeline_by_instance) {\n            let pipeline = this._pipeline_id_by_pipeline_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(7, msg => {\n                msg.type(k);\n                msg.int(this._impl.pipeline_frame_number(v));\n            });\n            serializer.sendMessage(6, msg => {\n                msg.type(k);\n                msg.cameraModel(this._impl.pipeline_camera_model(v));\n            });\n            serializer.sendMessage(5, msg => {\n                msg.type(k);\n                msg.int(this._impl.pipeline_camera_frame_user_data(v));\n            });\n            serializer.sendMessage(11, msg => {\n                msg.type(k);\n                msg.matrix4x4(this._impl.pipeline_camera_frame_camera_attitude(v));\n            });\n            serializer.sendMessage(12, msg => {\n                msg.type(k);\n                msg.matrix4x4(this._impl.pipeline_camera_frame_device_attitude(v));\n            });\n        }\n        for (let [k, v] of this._camera_source_by_instance) {\n            let pipeline = this._pipeline_id_by_camera_source_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n        }\n        for (let [k, v] of this._sequence_source_by_instance) {\n            let pipeline = this._pipeline_id_by_sequence_source_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n        }\n        for (let [k, v] of this._image_tracker_by_instance) {\n            let pipeline = this._pipeline_id_by_image_tracker_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(19, msg => {\n                msg.type(k);\n                msg.int(this._impl.image_tracker_target_loaded_version(v));\n            });\n            serializer.sendMessage(1, msg => {\n                msg.type(k);\n                msg.int(this._impl.image_tracker_anchor_count(v));\n            });\n            for (let i = 0; i < this._impl.image_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(2, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.string(this._impl.image_tracker_anchor_id(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.image_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(3, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.matrix4x4(this._impl.image_tracker_anchor_pose_raw(v, i));\n                });\n            }\n        }\n        for (let [k, v] of this._face_tracker_by_instance) {\n            let pipeline = this._pipeline_id_by_face_tracker_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(18, msg => {\n                msg.type(k);\n                msg.int(this._impl.face_tracker_model_loaded_version(v));\n            });\n            serializer.sendMessage(13, msg => {\n                msg.type(k);\n                msg.int(this._impl.face_tracker_anchor_count(v));\n            });\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(14, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.string(this._impl.face_tracker_anchor_id(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(15, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.matrix4x4(this._impl.face_tracker_anchor_pose_raw(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(16, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.identityCoefficients(this._impl.face_tracker_anchor_identity_coefficients(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(17, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.expressionCoefficients(this._impl.face_tracker_anchor_expression_coefficients(v, i));\n                });\n            }\n        }\n        for (let [k, v] of this._face_mesh_by_instance) {\n            let pipeline = this._pipeline_id_by_face_mesh_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n        }\n        for (let [k, v] of this._face_landmark_by_instance) {\n            let pipeline = this._pipeline_id_by_face_landmark_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n        }\n        for (let [k, v] of this._barcode_finder_by_instance) {\n            let pipeline = this._pipeline_id_by_barcode_finder_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(8, msg => {\n                msg.type(k);\n                msg.int(this._impl.barcode_finder_found_number(v));\n            });\n            for (let i = 0; i < this._impl.barcode_finder_found_number(v); i++) {\n                serializer.sendMessage(9, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.string(this._impl.barcode_finder_found_text(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.barcode_finder_found_number(v); i++) {\n                serializer.sendMessage(10, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.barcodeFormat(this._impl.barcode_finder_found_format(v, i));\n                });\n            }\n        }\n        for (let [k, v] of this._instant_world_tracker_by_instance) {\n            let pipeline = this._pipeline_id_by_instant_world_tracker_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(4, msg => {\n                msg.type(k);\n                msg.matrix4x4(this._impl.instant_world_tracker_anchor_pose_raw(v));\n            });\n        }\n    }\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/event.js\nclass Event {\n    constructor() {\n        this._funcs = [];\n    }\n    bind(f) {\n        this._funcs.push(f);\n    }\n    unbind(f) {\n        let indx = this._funcs.indexOf(f);\n        if (indx > -1) {\n            this._funcs.splice(indx, 1);\n        }\n    }\n    emit() {\n        for (var i = 0, total = this._funcs.length; i < total; i++) {\n            this._funcs[i]();\n        }\n    }\n}\nclass Event1 {\n    constructor() {\n        this._funcs = [];\n    }\n    bind(f) {\n        this._funcs.push(f);\n    }\n    unbind(f) {\n        let indx = this._funcs.indexOf(f);\n        if (indx > -1) {\n            this._funcs.splice(indx, 1);\n        }\n    }\n    emit(a) {\n        for (var i = 0, total = this._funcs.length; i < total; i++) {\n            this._funcs[i](a);\n        }\n    }\n}\nclass Event2 {\n    constructor() {\n        this._funcs = [];\n    }\n    bind(f) {\n        this._funcs.push(f);\n    }\n    unbind(f) {\n        let indx = this._funcs.indexOf(f);\n        if (indx > -1) {\n            this._funcs.splice(indx, 1);\n        }\n    }\n    emit(a, b) {\n        for (var i = 0, total = this._funcs.length; i < total; i++) {\n            this._funcs[i](a, b);\n        }\n    }\n}\nclass Event3 {\n    constructor() {\n        this._funcs = [];\n    }\n    bind(f) {\n        this._funcs.push(f);\n    }\n    unbind(f) {\n        let indx = this._funcs.indexOf(f);\n        if (indx > -1) {\n            this._funcs.splice(indx, 1);\n        }\n    }\n    emit(a, b, c) {\n        for (var i = 0, total = this._funcs.length; i < total; i++) {\n            this._funcs[i](a, b, c);\n        }\n    }\n}\nclass Event5 {\n    constructor() {\n        this._funcs = [];\n    }\n    bind(f) {\n        this._funcs.push(f);\n    }\n    unbind(f) {\n        let indx = this._funcs.indexOf(f);\n        if (indx > -1) {\n            this._funcs.splice(indx, 1);\n        }\n    }\n    emit(a, b, c, d, e) {\n        for (var i = 0, total = this._funcs.length; i < total; i++) {\n            this._funcs[i](a, b, c, d, e);\n        }\n    }\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/messages.js\n\nclass MsgManager {\n    constructor() {\n        this.onOutgoingMessage = new Event();\n        this.onIncomingMessage = new Event1();\n        this._outgoingMessages = [];\n    }\n    postIncomingMessage(msg) {\n        this.onIncomingMessage.emit(msg);\n    }\n    postOutgoingMessage(msg, trans) {\n        this._outgoingMessages.push({\n            msg: msg,\n            transferables: trans\n        });\n        this.onOutgoingMessage.emit();\n    }\n    getOutgoingMessages() {\n        let ret = this._outgoingMessages;\n        this._outgoingMessages = [];\n        return ret;\n    }\n}\n\n;// ./node_modules/gl-matrix/esm/common.js\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \'undefined\' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n;// ./node_modules/gl-matrix/esm/mat4.js\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction create() {\n  var out = new ARRAY_TYPE(16);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nfunction getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL\'s clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nvar perspective = (/* unused pure expression or super */ null && (perspectiveNO));\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal\'s clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL\'s clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nvar ortho = (/* unused pure expression or super */ null && (orthoNO));\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal\'s clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nfunction str(a) {\n  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4\'s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix\'s elements by\n * @returns {mat4} out\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4\'s after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b\'s elements by before adding\n * @returns {mat4} out\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction mat4_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nvar mul = (/* unused pure expression or super */ null && (multiply));\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nvar sub = (/* unused pure expression or super */ null && (subtract));\n;// ./node_modules/@zappar/zappar-cv/lib/gen/zappar-native.js\nvar barcode_format_t;\n(function (barcode_format_t) {\n    barcode_format_t[barcode_format_t["UNKNOWN"] = 131072] = "UNKNOWN";\n    barcode_format_t[barcode_format_t["AZTEC"] = 1] = "AZTEC";\n    barcode_format_t[barcode_format_t["CODABAR"] = 2] = "CODABAR";\n    barcode_format_t[barcode_format_t["CODE_39"] = 4] = "CODE_39";\n    barcode_format_t[barcode_format_t["CODE_93"] = 8] = "CODE_93";\n    barcode_format_t[barcode_format_t["CODE_128"] = 16] = "CODE_128";\n    barcode_format_t[barcode_format_t["DATA_MATRIX"] = 32] = "DATA_MATRIX";\n    barcode_format_t[barcode_format_t["EAN_8"] = 64] = "EAN_8";\n    barcode_format_t[barcode_format_t["EAN_13"] = 128] = "EAN_13";\n    barcode_format_t[barcode_format_t["ITF"] = 256] = "ITF";\n    barcode_format_t[barcode_format_t["MAXICODE"] = 512] = "MAXICODE";\n    barcode_format_t[barcode_format_t["PDF_417"] = 1024] = "PDF_417";\n    barcode_format_t[barcode_format_t["QR_CODE"] = 2048] = "QR_CODE";\n    barcode_format_t[barcode_format_t["RSS_14"] = 4096] = "RSS_14";\n    barcode_format_t[barcode_format_t["RSS_EXPANDED"] = 8192] = "RSS_EXPANDED";\n    barcode_format_t[barcode_format_t["UPC_A"] = 16384] = "UPC_A";\n    barcode_format_t[barcode_format_t["UPC_E"] = 32768] = "UPC_E";\n    barcode_format_t[barcode_format_t["UPC_EAN_EXTENSION"] = 65536] = "UPC_EAN_EXTENSION";\n    barcode_format_t[barcode_format_t["ALL"] = 131071] = "ALL";\n})(barcode_format_t || (barcode_format_t = {}));\n;\nvar face_landmark_name_t;\n(function (face_landmark_name_t) {\n    face_landmark_name_t[face_landmark_name_t["EYE_LEFT"] = 0] = "EYE_LEFT";\n    face_landmark_name_t[face_landmark_name_t["EYE_RIGHT"] = 1] = "EYE_RIGHT";\n    face_landmark_name_t[face_landmark_name_t["EAR_LEFT"] = 2] = "EAR_LEFT";\n    face_landmark_name_t[face_landmark_name_t["EAR_RIGHT"] = 3] = "EAR_RIGHT";\n    face_landmark_name_t[face_landmark_name_t["NOSE_BRIDGE"] = 4] = "NOSE_BRIDGE";\n    face_landmark_name_t[face_landmark_name_t["NOSE_TIP"] = 5] = "NOSE_TIP";\n    face_landmark_name_t[face_landmark_name_t["NOSE_BASE"] = 6] = "NOSE_BASE";\n    face_landmark_name_t[face_landmark_name_t["LIP_TOP"] = 7] = "LIP_TOP";\n    face_landmark_name_t[face_landmark_name_t["LIP_BOTTOM"] = 8] = "LIP_BOTTOM";\n    face_landmark_name_t[face_landmark_name_t["MOUTH_CENTER"] = 9] = "MOUTH_CENTER";\n    face_landmark_name_t[face_landmark_name_t["CHIN"] = 10] = "CHIN";\n    face_landmark_name_t[face_landmark_name_t["EYEBROW_LEFT"] = 11] = "EYEBROW_LEFT";\n    face_landmark_name_t[face_landmark_name_t["EYEBROW_RIGHT"] = 12] = "EYEBROW_RIGHT";\n})(face_landmark_name_t || (face_landmark_name_t = {}));\n;\nvar instant_world_tracker_transform_orientation_t;\n(function (instant_world_tracker_transform_orientation_t) {\n    instant_world_tracker_transform_orientation_t[instant_world_tracker_transform_orientation_t["WORLD"] = 3] = "WORLD";\n    instant_world_tracker_transform_orientation_t[instant_world_tracker_transform_orientation_t["MINUS_Z_AWAY_FROM_USER"] = 4] = "MINUS_Z_AWAY_FROM_USER";\n    instant_world_tracker_transform_orientation_t[instant_world_tracker_transform_orientation_t["MINUS_Z_HEADING"] = 5] = "MINUS_Z_HEADING";\n    instant_world_tracker_transform_orientation_t[instant_world_tracker_transform_orientation_t["UNCHANGED"] = 6] = "UNCHANGED";\n})(instant_world_tracker_transform_orientation_t || (instant_world_tracker_transform_orientation_t = {}));\n;\nvar log_level_t;\n(function (log_level_t) {\n    log_level_t[log_level_t["LOG_LEVEL_NONE"] = 0] = "LOG_LEVEL_NONE";\n    log_level_t[log_level_t["LOG_LEVEL_ERROR"] = 1] = "LOG_LEVEL_ERROR";\n    log_level_t[log_level_t["LOG_LEVEL_WARNING"] = 2] = "LOG_LEVEL_WARNING";\n    log_level_t[log_level_t["LOG_LEVEL_VERBOSE"] = 3] = "LOG_LEVEL_VERBOSE";\n})(log_level_t || (log_level_t = {}));\n;\nvar frame_pixel_format_t;\n(function (frame_pixel_format_t) {\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_I420"] = 0] = "FRAME_PIXEL_FORMAT_I420";\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_I420A"] = 1] = "FRAME_PIXEL_FORMAT_I420A";\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_I422"] = 2] = "FRAME_PIXEL_FORMAT_I422";\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_I444"] = 3] = "FRAME_PIXEL_FORMAT_I444";\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_NV12"] = 4] = "FRAME_PIXEL_FORMAT_NV12";\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_RGBA"] = 5] = "FRAME_PIXEL_FORMAT_RGBA";\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_BGRA"] = 6] = "FRAME_PIXEL_FORMAT_BGRA";\n    frame_pixel_format_t[frame_pixel_format_t["FRAME_PIXEL_FORMAT_Y"] = 7] = "FRAME_PIXEL_FORMAT_Y";\n})(frame_pixel_format_t || (frame_pixel_format_t = {}));\n;\nvar image_target_type_t;\n(function (image_target_type_t) {\n    image_target_type_t[image_target_type_t["IMAGE_TRACKER_TYPE_PLANAR"] = 0] = "IMAGE_TRACKER_TYPE_PLANAR";\n    image_target_type_t[image_target_type_t["IMAGE_TRACKER_TYPE_CYLINDRICAL"] = 1] = "IMAGE_TRACKER_TYPE_CYLINDRICAL";\n    image_target_type_t[image_target_type_t["IMAGE_TRACKER_TYPE_CONICAL"] = 2] = "IMAGE_TRACKER_TYPE_CONICAL";\n})(image_target_type_t || (image_target_type_t = {}));\n;\n\n;// ./node_modules/@zappar/zappar-cv/lib/gl-state-manager.js\nconst managers = new Map();\nclass GLStateManager {\n    constructor(_gl) {\n        this._gl = _gl;\n        this._viewports = [];\n        this._underlyingViewport = this._gl.viewport;\n        this._viewports.push(this._gl.getParameter(this._gl.VIEWPORT));\n        this._gl.viewport = (x, y, width, height) => {\n            this._viewports[this._viewports.length - 1] = [x, y, width, height];\n            this._underlyingViewport.call(this._gl, x, y, width, height);\n        };\n    }\n    static get(gl) {\n        let existing = managers.get(gl);\n        if (!existing) {\n            existing = new GLStateManager(gl);\n            managers.set(gl, existing);\n        }\n        return existing;\n    }\n    push() {\n        this._viewports.push(this._viewports[this._viewports.length - 1]);\n    }\n    pop() {\n        const current = this._viewports.pop();\n        const prev = this._viewports[this._viewports.length - 1];\n        if (!current || current[0] !== prev[0] || current[1] !== prev[1] || current[2] !== prev[2] || current[3] !== prev[3]) {\n            this._underlyingViewport.call(this._gl, prev[0], prev[1], prev[2], prev[3]);\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/ua-parser-js/src/ua-parser.js\nvar ua_parser = __webpack_require__(232);\n;// ./node_modules/@zappar/zappar-cv/lib/profile.js\n\nvar EmbeddedVideoImplementation;\n(function (EmbeddedVideoImplementation) {\n    EmbeddedVideoImplementation[EmbeddedVideoImplementation["OBJECT_URL"] = 0] = "OBJECT_URL";\n    EmbeddedVideoImplementation[EmbeddedVideoImplementation["SRC_OBJECT"] = 1] = "SRC_OBJECT";\n})(EmbeddedVideoImplementation || (EmbeddedVideoImplementation = {}));\nlet profile = {\n    deviceMotionMutliplier: -1.0,\n    blacklisted: false,\n    showGyroPermissionsWarningIfNecessary: false,\n    showSafariPermissionsResetIfNecessary: false,\n    requestHighFrameRate: false,\n    videoWidth: 640,\n    videoHeight: 480,\n    dataWidth: 320,\n    dataHeight: 240,\n    videoElementInDOM: false,\n    preferMediaStreamTrackProcessorCamera: false,\n    preferImageBitmapCamera: false,\n    ios164CameraSelection: false,\n    relyOnConstraintsForCameraSelection: false,\n    forceWindowOrientation: false,\n};\nif (typeof window !== "undefined") {\n    window["zeeProfile"] = profile;\n    if (window.location.href.indexOf("_mstppipeline") >= 0) {\n        console.log("Configuring for MSTP camera pipeline (if supported)");\n        profile.preferMediaStreamTrackProcessorCamera = true;\n    }\n    if (window.location.href.indexOf("_imagebitmappipeline") >= 0) {\n        console.log("Configuring for ImageBitmap camera pipeline (if supported)");\n        profile.preferImageBitmapCamera = true;\n    }\n}\nlet agent = new ua_parser.UAParser();\nlet os = (agent.getOS().name || "unknown").toLowerCase();\nlet engine = (agent.getEngine().name || "unknown").toLowerCase();\nif (engine === "webkit" && os !== "ios") {\n    profile.deviceMotionMutliplier = 1.0;\n    if (typeof window !== "undefined" && window.orientation !== undefined) {\n        // iPad\n        iDevice("15.0");\n    }\n}\nif (engine === "webkit" && os === "ios") {\n    profile.deviceMotionMutliplier = 1.0;\n    const version = agent.getOS().version || "15.0";\n    iDevice(version);\n}\nfunction iDevice(version) {\n    profile.forceWindowOrientation = true;\n    let versionParts = version.split(".");\n    if (versionParts.length >= 2) {\n        const majorVersion = parseInt(versionParts[0]);\n        const minorVersion = parseInt(versionParts[1]);\n        if (majorVersion < 11 ||\n            (majorVersion === 11 && minorVersion < 3)) {\n            profile.blacklisted = true;\n        }\n        if (majorVersion < 12 ||\n            (majorVersion === 12 && minorVersion < 2)) {\n            profile.videoElementInDOM = true;\n        }\n        if ((majorVersion === 12 && minorVersion >= 2) || (majorVersion >= 13))\n            profile.showGyroPermissionsWarningIfNecessary = true;\n        if (majorVersion >= 13) {\n            profile.showSafariPermissionsResetIfNecessary = true;\n        }\n        if (((majorVersion >= 12 && minorVersion > 1) || (majorVersion >= 13)) &&\n            navigator.mediaDevices &&\n            navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().frameRate) {\n            profile.requestHighFrameRate = true;\n            if (majorVersion < 14) {\n                // Avoid bug where iOS letterboxes 16:9 into 4:3 for high fps\n                // Doesn\'t seem needed with newer versions of iOS, tested on 14.8.1 and 15.2\n                profile.videoHeight = 360;\n                profile.dataHeight = 180;\n            }\n        }\n        if (majorVersion === 16 && minorVersion >= 4) {\n            profile.ios164CameraSelection = true;\n        }\n        if (majorVersion >= 17) {\n            profile.relyOnConstraintsForCameraSelection = true;\n        }\n    }\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/shader.js\nfunction compileShader(gl, type, src) {\n    let ret = gl.createShader(type);\n    if (!ret)\n        throw new Error("Unable to create shader");\n    gl.shaderSource(ret, src);\n    gl.compileShader(ret);\n    let msg = gl.getShaderInfoLog(ret);\n    if (msg && msg.trim().length > 0)\n        throw new Error("Shader compile error: " + msg);\n    return ret;\n}\nfunction linkProgram(gl, prog) {\n    gl.linkProgram(prog);\n    let msg = gl.getProgramInfoLog(prog);\n    if (msg && msg.trim().length > 0)\n        throw new Error("Unable to link: " + msg);\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/image-process-gl.js\n\n\n\n\nclass ImageProcessGL {\n    constructor(_gl) {\n        this._gl = _gl;\n        this._isPaused = true;\n        this._hadFrames = false;\n        this._isUserFacing = false;\n        this._cameraToScreenRotation = 0;\n        this._isUploadFrame = true;\n        this._computedTransformRotation = -1;\n        this._computedFrontCameraRotation = false;\n        this._cameraUvTransform = create();\n        this._framebufferWidth = 0;\n        this._framebufferHeight = 0;\n        this._framebufferId = null;\n        this._renderTexture = null;\n        this._isWebGL2 = false;\n        this._isWebGL2 = _gl.getParameter(_gl.VERSION).indexOf("WebGL 2") >= 0;\n        if (!this._isWebGL2) {\n            this._instancedArraysExtension = this._gl.getExtension("ANGLE_instanced_arrays");\n        }\n    }\n    resetGLContext() {\n        this._framebufferId = null;\n        this._renderTexture = null;\n        this._vertexBuffer = undefined;\n        this._indexBuffer = undefined;\n        this._greyscaleShader = undefined;\n    }\n    destroy() {\n        this.resetGLContext();\n    }\n    uploadFrame(texture, img, rotation, fc) {\n        let gl = this._gl;\n        const glStateManager = GLStateManager.get(gl);\n        glStateManager.push();\n        const reenableScissorTest = gl.isEnabled(gl.SCISSOR_TEST);\n        const reenableDepthTest = gl.isEnabled(gl.DEPTH_TEST);\n        const reenableBlend = gl.isEnabled(gl.BLEND);\n        const reenableCullFace = gl.isEnabled(gl.CULL_FACE);\n        const reenableStencilTest = gl.isEnabled(gl.STENCIL_TEST);\n        const previousActiveTexture = gl.getParameter(gl.ACTIVE_TEXTURE);\n        const previousUnpackFlip = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\n        const previousProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        gl.activeTexture(gl.TEXTURE0);\n        const previousBoundTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        const previousBoundFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n        const previousBoundArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n        const previousBoundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n        gl.disable(gl.SCISSOR_TEST);\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.BLEND);\n        gl.disable(gl.CULL_FACE);\n        gl.disable(gl.STENCIL_TEST);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        const level = 0;\n        const internalFormat = gl.RGBA;\n        const srcFormat = gl.RGBA;\n        const srcType = gl.UNSIGNED_BYTE;\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, img);\n        let videoWidth = 0;\n        let videoHeight = 0;\n        if (typeof HTMLVideoElement !== "undefined" && img instanceof HTMLVideoElement) {\n            videoWidth = img.videoWidth;\n            videoHeight = img.videoHeight;\n        }\n        else {\n            videoWidth = img.width;\n            videoHeight = img.height;\n        }\n        if (videoHeight > videoWidth)\n            videoHeight = [videoWidth, videoWidth = videoHeight][0];\n        this._updateTransforms(rotation, fc);\n        let framebuffer = this._getFramebuffer(gl, profile.dataWidth / 4, profile.dataHeight);\n        let vbo = this._getVertexBuffer(gl);\n        let ibo = this._getIndexBuffer(gl);\n        let shader = this._getGreyscaleShader(gl);\n        const previousVertexAttribSize = gl.getVertexAttrib(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_SIZE);\n        const previousVertexAttribType = gl.getVertexAttrib(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_TYPE);\n        const previousVertexAttribNormalized = gl.getVertexAttrib(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED);\n        const previousVertexAttribStride = gl.getVertexAttrib(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_STRIDE);\n        const previousVertexAttribOffset = gl.getVertexAttribOffset(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_POINTER);\n        const previousVertexAttribEnabled = gl.getVertexAttrib(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_ENABLED);\n        const previousVertexAttribBufferBinding = gl.getVertexAttrib(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);\n        const previousTextureAttribSize = gl.getVertexAttrib(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_SIZE);\n        const previousTextureAttribType = gl.getVertexAttrib(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_TYPE);\n        const previousTextureAttribNormalized = gl.getVertexAttrib(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED);\n        const previousTextureAttribStride = gl.getVertexAttrib(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_STRIDE);\n        const previousTextureAttribOffset = gl.getVertexAttribOffset(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_POINTER);\n        const previousTextureAttribBufferBinding = gl.getVertexAttrib(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);\n        const previousTextureAttribEnabled = gl.getVertexAttrib(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_ENABLED);\n        let previousVertexAttribDivisor = 0;\n        let previousTextureAttribDivisor = 0;\n        if (this._isWebGL2) {\n            previousVertexAttribDivisor = gl.getVertexAttrib(shader.aVertexPositionLoc, gl.VERTEX_ATTRIB_ARRAY_DIVISOR);\n            previousTextureAttribDivisor = gl.getVertexAttrib(shader.aTextureCoordLoc, gl.VERTEX_ATTRIB_ARRAY_DIVISOR);\n            gl.vertexAttribDivisor(shader.aVertexPositionLoc, 0);\n            gl.vertexAttribDivisor(shader.aTextureCoordLoc, 0);\n        }\n        else if (this._instancedArraysExtension) {\n            previousVertexAttribDivisor = gl.getVertexAttrib(shader.aVertexPositionLoc, this._instancedArraysExtension.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);\n            previousTextureAttribDivisor = gl.getVertexAttrib(shader.aTextureCoordLoc, this._instancedArraysExtension.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);\n            this._instancedArraysExtension.vertexAttribDivisorANGLE(shader.aVertexPositionLoc, 0);\n            this._instancedArraysExtension.vertexAttribDivisorANGLE(shader.aTextureCoordLoc, 0);\n        }\n        // Rendering to the greyscale conversion buffer - bind the framebuffer\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.viewport(0, 0, this._framebufferWidth, this._framebufferHeight);\n        // We\'ll be replacing all the content - clear is a good hint for this on mobile\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        // Set up bindings for vertex attributes\n        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        gl.vertexAttribPointer(shader.aVertexPositionLoc, 2, gl.FLOAT, false, 4 * 4, 0);\n        gl.enableVertexAttribArray(shader.aVertexPositionLoc);\n        gl.vertexAttribPointer(shader.aTextureCoordLoc, 2, gl.FLOAT, false, 4 * 4, 2 * 4);\n        gl.enableVertexAttribArray(shader.aTextureCoordLoc);\n        // Bind the index buffer\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n        // Tell WebGL to use our program when drawing\n        gl.useProgram(shader.program);\n        // Specify greyscale width for the correct offsets, and the uv transform\n        gl.uniform1f(shader.uTexWidthLoc, profile.dataWidth);\n        gl.uniformMatrix4fv(shader.uUvTransformLoc, false, this._cameraUvTransform);\n        gl.activeTexture(gl.TEXTURE0);\n        // Bind the texture to texture unit 0\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        // Tell the shader we bound the texture to texture unit 0\n        gl.uniform1i(shader.uSamplerLoc, 0);\n        // Do the drawing...\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n        gl.bindBuffer(gl.ARRAY_BUFFER, previousVertexAttribBufferBinding);\n        gl.vertexAttribPointer(shader.aVertexPositionLoc, previousVertexAttribSize, previousVertexAttribType, previousVertexAttribNormalized, previousVertexAttribStride, previousVertexAttribOffset);\n        gl.bindBuffer(gl.ARRAY_BUFFER, previousTextureAttribBufferBinding);\n        gl.vertexAttribPointer(shader.aTextureCoordLoc, previousTextureAttribSize, previousTextureAttribType, previousTextureAttribNormalized, previousTextureAttribStride, previousTextureAttribOffset);\n        gl.bindBuffer(gl.ARRAY_BUFFER, previousBoundArrayBuffer);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, previousBoundElementArrayBuffer);\n        if (!previousVertexAttribEnabled)\n            gl.disableVertexAttribArray(shader.aVertexPositionLoc);\n        if (!previousTextureAttribEnabled)\n            gl.disableVertexAttribArray(shader.aTextureCoordLoc);\n        if (this._isWebGL2) {\n            gl.vertexAttribDivisor(shader.aVertexPositionLoc, previousVertexAttribDivisor);\n            gl.vertexAttribDivisor(shader.aTextureCoordLoc, previousTextureAttribDivisor);\n        }\n        else if (this._instancedArraysExtension) {\n            this._instancedArraysExtension.vertexAttribDivisorANGLE(shader.aVertexPositionLoc, previousVertexAttribDivisor);\n            this._instancedArraysExtension.vertexAttribDivisorANGLE(shader.aTextureCoordLoc, previousTextureAttribDivisor);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, previousBoundFramebuffer);\n        gl.useProgram(previousProgram);\n        gl.bindTexture(gl.TEXTURE_2D, previousBoundTexture);\n        gl.activeTexture(previousActiveTexture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, previousUnpackFlip);\n        glStateManager.pop();\n        if (reenableBlend)\n            gl.enable(gl.BLEND);\n        if (reenableCullFace)\n            gl.enable(gl.CULL_FACE);\n        if (reenableDepthTest)\n            gl.enable(gl.DEPTH_TEST);\n        if (reenableScissorTest)\n            gl.enable(gl.SCISSOR_TEST);\n        if (reenableStencilTest)\n            gl.enable(gl.STENCIL_TEST);\n    }\n    readFrame(texture, pixels) {\n        let gl = this._gl;\n        let pixelsView = new Uint8Array(pixels);\n        const previousBoundFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n        let framebuffer = this._getFramebuffer(gl, profile.dataWidth / 4, profile.dataHeight);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.readPixels(0, 0, this._framebufferWidth, this._framebufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixelsView);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, previousBoundFramebuffer);\n        return {\n            uvTransform: this._cameraUvTransform,\n            data: pixels,\n            texture,\n            dataWidth: profile.dataWidth,\n            dataHeight: profile.dataHeight,\n            userFacing: this._computedFrontCameraRotation\n        };\n    }\n    _updateTransforms(rot, fc) {\n        if (rot == this._computedTransformRotation && fc == this._computedFrontCameraRotation)\n            return;\n        this._computedTransformRotation = rot;\n        this._computedFrontCameraRotation = fc;\n        this._cameraUvTransform = this._getCameraUvTransform();\n    }\n    _getCameraUvTransform() {\n        switch (this._computedTransformRotation) {\n            case 270: return new Float32Array([0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1]);\n            case 180: return new Float32Array([-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1]);\n            case 90: return new Float32Array([0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]);\n        }\n        return new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    }\n    _getFramebuffer(gl, fbWidth, fbHeight) {\n        if (this._framebufferWidth === fbWidth && this._framebufferHeight === fbHeight && this._framebufferId)\n            return this._framebufferId;\n        if (this._framebufferId) {\n            gl.deleteFramebuffer(this._framebufferId);\n            this._framebufferId = null;\n        }\n        if (this._renderTexture) {\n            gl.deleteTexture(this._renderTexture);\n            this._renderTexture = null;\n        }\n        this._framebufferId = gl.createFramebuffer();\n        if (!this._framebufferId)\n            throw new Error("Unable to create framebuffer");\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebufferId);\n        this._renderTexture = gl.createTexture();\n        if (!this._renderTexture)\n            throw new Error("Unable to create render texture");\n        gl.activeTexture(gl.TEXTURE0);\n        const previousBoundTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, this._renderTexture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, fbWidth, fbHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._renderTexture, 0);\n        let fbStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        if (fbStatus !== gl.FRAMEBUFFER_COMPLETE)\n            throw new Error("Framebuffer not complete: " + fbStatus.toString());\n        this._framebufferWidth = fbWidth;\n        this._framebufferHeight = fbHeight;\n        gl.bindTexture(gl.TEXTURE_2D, previousBoundTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        return this._framebufferId;\n    }\n    _getVertexBuffer(gl) {\n        if (this._vertexBuffer)\n            return this._vertexBuffer;\n        this._vertexBuffer = gl.createBuffer();\n        if (!this._vertexBuffer)\n            throw new Error("Unable to create vertex buffer");\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);\n        let buffer = new Float32Array([-1.0, -1.0, 0.0, 0.0,\n            -1.0, 1.0, 0.0, 1.0,\n            1.0, 1.0, 1.0, 1.0,\n            1.0, -1.0, 1.0, 0.0]);\n        gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.STATIC_DRAW);\n        return this._vertexBuffer;\n    }\n    _getIndexBuffer(gl) {\n        if (this._indexBuffer)\n            return this._indexBuffer;\n        this._indexBuffer = gl.createBuffer();\n        if (!this._indexBuffer)\n            throw new Error("Unable to create index buffer");\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\n        let buffer = new Uint16Array([0, 1, 2, 0, 2, 3]);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl.STATIC_DRAW);\n        return this._indexBuffer;\n    }\n    _getGreyscaleShader(gl) {\n        if (this._greyscaleShader)\n            return this._greyscaleShader;\n        let prog = gl.createProgram();\n        if (!prog)\n            throw new Error("Unable to create program");\n        let vertexShader = compileShader(gl, gl.VERTEX_SHADER, greyscaleVsSource);\n        let fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, greyscaleFsSource);\n        gl.attachShader(prog, vertexShader);\n        gl.attachShader(prog, fragmentShader);\n        linkProgram(gl, prog);\n        let uTexWidthLoc = gl.getUniformLocation(prog, "uTexWidth");\n        if (!uTexWidthLoc)\n            throw new Error("Unable to get uniform location uTexWidth");\n        let uUvTransformLoc = gl.getUniformLocation(prog, "uUvTransform");\n        if (!uUvTransformLoc)\n            throw new Error("Unable to get uniform location uUvTransform");\n        let uSamplerLoc = gl.getUniformLocation(prog, "uSampler");\n        if (!uSamplerLoc)\n            throw new Error("Unable to get uniform location uSampler");\n        this._greyscaleShader = {\n            program: prog,\n            aVertexPositionLoc: gl.getAttribLocation(prog, "aVertexPosition"),\n            aTextureCoordLoc: gl.getAttribLocation(prog, "aTextureCoord"),\n            uTexWidthLoc: uTexWidthLoc,\n            uUvTransformLoc: uUvTransformLoc,\n            uSamplerLoc: uSamplerLoc\n        };\n        return this._greyscaleShader;\n    }\n}\nlet greyscaleVsSource = `\n    attribute vec4 aVertexPosition;\n    attribute vec2 aTextureCoord;\n\n    varying highp vec2 vTextureCoord1;\n    varying highp vec2 vTextureCoord2;\n    varying highp vec2 vTextureCoord3;\n    varying highp vec2 vTextureCoord4;\n\n    uniform float uTexWidth;\n\tuniform mat4 uUvTransform;\n\n    void main(void) {\n      highp vec2 offset1 = vec2(1.5 / uTexWidth, 0);\n      highp vec2 offset2 = vec2(0.5 / uTexWidth, 0);\n\n      gl_Position = aVertexPosition;\n      vTextureCoord1 = (uUvTransform * vec4(aTextureCoord - offset1, 0, 1)).xy;\n      vTextureCoord2 = (uUvTransform * vec4(aTextureCoord - offset2, 0, 1)).xy;\n      vTextureCoord3 = (uUvTransform * vec4(aTextureCoord + offset2, 0, 1)).xy;\n      vTextureCoord4 = (uUvTransform * vec4(aTextureCoord + offset1, 0, 1)).xy;\n    }\n`;\n// Fragment shader program\nlet greyscaleFsSource = `\n  varying highp vec2 vTextureCoord1;\n  varying highp vec2 vTextureCoord2;\n  varying highp vec2 vTextureCoord3;\n  varying highp vec2 vTextureCoord4;\n\n  uniform sampler2D uSampler;\n\n  const lowp vec3 colorWeights = vec3(77.0 / 256.0, 150.0 / 256.0, 29.0 / 256.0);\n\n  void main(void) {\n    lowp vec4 outpx;\n\n    outpx.r = dot(colorWeights, texture2D(uSampler, vTextureCoord1).xyz);\n    outpx.g = dot(colorWeights, texture2D(uSampler, vTextureCoord2).xyz);\n    outpx.b = dot(colorWeights, texture2D(uSampler, vTextureCoord3).xyz);\n    outpx.a = dot(colorWeights, texture2D(uSampler, vTextureCoord4).xyz);\n\n    gl_FragColor = outpx;\n  }\n`;\n\n;// ./node_modules/@zappar/zappar-cv/lib/worker-imagebitmap.js\n\n\n\nlet pixels;\nlet texture;\nlet _imageProcessor;\nlet _gl;\nfunction getImageProcessor() {\n    if (!_imageProcessor || !_gl) {\n        const canvas = new OffscreenCanvas(1, 1);\n        _gl = canvas.getContext("webgl");\n        if (!_gl)\n            throw new Error("Unable to get offscreen GL context");\n        _imageProcessor = new ImageProcessGL(_gl);\n    }\n    return [_imageProcessor, _gl];\n}\nfunction handleImageBitmap(m, r, server, mgr) {\n    // img: ImageBitmap,\n    //                                 rot: number,\n    //                                 tokenId: number,\n    //                                 r: zappar_cwrap,\n    //                                 p: zappar_pipeline_t,\n    //                                 userFacing: boolean,\n    //                                 server: zappar_server,\n    //                                 mgr: MsgManager) {\n    const [imageProcessor, gl] = getImageProcessor();\n    if (!texture) {\n        texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n    if (!texture)\n        return;\n    if (!pixels || pixels.byteLength < profile.dataWidth * profile.dataHeight) {\n        console.log("Generating pixel buffer", profile.dataWidth * profile.dataHeight);\n        pixels = new ArrayBuffer(profile.dataWidth * profile.dataHeight);\n    }\n    imageProcessor.uploadFrame(texture, m.i, m.r, m.userFacing);\n    let info = imageProcessor.readFrame(texture, pixels);\n    let msg = {\n        t: "imageBitmapS2C",\n        dataWidth: info.dataWidth,\n        dataHeight: info.dataHeight,\n        frame: m.i,\n        userFacing: info.userFacing,\n        uvTransform: info.uvTransform || create(),\n        tokenId: m.tokenId, p: m.p\n    };\n    mgr.postOutgoingMessage(msg, [m.i]);\n    let pipeline = server._pipeline_by_instance.get(m.p);\n    if (pipeline) {\n        r.pipeline_camera_frame_submit(pipeline, pixels, info.dataWidth, info.dataHeight, m.tokenId, m.cameraToDevice, m.cameraModel, info.userFacing);\n        r.pipeline_frame_update(pipeline);\n        server.exploreState();\n    }\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/worker-server.js\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\nlet messageManager = new MsgManager();\nlet latestCameraToScreenRotation = 0;\nfunction launchWorkerServer(wasmUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let mod = zappar_cv({\n            locateFile: (path, prefix) => {\n                if (path.endsWith("zappar-cv.wasm")) {\n                    return wasmUrl;\n                }\n                return prefix + path;\n            },\n            onRuntimeInitialized: () => {\n                let r = getRuntimeObject(mod);\n                let server = new zappar_server(r, (pipelineId, ab) => {\n                    messageManager.postOutgoingMessage({\n                        p: pipelineId,\n                        t: "zappar",\n                        d: ab\n                    }, [ab]);\n                });\n                messageManager.postOutgoingMessage("loaded", []);\n                messageManager.onIncomingMessage.bind((msg) => {\n                    var _a;\n                    switch (msg.t) {\n                        case "zappar":\n                            server.processBuffer(msg.d);\n                            messageManager.postOutgoingMessage({ t: "buf", d: msg.d }, [msg.d]);\n                            break;\n                        case "buf":\n                            (_a = server.serializersByPipelineId.get(msg.p)) === null || _a === void 0 ? void 0 : _a.bufferReturn(msg.d);\n                            break;\n                        case "cameraFrameC2S": {\n                            let msgt = msg;\n                            let pipeline = server._pipeline_by_instance.get(msgt.p);\n                            let att;\n                            if (pipeline) {\n                                r.pipeline_camera_frame_submit(pipeline, msgt.d, msgt.width, msgt.height, msgt.token, msgt.c2d, msgt.cm, msgt.userFacing);\n                                r.pipeline_frame_update(pipeline);\n                                att = r.pipeline_camera_frame_device_attitude(pipeline);\n                                server.exploreState();\n                            }\n                            let ret = {\n                                token: msgt.token,\n                                d: msgt.d,\n                                p: msgt.p,\n                                t: "cameraFrameRecycleS2C",\n                                att\n                            };\n                            messageManager.postOutgoingMessage(ret, [msgt.d]);\n                            break;\n                        }\n                        case "streamC2S": {\n                            let msgt = msg;\n                            consumeStream(mod, r, msgt.s, msgt.p, msgt.userFacing, server, msgt.source);\n                            break;\n                        }\n                        case "cameraToScreenC2S": {\n                            let msgt = msg;\n                            latestCameraToScreenRotation = msgt.r;\n                            break;\n                        }\n                        case "imageBitmapC2S": {\n                            let msgt = msg;\n                            handleImageBitmap(msgt, r, server, messageManager);\n                            break;\n                        }\n                    }\n                });\n            }\n        });\n    });\n}\n;\nlet streamDataBufferPointer = 0;\nlet streamDataBufferLength = 0;\nlet tokenId = 1;\nconst cameraToDeviceTransform = create();\nconst cameraModel = new Float32Array([300, 300, 160, 120, 0, 0]);\nfunction consumeStream(mod, r, stream, p, userFacing, server, source) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const reader = yield stream.getReader();\n        while (true) {\n            let result = yield reader.read();\n            if (result.done) {\n                console.log("Stream done");\n                return;\n            }\n            let frame = result.value;\n            let size = frame.allocationSize();\n            if (size > streamDataBufferLength) {\n                if (streamDataBufferPointer > 0)\n                    mod._free(streamDataBufferPointer);\n                streamDataBufferPointer = mod._malloc(size);\n                streamDataBufferLength = size;\n            }\n            yield frame.copyTo(mod.HEAPU8.subarray(streamDataBufferPointer, streamDataBufferPointer + streamDataBufferLength));\n            let token = tokenId;\n            tokenId++;\n            const width = frame.visibleRect.width;\n            const height = frame.visibleRect.height;\n            let uvTransform;\n            let dataWidth = width;\n            let dataHeight = height;\n            switch (latestCameraToScreenRotation) {\n                case 270:\n                    uvTransform = new Float32Array([0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1]);\n                    dataWidth = height;\n                    dataHeight = width;\n                    break;\n                case 180:\n                    uvTransform = new Float32Array([-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1]);\n                    break;\n                case 90:\n                    uvTransform = new Float32Array([0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]);\n                    dataWidth = height;\n                    dataHeight = width;\n                    break;\n                default:\n                    uvTransform = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n                    break;\n            }\n            let clone = frame.clone();\n            if (userFacing)\n                fromScaling(cameraToDeviceTransform, [-1, 1, -1]);\n            else\n                identity(cameraToDeviceTransform);\n            let focalLength = 300.0 * profile.dataWidth / 320.0;\n            cameraModel[0] = focalLength;\n            cameraModel[1] = focalLength;\n            cameraModel[2] = profile.dataWidth * 0.5;\n            cameraModel[3] = profile.dataHeight * 0.5;\n            const ret = {\n                token: token,\n                d: clone,\n                p: p,\n                t: "videoFrameS2C",\n                userFacing,\n                uvTransform,\n                w: dataWidth,\n                h: dataHeight,\n                cameraToDevice: cameraToDeviceTransform,\n                cameraModel,\n                source\n            };\n            messageManager.postOutgoingMessage(ret, [ret.d, ret.uvTransform.buffer]);\n            const pipeline = server._pipeline_by_instance.get(p);\n            if (pipeline) {\n                r.pipeline_camera_frame_submit_raw_pointer(pipeline, streamDataBufferPointer, size, framePixelFormatFromFormat(frame.format), width, height, token, cameraToDeviceTransform, latestCameraToScreenRotation, cameraModel, userFacing);\n                r.pipeline_frame_update(pipeline);\n                server.exploreState();\n            }\n            frame.close();\n        }\n    });\n}\nfunction framePixelFormatFromFormat(f) {\n    switch (f) {\n        case "I420": return frame_pixel_format_t.FRAME_PIXEL_FORMAT_I420;\n        case "I420A": return frame_pixel_format_t.FRAME_PIXEL_FORMAT_I420A;\n        case "I422": return frame_pixel_format_t.FRAME_PIXEL_FORMAT_I422;\n        case "I444": return frame_pixel_format_t.FRAME_PIXEL_FORMAT_I444;\n        case "NV12": return frame_pixel_format_t.FRAME_PIXEL_FORMAT_NV12;\n        case "RGBA":\n        case "RGBX":\n            return frame_pixel_format_t.FRAME_PIXEL_FORMAT_RGBA;\n        case "BGRA":\n        case "BGRX":\n            return frame_pixel_format_t.FRAME_PIXEL_FORMAT_BGRA;\n    }\n    return frame_pixel_format_t.FRAME_PIXEL_FORMAT_Y;\n}\n\n;// ./node_modules/@zappar/zappar-cv/lib/worker.js\n\nconst ctx = self;\nmessageManager.onOutgoingMessage.bind(() => {\n    let msgs = messageManager.getOutgoingMessages();\n    for (let msg of msgs) {\n        ctx.postMessage(msg.msg, msg.transferables);\n    }\n});\nlet launchHandler = (evt) => {\n    if (evt && evt.data && evt.data.t === "wasm") {\n        let url = location.href.startsWith("blob") ? evt.data.url : new URL(/* asset import */ __webpack_require__(138), __webpack_require__.b).toString();\n        launchWorkerServer(url);\n        ctx.removeEventListener("message", launchHandler);\n    }\n};\nctx.addEventListener("message", launchHandler);\nctx.addEventListener("message", evt => {\n    messageManager.postIncomingMessage(evt.data);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///811\n\n}')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I].call(C.exports,C,C.exports,__webpack_require__),C.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.amdO={},__webpack_require__.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),__webpack_require__.p="/",__webpack_require__.b=self.location+"/../../";var __webpack_exports__=__webpack_require__(811)})();